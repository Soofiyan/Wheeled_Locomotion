
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000376  0000040a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800200  00800200  0000040a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000420  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000036a  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000125  00000000  00000000  000007f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000182  00000000  00000000  00000917  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00000a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013f  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a0  00000000  00000000  00000c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000d23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 31       	cpi	r26, 0x14	; 20
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
 108:	0c 94 b9 01 	jmp	0x372	; 0x372 <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <motor_pwm_init>:
    prev =  curr;
}

void motor_pwm_init()
{
    TCCR3A |= (1<<COM3A1)|(1<<WGM30);
 110:	e0 e9       	ldi	r30, 0x90	; 144
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	81 68       	ori	r24, 0x81	; 129
 118:	80 83       	st	Z, r24
    TCCR3B |= (1<<WGM32)|(1<<CS30)|(1<<CS32);
 11a:	e1 e9       	ldi	r30, 0x91	; 145
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	8d 60       	ori	r24, 0x0D	; 13
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <init_ADC>:
}

void init_ADC()
{
    ADCSRA = 0x00;
 126:	ea e7       	ldi	r30, 0x7A	; 122
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	10 82       	st	Z, r1
    //ADCSRB = 0x00;        //MUX5KJDGHKDGHDJDLVK = 0
    ADMUX = 0x20;    //Vref = 5V external --- ADLAR=1 --- MUX4:0 = 0000
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	80 93 7c 00 	sts	0x007C, r24
    ACSR = 0x80;
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	80 bf       	out	0x30, r24	; 48
    ADCSRA = 0x86;        //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 136:	86 e8       	ldi	r24, 0x86	; 134
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret

0000013c <ADC_read>:
    unsigned char a;
    //if(Ch>7)
    //{
    //    ADCSRB = 0x08;
    //}
    Ch = Ch & 0x07;
 13c:	87 70       	andi	r24, 0x07	; 7
    ADMUX= 0x20| Ch;
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA = ADCSRA | 0x40;        //Set start conversion bit
 144:	80 91 7a 00 	lds	r24, 0x007A
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 93 7a 00 	sts	0x007A, r24
    while((ADCSRA&0x10)==0);    //Wait for ADC conversion to complete
 14e:	80 91 7a 00 	lds	r24, 0x007A
 152:	84 ff       	sbrs	r24, 4
 154:	fc cf       	rjmp	.-8      	; 0x14e <ADC_read+0x12>
    a=ADCH;
 156:	80 91 79 00 	lds	r24, 0x0079
    ADCSRA = ADCSRA|0x10; //clear ADIF (ADC interrupt Flag) by writing 1 to it
 15a:	90 91 7a 00 	lds	r25, 0x007A
 15e:	90 61       	ori	r25, 0x10	; 16
 160:	90 93 7a 00 	sts	0x007A, r25
    //ADCSRB = 0x00;
    return a;
}
 164:	08 95       	ret

00000166 <encoder>:
    }
    return 0;
}

void encoder()
{
 166:	cf 92       	push	r12
 168:	df 92       	push	r13
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
    curr = ADC_read(8);
 172:	88 e0       	ldi	r24, 0x08	; 8
 174:	0e 94 9e 00 	call	0x13c	; 0x13c <ADC_read>
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	80 93 04 02 	sts	0x0204, r24
 182:	90 93 05 02 	sts	0x0205, r25
 186:	a0 93 06 02 	sts	0x0206, r26
 18a:	b0 93 07 02 	sts	0x0207, r27
    
    DISP+= (curr- prev);
 18e:	40 91 08 02 	lds	r20, 0x0208
 192:	50 91 09 02 	lds	r21, 0x0209
 196:	60 91 0a 02 	lds	r22, 0x020A
 19a:	70 91 0b 02 	lds	r23, 0x020B
 19e:	6c 01       	movw	r12, r24
 1a0:	7d 01       	movw	r14, r26
 1a2:	c4 1a       	sub	r12, r20
 1a4:	d5 0a       	sbc	r13, r21
 1a6:	e6 0a       	sbc	r14, r22
 1a8:	f7 0a       	sbc	r15, r23
 1aa:	00 91 0c 02 	lds	r16, 0x020C
 1ae:	10 91 0d 02 	lds	r17, 0x020D
 1b2:	20 91 0e 02 	lds	r18, 0x020E
 1b6:	30 91 0f 02 	lds	r19, 0x020F
 1ba:	0c 0d       	add	r16, r12
 1bc:	1d 1d       	adc	r17, r13
 1be:	2e 1d       	adc	r18, r14
 1c0:	3f 1d       	adc	r19, r15
    
    if(curr - prev < -150)
 1c2:	ea e6       	ldi	r30, 0x6A	; 106
 1c4:	ce 16       	cp	r12, r30
 1c6:	ef ef       	ldi	r30, 0xFF	; 255
 1c8:	de 06       	cpc	r13, r30
 1ca:	ee 06       	cpc	r14, r30
 1cc:	fe 06       	cpc	r15, r30
 1ce:	6c f4       	brge	.+26     	; 0x1ea <encoder+0x84>
    {
        DISP -= (curr - prev) ;
 1d0:	48 1b       	sub	r20, r24
 1d2:	59 0b       	sbc	r21, r25
 1d4:	6a 0b       	sbc	r22, r26
 1d6:	7b 0b       	sbc	r23, r27
 1d8:	40 0f       	add	r20, r16
 1da:	51 1f       	adc	r21, r17
 1dc:	62 1f       	adc	r22, r18
 1de:	73 1f       	adc	r23, r19
        DISP ++;
 1e0:	4f 5f       	subi	r20, 0xFF	; 255
 1e2:	5f 4f       	sbci	r21, 0xFF	; 255
 1e4:	6f 4f       	sbci	r22, 0xFF	; 255
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255
 1e8:	1b c0       	rjmp	.+54     	; 0x220 <encoder+0xba>
    }
    
    if(curr - prev > 150)
 1ea:	e7 e9       	ldi	r30, 0x97	; 151
 1ec:	ce 16       	cp	r12, r30
 1ee:	d1 04       	cpc	r13, r1
 1f0:	e1 04       	cpc	r14, r1
 1f2:	f1 04       	cpc	r15, r1
 1f4:	4c f4       	brge	.+18     	; 0x208 <encoder+0xa2>

void encoder()
{
    curr = ADC_read(8);
    
    DISP+= (curr- prev);
 1f6:	00 93 0c 02 	sts	0x020C, r16
 1fa:	10 93 0d 02 	sts	0x020D, r17
 1fe:	20 93 0e 02 	sts	0x020E, r18
 202:	30 93 0f 02 	sts	0x020F, r19
 206:	14 c0       	rjmp	.+40     	; 0x230 <encoder+0xca>
        DISP ++;
    }
    
    if(curr - prev > 150)
    {
        DISP -= (curr - prev);
 208:	48 1b       	sub	r20, r24
 20a:	59 0b       	sbc	r21, r25
 20c:	6a 0b       	sbc	r22, r26
 20e:	7b 0b       	sbc	r23, r27
 210:	40 0f       	add	r20, r16
 212:	51 1f       	adc	r21, r17
 214:	62 1f       	adc	r22, r18
 216:	73 1f       	adc	r23, r19
        DISP --;
 218:	41 50       	subi	r20, 0x01	; 1
 21a:	51 09       	sbc	r21, r1
 21c:	61 09       	sbc	r22, r1
 21e:	71 09       	sbc	r23, r1
 220:	40 93 0c 02 	sts	0x020C, r20
 224:	50 93 0d 02 	sts	0x020D, r21
 228:	60 93 0e 02 	sts	0x020E, r22
 22c:	70 93 0f 02 	sts	0x020F, r23
    }
    
    prev =  curr;
 230:	80 93 08 02 	sts	0x0208, r24
 234:	90 93 09 02 	sts	0x0209, r25
 238:	a0 93 0a 02 	sts	0x020A, r26
 23c:	b0 93 0b 02 	sts	0x020B, r27
}
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	08 95       	ret

0000024e <pick>:
    return a;
}

void pick()
{
    if (PINA == 1)
 24e:	80 b1       	in	r24, 0x00	; 0
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	19 f0       	breq	.+6      	; 0x25a <pick+0xc>
    {
        PORTC = 0x01;
    }
    else if (PINA == 2)
 254:	80 b1       	in	r24, 0x00	; 0
 256:	82 30       	cpi	r24, 0x02	; 2
 258:	11 f4       	brne	.+4      	; 0x25e <pick+0x10>
    {
        PORTC = 0x02;
 25a:	88 b9       	out	0x08, r24	; 8
 25c:	08 95       	ret
    }
    else if (PINA == 32)
 25e:	80 b1       	in	r24, 0x00	; 0
 260:	80 32       	cpi	r24, 0x20	; 32
 262:	11 f4       	brne	.+4      	; 0x268 <pick+0x1a>
    {
        PORTB |= (1<<PB0);
 264:	28 9a       	sbi	0x05, 0	; 5
 266:	08 95       	ret
    }
    else if (PINA == 64)
 268:	80 b1       	in	r24, 0x00	; 0
 26a:	80 34       	cpi	r24, 0x40	; 64
 26c:	09 f4       	brne	.+2      	; 0x270 <pick+0x22>
    {
        PORTB &= ~(1<<PB0);
 26e:	28 98       	cbi	0x05, 0	; 5
 270:	08 95       	ret

00000272 <lift>:
    
}

void lift()
{
    if (PINA == 4)
 272:	80 b1       	in	r24, 0x00	; 0
 274:	84 30       	cpi	r24, 0x04	; 4
 276:	69 f4       	brne	.+26     	; 0x292 <lift+0x20>
    {
        PORTB = 0x01;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	85 b9       	out	0x05, r24	; 5
        OCR3A = 200;
 27c:	88 ec       	ldi	r24, 0xC8	; 200
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	90 93 99 00 	sts	0x0099, r25
 284:	80 93 98 00 	sts	0x0098, r24
        target = -400;
 288:	80 e7       	ldi	r24, 0x70	; 112
 28a:	9e ef       	ldi	r25, 0xFE	; 254
 28c:	af ef       	ldi	r26, 0xFF	; 255
 28e:	bf ef       	ldi	r27, 0xFF	; 255
 290:	0f c0       	rjmp	.+30     	; 0x2b0 <lift+0x3e>
    }
    else if(PINA == 8)
 292:	80 b1       	in	r24, 0x00	; 0
 294:	88 30       	cpi	r24, 0x08	; 8
 296:	a9 f4       	brne	.+42     	; 0x2c2 <lift+0x50>
    {
        PORTB = 0x02;
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	85 b9       	out	0x05, r24	; 5
        OCR3A = 30;
 29c:	8e e1       	ldi	r24, 0x1E	; 30
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	90 93 99 00 	sts	0x0099, r25
 2a4:	80 93 98 00 	sts	0x0098, r24
        target = 400;
 2a8:	80 e9       	ldi	r24, 0x90	; 144
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	a0 e0       	ldi	r26, 0x00	; 0
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	80 93 00 02 	sts	0x0200, r24
 2b4:	90 93 01 02 	sts	0x0201, r25
 2b8:	a0 93 02 02 	sts	0x0202, r26
 2bc:	b0 93 03 02 	sts	0x0203, r27
 2c0:	08 95       	ret
    }
    else if(PINA == 16)
 2c2:	80 b1       	in	r24, 0x00	; 0
 2c4:	80 31       	cpi	r24, 0x10	; 16
 2c6:	09 f4       	brne	.+2      	; 0x2ca <lift+0x58>
    {
        PORTB = 0x00;
 2c8:	15 b8       	out	0x05, r1	; 5
 2ca:	08 95       	ret

000002cc <main>:
int main(void)
{
    // setting adc as input
    
    // button module
    DDRA = 0x00;
 2cc:	11 b8       	out	0x01, r1	; 1
    DDRK = 0x00;
 2ce:	10 92 07 01 	sts	0x0107, r1
    // display
    //DDRJ = 0xFF;
    // setting motor pwm and direction as output and pwm pin as high
    DDRE = 0xFF;
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	8d b9       	out	0x0d, r24	; 13
    PORTE = 0xFF;
 2d6:	8e b9       	out	0x0e, r24	; 14
    DDRB = 0xFF;
 2d8:	84 b9       	out	0x04, r24	; 4
    // setting piston actuation as output
    DDRC = 0xFF;
 2da:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xFF;
 2dc:	8a b9       	out	0x0a, r24	; 10
    
    // calling functions which are initializer
    motor_pwm_init();
 2de:	0e 94 88 00 	call	0x110	; 0x110 <motor_pwm_init>
    init_ADC();
 2e2:	0e 94 93 00 	call	0x126	; 0x126 <init_ADC>
    prev = ADC_read(8);
 2e6:	88 e0       	ldi	r24, 0x08	; 8
 2e8:	0e 94 9e 00 	call	0x13c	; 0x13c <ADC_read>
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	a0 e0       	ldi	r26, 0x00	; 0
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	80 93 08 02 	sts	0x0208, r24
 2f6:	90 93 09 02 	sts	0x0209, r25
 2fa:	a0 93 0a 02 	sts	0x020A, r26
 2fe:	b0 93 0b 02 	sts	0x020B, r27
    //PORTB = 0x01;
    
    while (1)
    {
        encoder();
 302:	0e 94 b3 00 	call	0x166	; 0x166 <encoder>
        pick();
 306:	0e 94 27 01 	call	0x24e	; 0x24e <pick>
        lift();
 30a:	0e 94 39 01 	call	0x272	; 0x272 <lift>
        error = target - DISP;
 30e:	80 91 00 02 	lds	r24, 0x0200
 312:	90 91 01 02 	lds	r25, 0x0201
 316:	a0 91 02 02 	lds	r26, 0x0202
 31a:	b0 91 03 02 	lds	r27, 0x0203
 31e:	40 91 0c 02 	lds	r20, 0x020C
 322:	50 91 0d 02 	lds	r21, 0x020D
 326:	60 91 0e 02 	lds	r22, 0x020E
 32a:	70 91 0f 02 	lds	r23, 0x020F
 32e:	84 1b       	sub	r24, r20
 330:	95 0b       	sbc	r25, r21
 332:	a6 0b       	sbc	r26, r22
 334:	b7 0b       	sbc	r27, r23
 336:	80 93 10 02 	sts	0x0210, r24
 33a:	90 93 11 02 	sts	0x0211, r25
 33e:	a0 93 12 02 	sts	0x0212, r26
 342:	b0 93 13 02 	sts	0x0213, r27
        //PORTJ = error;
        if (error == 0)
 346:	89 2b       	or	r24, r25
 348:	8a 2b       	or	r24, r26
 34a:	8b 2b       	or	r24, r27
 34c:	d1 f6       	brne	.-76     	; 0x302 <main+0x36>
        {
            PORTB = 0;
 34e:	15 b8       	out	0x05, r1	; 5
            target = 0;
 350:	10 92 00 02 	sts	0x0200, r1
 354:	10 92 01 02 	sts	0x0201, r1
 358:	10 92 02 02 	sts	0x0202, r1
 35c:	10 92 03 02 	sts	0x0203, r1
            DISP = 0;
 360:	10 92 0c 02 	sts	0x020C, r1
 364:	10 92 0d 02 	sts	0x020D, r1
 368:	10 92 0e 02 	sts	0x020E, r1
 36c:	10 92 0f 02 	sts	0x020F, r1
 370:	c8 cf       	rjmp	.-112    	; 0x302 <main+0x36>

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
