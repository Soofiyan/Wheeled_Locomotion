
x_wheel_drive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000650  000006e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800202  00800202  000006e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000197b  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dae  00000000  00000000  000021d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b2b  00000000  00000000  00002f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00003aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000803  00000000  00000000  00003d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dc3  00000000  00000000  00004527  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000052ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	83 c1       	rjmp	.+774    	; 0x30c <__vector_1>
   6:	00 00       	nop
   8:	3d c1       	rjmp	.+634    	; 0x284 <__vector_2>
   a:	00 00       	nop
   c:	07 c2       	rjmp	.+1038   	; 0x41c <__vector_3>
   e:	00 00       	nop
  10:	c1 c1       	rjmp	.+898    	; 0x394 <__vector_4>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d6 c2       	rjmp	.+1452   	; 0x62e <__vector_32>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e5       	ldi	r30, 0x50	; 80
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 33       	cpi	r26, 0x36	; 54
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	75 d2       	rcall	.+1258   	; 0x60a <main>
 120:	95 c2       	rjmp	.+1322   	; 0x64c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <delay_interrupt>:
	else if (in_var<l_limit)
	{
		in_var=l_limit;
	}
	return in_var;
}
 124:	e0 e9       	ldi	r30, 0x90	; 144
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 6a       	ori	r24, 0xA8	; 168
 12c:	80 83       	st	Z, r24
 12e:	e1 e9       	ldi	r30, 0x91	; 145
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	8d 60       	ori	r24, 0x0D	; 13
 136:	80 83       	st	Z, r24
 138:	80 e8       	ldi	r24, 0x80	; 128
 13a:	90 e7       	ldi	r25, 0x70	; 112
 13c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 140:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 144:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 148:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 14c:	e1 e7       	ldi	r30, 0x71	; 113
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	86 60       	ori	r24, 0x06	; 6
 154:	80 83       	st	Z, r24
 156:	08 95       	ret

00000158 <top_leftwheel>:
 158:	9b 01       	movw	r18, r22
 15a:	05 2e       	mov	r0, r21
 15c:	00 0c       	add	r0, r0
 15e:	66 0b       	sbc	r22, r22
 160:	77 0b       	sbc	r23, r23
 162:	09 2e       	mov	r0, r25
 164:	00 0c       	add	r0, r0
 166:	aa 0b       	sbc	r26, r26
 168:	bb 0b       	sbc	r27, r27
 16a:	48 17       	cp	r20, r24
 16c:	59 07       	cpc	r21, r25
 16e:	6a 07       	cpc	r22, r26
 170:	7b 07       	cpc	r23, r27
 172:	5c f0       	brlt	.+22     	; 0x18a <top_leftwheel+0x32>
 174:	a9 01       	movw	r20, r18
 176:	33 0f       	add	r19, r19
 178:	66 0b       	sbc	r22, r22
 17a:	77 0b       	sbc	r23, r23
 17c:	48 17       	cp	r20, r24
 17e:	59 07       	cpc	r21, r25
 180:	6a 07       	cpc	r22, r26
 182:	7b 07       	cpc	r23, r27
 184:	14 f4       	brge	.+4      	; 0x18a <top_leftwheel+0x32>
 186:	ac 01       	movw	r20, r24
 188:	bd 01       	movw	r22, r26
 18a:	46 30       	cpi	r20, 0x06	; 6
 18c:	51 05       	cpc	r21, r1
 18e:	4c f0       	brlt	.+18     	; 0x1a2 <top_leftwheel+0x4a>
 190:	e8 e0       	ldi	r30, 0x08	; 8
 192:	f1 e0       	ldi	r31, 0x01	; 1
 194:	80 81       	ld	r24, Z
 196:	81 60       	ori	r24, 0x01	; 1
 198:	80 83       	st	Z, r24
 19a:	80 81       	ld	r24, Z
 19c:	8d 7f       	andi	r24, 0xFD	; 253
 19e:	80 83       	st	Z, r24
 1a0:	0f c0       	rjmp	.+30     	; 0x1c0 <top_leftwheel+0x68>
 1a2:	4b 3f       	cpi	r20, 0xFB	; 251
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	58 07       	cpc	r21, r24
 1a8:	5c f4       	brge	.+22     	; 0x1c0 <top_leftwheel+0x68>
 1aa:	e8 e0       	ldi	r30, 0x08	; 8
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	80 81       	ld	r24, Z
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	80 83       	st	Z, r24
 1b4:	80 81       	ld	r24, Z
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	80 83       	st	Z, r24
 1ba:	51 95       	neg	r21
 1bc:	41 95       	neg	r20
 1be:	51 09       	sbc	r21, r1
 1c0:	50 93 a9 00 	sts	0x00A9, r21	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
 1c4:	40 93 a8 00 	sts	0x00A8, r20	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
 1c8:	08 95       	ret

000001ca <drivecross_4wheel>:
 1ca:	9c 01       	movw	r18, r24
 1cc:	86 0f       	add	r24, r22
 1ce:	97 1f       	adc	r25, r23
 1d0:	84 0f       	add	r24, r20
 1d2:	95 1f       	adc	r25, r21
 1d4:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <tl+0x1>
 1d8:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <tl>
 1dc:	fb 01       	movw	r30, r22
 1de:	e2 1b       	sub	r30, r18
 1e0:	f3 0b       	sbc	r31, r19
 1e2:	e4 0f       	add	r30, r20
 1e4:	f5 1f       	adc	r31, r21
 1e6:	f0 93 2b 02 	sts	0x022B, r31	; 0x80022b <tr+0x1>
 1ea:	e0 93 2a 02 	sts	0x022A, r30	; 0x80022a <tr>
 1ee:	f9 01       	movw	r30, r18
 1f0:	e6 1b       	sub	r30, r22
 1f2:	f7 0b       	sbc	r31, r23
 1f4:	e4 0f       	add	r30, r20
 1f6:	f5 1f       	adc	r31, r21
 1f8:	f0 93 29 02 	sts	0x0229, r31	; 0x800229 <bl+0x1>
 1fc:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <bl>
 200:	46 1b       	sub	r20, r22
 202:	57 0b       	sbc	r21, r23
 204:	42 1b       	sub	r20, r18
 206:	53 0b       	sbc	r21, r19
 208:	50 93 25 02 	sts	0x0225, r21	; 0x800225 <br+0x1>
 20c:	40 93 24 02 	sts	0x0224, r20	; 0x800224 <br>
 210:	4f ef       	ldi	r20, 0xFF	; 255
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	7f ef       	ldi	r23, 0xFF	; 255
 218:	9f df       	rcall	.-194    	; 0x158 <top_leftwheel>
 21a:	4f ef       	ldi	r20, 0xFF	; 255
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	7f ef       	ldi	r23, 0xFF	; 255
 222:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <tr>
 226:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <tr+0x1>
 22a:	96 df       	rcall	.-212    	; 0x158 <top_leftwheel>
 22c:	4f ef       	ldi	r20, 0xFF	; 255
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	7f ef       	ldi	r23, 0xFF	; 255
 234:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <bl>
 238:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <bl+0x1>
 23c:	8d df       	rcall	.-230    	; 0x158 <top_leftwheel>
 23e:	4f ef       	ldi	r20, 0xFF	; 255
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	7f ef       	ldi	r23, 0xFF	; 255
 246:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <br>
 24a:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <br+0x1>
 24e:	84 cf       	rjmp	.-248    	; 0x158 <top_leftwheel>
 250:	08 95       	ret

00000252 <exti_init>:
void exti_init()
{
	EIMSK |=(1<<INT0)|(1<<INT1)|(1<<INT2)|(1<<INT3)|(1<<INT4);
 252:	8d b3       	in	r24, 0x1d	; 29
 254:	8f 61       	ori	r24, 0x1F	; 31
 256:	8d bb       	out	0x1d, r24	; 29
	EICRA |=(1<<ISC00)|(1<<ISC10)|(1<<ISC20)|(1<<ISC30);
 258:	e9 e6       	ldi	r30, 0x69	; 105
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	85 65       	ori	r24, 0x55	; 85
 260:	80 83       	st	Z, r24
	EICRB |=(1<<ISC41);
 262:	ea e6       	ldi	r30, 0x6A	; 106
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	80 83       	st	Z, r24
 26c:	08 95       	ret

0000026e <timer_init_motor>:
}

void timer_init_motor()
{
	TCCR4A |= (1<<COM4A1)|(1<<COM4B1)|(1<<COM4C1)|(1<<WGM40);
 26e:	e0 ea       	ldi	r30, 0xA0	; 160
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	89 6a       	ori	r24, 0xA9	; 169
 276:	80 83       	st	Z, r24
	TCCR4B |= (1<<WGM42)|(1<<CS41)|(1<<CS40);
 278:	e1 ea       	ldi	r30, 0xA1	; 161
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	8b 60       	ori	r24, 0x0B	; 11
 280:	80 83       	st	Z, r24
 282:	08 95       	ret

00000284 <__vector_2>:
}
ISR(INT1_vect)
{
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
	if((PIND & 0x02) == 0x02)
 292:	49 9b       	sbis	0x09, 1	; 9
 294:	1b c0       	rjmp	.+54     	; 0x2cc <__vector_2+0x48>
	{
		currstatea1 = 1;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <currstatea1>
		if(currstateb1 == 0)
 29c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <currstateb1>
 2a0:	81 11       	cpse	r24, r1
 2a2:	0a c0       	rjmp	.+20     	; 0x2b8 <__vector_2+0x34>
		{
			countercw1 --;
 2a4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <countercw1>
 2a8:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <countercw1+0x1>
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <countercw1+0x1>
 2b2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <countercw1>
 2b6:	23 c0       	rjmp	.+70     	; 0x2fe <__vector_2+0x7a>
		}
		else
		{
			countercw1 ++;
 2b8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <countercw1>
 2bc:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <countercw1+0x1>
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <countercw1+0x1>
 2c6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <countercw1>
 2ca:	19 c0       	rjmp	.+50     	; 0x2fe <__vector_2+0x7a>
		}
	}
	else
	{
		currstatea1 = 0;
 2cc:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <currstatea1>
		if(currstateb1 == 0)
 2d0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <currstateb1>
 2d4:	81 11       	cpse	r24, r1
 2d6:	0a c0       	rjmp	.+20     	; 0x2ec <__vector_2+0x68>
		{
			countercw1 ++;
 2d8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <countercw1>
 2dc:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <countercw1+0x1>
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <countercw1+0x1>
 2e6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <countercw1>
 2ea:	09 c0       	rjmp	.+18     	; 0x2fe <__vector_2+0x7a>
		}
		else
		{
			countercw1 --;
 2ec:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <countercw1>
 2f0:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <countercw1+0x1>
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <countercw1+0x1>
 2fa:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <countercw1>
		}
	}
}
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <__vector_1>:
ISR(INT0_vect)
{
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
	if((PIND & 0x01) == 0x01)
 31a:	48 9b       	sbis	0x09, 0	; 9
 31c:	1b c0       	rjmp	.+54     	; 0x354 <__vector_1+0x48>
	{
		currstateb1 = 1;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <currstateb1>
		if(currstatea1 == 0)
 324:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <currstatea1>
 328:	81 11       	cpse	r24, r1
 32a:	0a c0       	rjmp	.+20     	; 0x340 <__vector_1+0x34>
		{
			countercw1 ++;
 32c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <countercw1>
 330:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <countercw1+0x1>
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <countercw1+0x1>
 33a:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <countercw1>
 33e:	23 c0       	rjmp	.+70     	; 0x386 <__vector_1+0x7a>
		}
		else
		{
			countercw1 --;
 340:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <countercw1>
 344:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <countercw1+0x1>
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <countercw1+0x1>
 34e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <countercw1>
 352:	19 c0       	rjmp	.+50     	; 0x386 <__vector_1+0x7a>
		}
	}
	else
	{
		currstateb1 = 0;
 354:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <currstateb1>
		if(currstatea1 == 0)
 358:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <currstatea1>
 35c:	81 11       	cpse	r24, r1
 35e:	0a c0       	rjmp	.+20     	; 0x374 <__vector_1+0x68>
		{
			countercw1 --;
 360:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <countercw1>
 364:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <countercw1+0x1>
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <countercw1+0x1>
 36e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <countercw1>
 372:	09 c0       	rjmp	.+18     	; 0x386 <__vector_1+0x7a>
		}
		else
		{
			countercw1 ++;
 374:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <countercw1>
 378:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <countercw1+0x1>
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <countercw1+0x1>
 382:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <countercw1>
		}
	}
}
 386:	9f 91       	pop	r25
 388:	8f 91       	pop	r24
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <__vector_4>:
ISR(INT3_vect)
{
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	8f 93       	push	r24
 3a0:	9f 93       	push	r25
	if((PIND & 0x08) == 0x08)
 3a2:	4b 9b       	sbis	0x09, 3	; 9
 3a4:	1b c0       	rjmp	.+54     	; 0x3dc <__vector_4+0x48>
	{
		currstatea2 = 1;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <currstatea2>
		if(currstateb2 == 0)
 3ac:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <currstateb2>
 3b0:	81 11       	cpse	r24, r1
 3b2:	0a c0       	rjmp	.+20     	; 0x3c8 <__vector_4+0x34>
		{
			countercw2 --;
 3b4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 3b8:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 3c2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 3c6:	23 c0       	rjmp	.+70     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		}
		else
		{
			countercw2 ++;
 3c8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 3cc:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 3d6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 3da:	19 c0       	rjmp	.+50     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		}
	}
	else
	{
		currstatea2 = 0;
 3dc:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <currstatea2>
		if(currstateb2 == 0)
 3e0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <currstateb2>
 3e4:	81 11       	cpse	r24, r1
 3e6:	0a c0       	rjmp	.+20     	; 0x3fc <__vector_4+0x68>
		{
			countercw2 ++;
 3e8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 3ec:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 3f6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 3fa:	09 c0       	rjmp	.+18     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		}
		else
		{
			countercw2 --;
 3fc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 400:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 40a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
		}
	}
}
 40e:	9f 91       	pop	r25
 410:	8f 91       	pop	r24
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <__vector_3>:
ISR(INT2_vect)
{
 41c:	1f 92       	push	r1
 41e:	0f 92       	push	r0
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	0f 92       	push	r0
 424:	11 24       	eor	r1, r1
 426:	8f 93       	push	r24
 428:	9f 93       	push	r25
	if((PIND & 0x04) == 0x04)
 42a:	4a 9b       	sbis	0x09, 2	; 9
 42c:	1b c0       	rjmp	.+54     	; 0x464 <__vector_3+0x48>
	{
		currstateb2 = 1;
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <currstateb2>
		if(currstatea2 == 0)
 434:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <currstatea2>
 438:	81 11       	cpse	r24, r1
 43a:	0a c0       	rjmp	.+20     	; 0x450 <__vector_3+0x34>
		{
			countercw2 ++;
 43c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 440:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 44a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 44e:	23 c0       	rjmp	.+70     	; 0x496 <__vector_3+0x7a>
		}
		else
		{
			countercw2 --;
 450:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 454:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 45e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 462:	19 c0       	rjmp	.+50     	; 0x496 <__vector_3+0x7a>
		}
	}
	else
	{
		currstateb2 = 0;
 464:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <currstateb2>
		if(currstatea2 == 0)
 468:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <currstatea2>
 46c:	81 11       	cpse	r24, r1
 46e:	0a c0       	rjmp	.+20     	; 0x484 <__vector_3+0x68>
		{
			countercw2 --;
 470:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 474:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 47e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 482:	09 c0       	rjmp	.+18     	; 0x496 <__vector_3+0x7a>
		}
		else
		{
			countercw2 ++;
 484:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 488:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 48c:	01 96       	adiw	r24, 0x01	; 1
 48e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 492:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
		}
	}
}
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <error_mag>:
	I += error_yaw*ki;
	error_add = P+I;
}
void error_mag()
{
	if(firstc == 0)
 4a4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <firstc>
 4a8:	81 11       	cpse	r24, r1
 4aa:	08 c0       	rjmp	.+16     	; 0x4bc <error_mag+0x18>
	{
		base_ang = angles;
 4ac:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <angles>
 4b0:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <angles+0x1>
 4b4:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <base_ang+0x1>
 4b8:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <base_ang>
	}
	error_yaw = (ang_target - angles);
 4bc:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <ang_target>
 4c0:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <ang_target+0x1>
 4c4:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <angles>
 4c8:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <angles+0x1>
 4cc:	82 1b       	sub	r24, r18
 4ce:	93 0b       	sbc	r25, r19
	if((error_yaw >= 180) && (error_yaw <= 360))
 4d0:	9c 01       	movw	r18, r24
 4d2:	24 5b       	subi	r18, 0xB4	; 180
 4d4:	31 09       	sbc	r19, r1
 4d6:	25 3b       	cpi	r18, 0xB5	; 181
 4d8:	31 05       	cpc	r19, r1
 4da:	38 f4       	brcc	.+14     	; 0x4ea <error_mag+0x46>
	{
		error_yaw = error_yaw - 360;
 4dc:	88 56       	subi	r24, 0x68	; 104
 4de:	91 40       	sbci	r25, 0x01	; 1
 4e0:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <error_yaw+0x1>
 4e4:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <error_yaw>
 4e8:	08 95       	ret
	}
	else if((error_yaw <= -180) && (error_yaw >= -360))
 4ea:	9c 01       	movw	r18, r24
 4ec:	28 59       	subi	r18, 0x98	; 152
 4ee:	3e 4f       	sbci	r19, 0xFE	; 254
 4f0:	25 3b       	cpi	r18, 0xB5	; 181
 4f2:	31 05       	cpc	r19, r1
 4f4:	28 f0       	brcs	.+10     	; 0x500 <error_mag+0x5c>
{
	if(firstc == 0)
	{
		base_ang = angles;
	}
	error_yaw = (ang_target - angles);
 4f6:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <error_yaw+0x1>
 4fa:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <error_yaw>
 4fe:	08 95       	ret
	{
		error_yaw = error_yaw - 360;
	}
	else if((error_yaw <= -180) && (error_yaw >= -360))
	{
		error_yaw = error_yaw + 360;
 500:	88 59       	subi	r24, 0x98	; 152
 502:	9e 4f       	sbci	r25, 0xFE	; 254
 504:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <error_yaw+0x1>
 508:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <error_yaw>
 50c:	08 95       	ret

0000050e <spi_init>:
		error_yaw = error_yaw;
	}
}
void spi_init()
{
	SPI_DDR &= (~(1<<MOSI)) & (~(1<<SS)) & (~(1<<SCK));  //set it as slave
 50e:	84 b1       	in	r24, 0x04	; 4
 510:	88 7f       	andi	r24, 0xF8	; 248
 512:	84 b9       	out	0x04, r24	; 4
	SPI_DDR |= (1<<MISO);
 514:	23 9a       	sbi	0x04, 3	; 4
	SPCR |= (1<<SPE);
 516:	8c b5       	in	r24, 0x2c	; 44
 518:	80 64       	ori	r24, 0x40	; 64
 51a:	8c bd       	out	0x2c, r24	; 44
 51c:	08 95       	ret

0000051e <spi_master_receive>:
}
int spi_master_receive()
{
	while(!(SPSR & (1<<SPIF)));
 51e:	0d b4       	in	r0, 0x2d	; 45
 520:	07 fe       	sbrs	r0, 7
 522:	fd cf       	rjmp	.-6      	; 0x51e <spi_master_receive>
	c = SPDR;
 524:	8e b5       	in	r24, 0x2e	; 46
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <c+0x1>
 52c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <c>
	return c;
}
 530:	08 95       	ret

00000532 <spi_work>:
{
	for(int i=0;i<=1;i++)
	{
		if(i == 0)
		{
			b = spi_master_receive();
 532:	f5 df       	rcall	.-22     	; 0x51e <spi_master_receive>
 534:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <b>
		}
		else
		{
			a =  spi_master_receive();
 538:	f2 df       	rcall	.-28     	; 0x51e <spi_master_receive>
 53a:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <a>
 53e:	81 11       	cpse	r24, r1
		}
	}
	if(a == 0 && b != 0)
 540:	0c c0       	rjmp	.+24     	; 0x55a <spi_work+0x28>
 542:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <b>
 546:	88 23       	and	r24, r24
 548:	91 f0       	breq	.+36     	; 0x56e <spi_work+0x3c>
 54a:	90 e0       	ldi	r25, 0x00	; 0
	{
		angles = b + 255;
 54c:	81 50       	subi	r24, 0x01	; 1
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <angles+0x1>
 554:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <angles>
 558:	0f c0       	rjmp	.+30     	; 0x578 <spi_work+0x46>
 55a:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <b>
	}
	else if(a != 0 && b == 0)
 55e:	91 11       	cpse	r25, r1
 560:	0b c0       	rjmp	.+22     	; 0x578 <spi_work+0x46>
 562:	90 e0       	ldi	r25, 0x00	; 0
	{
		angles = a;
 564:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <angles+0x1>
 568:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <angles>
 56c:	05 c0       	rjmp	.+10     	; 0x578 <spi_work+0x46>
 56e:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <angles+0x1>
	}
	else if(a ==0 && b == 0)
	{
		angles = 0;
 572:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <angles>
 576:	0f c0       	rjmp	.+30     	; 0x596 <spi_work+0x64>
 578:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <angles>
    }
	if(angles > 360)
 57c:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <angles+0x1>
 580:	89 36       	cpi	r24, 0x69	; 105
 582:	91 40       	sbci	r25, 0x01	; 1
 584:	40 f0       	brcs	.+16     	; 0x596 <spi_work+0x64>
 586:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <prev>
	{
		angles = prev;
 58a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <prev+0x1>
 58e:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <angles+0x1>
 592:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <angles>
 596:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <angles>
	}
	prev = angles;
 59a:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <angles+0x1>
 59e:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <prev+0x1>
 5a2:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <prev>
 5a6:	08 95       	ret

000005a8 <encoder_pid>:
 5a8:	c4 df       	rcall	.-120    	; 0x532 <spi_work>
	}
}
void encoder_pid()
{
	spi_work();
	error_mag();
 5aa:	7c df       	rcall	.-264    	; 0x4a4 <error_mag>
 5ac:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <error_yaw>
	P = error_yaw*kp;
 5b0:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <error_yaw+0x1>
 5b4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 5b8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 5bc:	28 9f       	mul	r18, r24
 5be:	a0 01       	movw	r20, r0
 5c0:	29 9f       	mul	r18, r25
 5c2:	50 0d       	add	r21, r0
 5c4:	38 9f       	mul	r19, r24
 5c6:	50 0d       	add	r21, r0
 5c8:	11 24       	eor	r1, r1
 5ca:	50 93 11 02 	sts	0x0211, r21	; 0x800211 <P+0x1>
 5ce:	40 93 10 02 	sts	0x0210, r20	; 0x800210 <P>
 5d2:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <ki>
	I += error_yaw*ki;
 5d6:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <ki+0x1>
 5da:	26 9f       	mul	r18, r22
 5dc:	c0 01       	movw	r24, r0
 5de:	27 9f       	mul	r18, r23
 5e0:	90 0d       	add	r25, r0
 5e2:	36 9f       	mul	r19, r22
 5e4:	90 0d       	add	r25, r0
 5e6:	11 24       	eor	r1, r1
 5e8:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <I>
 5ec:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <I+0x1>
 5f0:	82 0f       	add	r24, r18
 5f2:	93 1f       	adc	r25, r19
 5f4:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <I+0x1>
 5f8:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <I>
 5fc:	84 0f       	add	r24, r20
	error_add = P+I;
 5fe:	95 1f       	adc	r25, r21
 600:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <error_add+0x1>
 604:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <error_add>
 608:	08 95       	ret

0000060a <main>:
 60a:	81 df       	rcall	.-254    	; 0x50e <spi_init>
int main(void)
{
    while (1) 
    {
		spi_init();
		delay_interrupt();
 60c:	8b dd       	rcall	.-1258   	; 0x124 <delay_interrupt>
		exti_init();
 60e:	21 de       	rcall	.-958    	; 0x252 <exti_init>
 610:	2e de       	rcall	.-932    	; 0x26e <timer_init_motor>
		timer_init_motor();
 612:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <ang_flag>
		if(ang_flag == 1)
 616:	81 11       	cpse	r24, r1
 618:	c7 df       	rcall	.-114    	; 0x5a8 <encoder_pid>
		{
			encoder_pid();
 61a:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <error_yaw>
		}
		drivecross_4wheel(100,0,error_yaw);
 61e:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <error_yaw+0x1>
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	84 e6       	ldi	r24, 0x64	; 100
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	cf dd       	rcall	.-1122   	; 0x1ca <drivecross_4wheel>
 62c:	ee cf       	rjmp	.-36     	; 0x60a <main>

0000062e <__vector_32>:
 62e:	1f 92       	push	r1
    }
 630:	0f 92       	push	r0
		angles = prev;
	}
	prev = angles;
}
ISR (TIMER3_COMPA_vect)
{
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	0f 92       	push	r0
 636:	11 24       	eor	r1, r1
 638:	8f 93       	push	r24
	ang_flag = 1;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <ang_flag>
}
 640:	8f 91       	pop	r24
 642:	0f 90       	pop	r0
 644:	0f be       	out	0x3f, r0	; 63
 646:	0f 90       	pop	r0
 648:	1f 90       	pop	r1
 64a:	18 95       	reti

0000064c <_exit>:
 64c:	f8 94       	cli

0000064e <__stop_program>:
 64e:	ff cf       	rjmp	.-2      	; 0x64e <__stop_program>
