
mr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800200  00001ae6  00001b7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ae6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  0080021e  0080021e  00001b98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bec  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000def  00000000  00000000  000038cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d6d  00000000  00000000  000046bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  00005428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b0  00000000  00000000  00005828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001481  00000000  00000000  00005fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00007459  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	90 c0       	rjmp	.+288    	; 0x126 <__bad_interrupt>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	d1 c7       	rjmp	.+4002   	; 0x1008 <__vector_25>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2d c1       	rjmp	.+602    	; 0x334 <__vector_54>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ee       	ldi	r30, 0xE6	; 230
      fc:	fa e1       	ldi	r31, 0x1A	; 26
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 31       	cpi	r26, 0x1E	; 30
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	ae e1       	ldi	r26, 0x1E	; 30
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a8 37       	cpi	r26, 0x78	; 120
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <main>
     122:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <servorun>:
	else if (in_var<l_limit)
	{	
		in_var=l_limit;
	}
    return in_var;
}
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <servomode>
     138:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <servomode+0x1>
     13c:	00 97       	sbiw	r24, 0x00	; 0
     13e:	89 f5       	brne	.+98     	; 0x1a2 <servorun+0x7a>
     140:	c4 e0       	ldi	r28, 0x04	; 4
     142:	d0 e0       	ldi	r29, 0x00	; 0
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	70 e0       	ldi	r23, 0x00	; 0
     148:	84 eb       	ldi	r24, 0xB4	; 180
     14a:	92 e4       	ldi	r25, 0x42	; 66
     14c:	0a e5       	ldi	r16, 0x5A	; 90
     14e:	10 e0       	ldi	r17, 0x00	; 0
     150:	0f 2e       	mov	r0, r31
     152:	f8 e8       	ldi	r31, 0x88	; 136
     154:	ef 2e       	mov	r14, r31
     156:	f1 2c       	mov	r15, r1
     158:	f0 2d       	mov	r31, r0
     15a:	f7 01       	movw	r30, r14
     15c:	11 83       	std	Z+1, r17	; 0x01
     15e:	00 83       	st	Z, r16
     160:	f6 e6       	ldi	r31, 0x66	; 102
     162:	26 ee       	ldi	r18, 0xE6	; 230
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	f1 50       	subi	r31, 0x01	; 1
     168:	20 40       	sbci	r18, 0x00	; 0
     16a:	30 40       	sbci	r19, 0x00	; 0
     16c:	e1 f7       	brne	.-8      	; 0x166 <servorun+0x3e>
     16e:	27 ed       	ldi	r18, 0xD7	; 215
     170:	33 ea       	ldi	r19, 0xA3	; 163
     172:	42 eb       	ldi	r20, 0xB2	; 178
     174:	51 e4       	ldi	r21, 0x41	; 65
     176:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__addsf3>
     17a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fixsfsi>
     17e:	8b 01       	movw	r16, r22
     180:	07 2e       	mov	r0, r23
     182:	00 0c       	add	r0, r0
     184:	88 0b       	sbc	r24, r24
     186:	99 0b       	sbc	r25, r25
     188:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatsisf>
     18c:	21 97       	sbiw	r28, 0x01	; 1
     18e:	29 f7       	brne	.-54     	; 0x15a <servorun+0x32>
     190:	15 b8       	out	0x05, r1	; 5
     192:	46 e6       	ldi	r20, 0x66	; 102
     194:	86 ee       	ldi	r24, 0xE6	; 230
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	41 50       	subi	r20, 0x01	; 1
     19a:	80 40       	sbci	r24, 0x00	; 0
     19c:	90 40       	sbci	r25, 0x00	; 0
     19e:	e1 f7       	brne	.-8      	; 0x198 <servorun+0x70>
     1a0:	96 c0       	rjmp	.+300    	; 0x2ce <servorun+0x1a6>
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	91 05       	cpc	r25, r1
     1a6:	89 f5       	brne	.+98     	; 0x20a <servorun+0xe2>
     1a8:	cc e0       	ldi	r28, 0x0C	; 12
     1aa:	d0 e0       	ldi	r29, 0x00	; 0
     1ac:	60 e0       	ldi	r22, 0x00	; 0
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	8c e1       	ldi	r24, 0x1C	; 28
     1b2:	93 e4       	ldi	r25, 0x43	; 67
     1b4:	0c e9       	ldi	r16, 0x9C	; 156
     1b6:	10 e0       	ldi	r17, 0x00	; 0
     1b8:	0f 2e       	mov	r0, r31
     1ba:	f8 e8       	ldi	r31, 0x88	; 136
     1bc:	ef 2e       	mov	r14, r31
     1be:	f1 2c       	mov	r15, r1
     1c0:	f0 2d       	mov	r31, r0
     1c2:	f7 01       	movw	r30, r14
     1c4:	11 83       	std	Z+1, r17	; 0x01
     1c6:	00 83       	st	Z, r16
     1c8:	f6 e6       	ldi	r31, 0x66	; 102
     1ca:	26 ee       	ldi	r18, 0xE6	; 230
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	f1 50       	subi	r31, 0x01	; 1
     1d0:	20 40       	sbci	r18, 0x00	; 0
     1d2:	30 40       	sbci	r19, 0x00	; 0
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <servorun+0xa6>
     1d6:	27 ed       	ldi	r18, 0xD7	; 215
     1d8:	33 ea       	ldi	r19, 0xA3	; 163
     1da:	42 eb       	ldi	r20, 0xB2	; 178
     1dc:	51 e4       	ldi	r21, 0x41	; 65
     1de:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__addsf3>
     1e2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fixsfsi>
     1e6:	8b 01       	movw	r16, r22
     1e8:	07 2e       	mov	r0, r23
     1ea:	00 0c       	add	r0, r0
     1ec:	88 0b       	sbc	r24, r24
     1ee:	99 0b       	sbc	r25, r25
     1f0:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatsisf>
     1f4:	21 97       	sbiw	r28, 0x01	; 1
     1f6:	29 f7       	brne	.-54     	; 0x1c2 <servorun+0x9a>
     1f8:	15 b8       	out	0x05, r1	; 5
     1fa:	46 e6       	ldi	r20, 0x66	; 102
     1fc:	86 ee       	ldi	r24, 0xE6	; 230
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	41 50       	subi	r20, 0x01	; 1
     202:	80 40       	sbci	r24, 0x00	; 0
     204:	90 40       	sbci	r25, 0x00	; 0
     206:	e1 f7       	brne	.-8      	; 0x200 <servorun+0xd8>
     208:	62 c0       	rjmp	.+196    	; 0x2ce <servorun+0x1a6>
     20a:	82 30       	cpi	r24, 0x02	; 2
     20c:	91 05       	cpc	r25, r1
     20e:	89 f5       	brne	.+98     	; 0x272 <servorun+0x14a>
     210:	c9 e0       	ldi	r28, 0x09	; 9
     212:	d0 e0       	ldi	r29, 0x00	; 0
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	8d ec       	ldi	r24, 0xCD	; 205
     21a:	93 e4       	ldi	r25, 0x43	; 67
     21c:	0a e9       	ldi	r16, 0x9A	; 154
     21e:	11 e0       	ldi	r17, 0x01	; 1
     220:	0f 2e       	mov	r0, r31
     222:	f8 e8       	ldi	r31, 0x88	; 136
     224:	ef 2e       	mov	r14, r31
     226:	f1 2c       	mov	r15, r1
     228:	f0 2d       	mov	r31, r0
     22a:	f7 01       	movw	r30, r14
     22c:	11 83       	std	Z+1, r17	; 0x01
     22e:	00 83       	st	Z, r16
     230:	f6 e6       	ldi	r31, 0x66	; 102
     232:	26 ee       	ldi	r18, 0xE6	; 230
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	f1 50       	subi	r31, 0x01	; 1
     238:	20 40       	sbci	r18, 0x00	; 0
     23a:	30 40       	sbci	r19, 0x00	; 0
     23c:	e1 f7       	brne	.-8      	; 0x236 <servorun+0x10e>
     23e:	27 ed       	ldi	r18, 0xD7	; 215
     240:	33 ea       	ldi	r19, 0xA3	; 163
     242:	42 eb       	ldi	r20, 0xB2	; 178
     244:	51 e4       	ldi	r21, 0x41	; 65
     246:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__subsf3>
     24a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fixsfsi>
     24e:	8b 01       	movw	r16, r22
     250:	07 2e       	mov	r0, r23
     252:	00 0c       	add	r0, r0
     254:	88 0b       	sbc	r24, r24
     256:	99 0b       	sbc	r25, r25
     258:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatsisf>
     25c:	21 97       	sbiw	r28, 0x01	; 1
     25e:	29 f7       	brne	.-54     	; 0x22a <servorun+0x102>
     260:	15 b8       	out	0x05, r1	; 5
     262:	46 e6       	ldi	r20, 0x66	; 102
     264:	86 ee       	ldi	r24, 0xE6	; 230
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	41 50       	subi	r20, 0x01	; 1
     26a:	80 40       	sbci	r24, 0x00	; 0
     26c:	90 40       	sbci	r25, 0x00	; 0
     26e:	e1 f7       	brne	.-8      	; 0x268 <servorun+0x140>
     270:	2e c0       	rjmp	.+92     	; 0x2ce <servorun+0x1a6>
     272:	03 97       	sbiw	r24, 0x03	; 3
     274:	61 f5       	brne	.+88     	; 0x2ce <servorun+0x1a6>
     276:	c6 e0       	ldi	r28, 0x06	; 6
     278:	d0 e0       	ldi	r29, 0x00	; 0
     27a:	6f ed       	ldi	r22, 0xDF	; 223
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	08 e8       	ldi	r16, 0x88	; 136
     280:	10 e0       	ldi	r17, 0x00	; 0
     282:	f8 01       	movw	r30, r16
     284:	71 83       	std	Z+1, r23	; 0x01
     286:	60 83       	st	Z, r22
     288:	f6 e6       	ldi	r31, 0x66	; 102
     28a:	26 ee       	ldi	r18, 0xE6	; 230
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	f1 50       	subi	r31, 0x01	; 1
     290:	20 40       	sbci	r18, 0x00	; 0
     292:	30 40       	sbci	r19, 0x00	; 0
     294:	e1 f7       	brne	.-8      	; 0x28e <servorun+0x166>
     296:	07 2e       	mov	r0, r23
     298:	00 0c       	add	r0, r0
     29a:	88 0b       	sbc	r24, r24
     29c:	99 0b       	sbc	r25, r25
     29e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatsisf>
     2a2:	27 ed       	ldi	r18, 0xD7	; 215
     2a4:	33 ea       	ldi	r19, 0xA3	; 163
     2a6:	42 eb       	ldi	r20, 0xB2	; 178
     2a8:	51 e4       	ldi	r21, 0x41	; 65
     2aa:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__subsf3>
     2ae:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fixsfsi>
     2b2:	21 97       	sbiw	r28, 0x01	; 1
     2b4:	31 f7       	brne	.-52     	; 0x282 <servorun+0x15a>
     2b6:	15 b8       	out	0x05, r1	; 5
     2b8:	46 e6       	ldi	r20, 0x66	; 102
     2ba:	86 ee       	ldi	r24, 0xE6	; 230
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	41 50       	subi	r20, 0x01	; 1
     2c0:	80 40       	sbci	r24, 0x00	; 0
     2c2:	90 40       	sbci	r25, 0x00	; 0
     2c4:	e1 f7       	brne	.-8      	; 0x2be <servorun+0x196>
     2c6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     2ca:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	ff 90       	pop	r15
     2d8:	ef 90       	pop	r14
     2da:	08 95       	ret

000002dc <receive>:
     2dc:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <RX_raw>
     2e0:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <RX_raw+0x1>
     2e4:	8e 2f       	mov	r24, r30
     2e6:	92 2f       	mov	r25, r18
     2e8:	ac 01       	movw	r20, r24
     2ea:	49 5c       	subi	r20, 0xC9	; 201
     2ec:	51 09       	sbc	r21, r1
     2ee:	46 33       	cpi	r20, 0x36	; 54
     2f0:	51 05       	cpc	r21, r1
     2f2:	98 f4       	brcc	.+38     	; 0x31a <receive+0x3e>
     2f4:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <RX_ad1>
     2f8:	20 93 1b 02 	sts	0x021B, r18	; 0x80021b <RX_ad1+0x1>
     2fc:	87 5e       	subi	r24, 0xE7	; 231
     2fe:	91 09       	sbc	r25, r1
     300:	40 97       	sbiw	r24, 0x10	; 16
     302:	b8 f4       	brcc	.+46     	; 0x332 <receive+0x56>
     304:	e7 5e       	subi	r30, 0xE7	; 231
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ee 0f       	add	r30, r30
     30a:	ff 1f       	adc	r31, r31
     30c:	ec 5a       	subi	r30, 0xAC	; 172
     30e:	fd 4f       	sbci	r31, 0xFD	; 253
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	91 83       	std	Z+1, r25	; 0x01
     316:	80 83       	st	Z, r24
     318:	08 95       	ret
     31a:	89 3c       	cpi	r24, 0xC9	; 201
     31c:	91 05       	cpc	r25, r1
     31e:	48 f4       	brcc	.+18     	; 0x332 <receive+0x56>
     320:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <RX_ad1>
     324:	a9 5c       	subi	r26, 0xC9	; 201
     326:	a0 31       	cpi	r26, 0x10	; 16
     328:	20 f4       	brcc	.+8      	; 0x332 <receive+0x56>
     32a:	b0 e0       	ldi	r27, 0x00	; 0
     32c:	a8 5f       	subi	r26, 0xF8	; 248
     32e:	bd 4f       	sbci	r27, 0xFD	; 253
     330:	ec 93       	st	X, r30
     332:	08 95       	ret

00000334 <__vector_54>:
     334:	1f 92       	push	r1
     336:	0f 92       	push	r0
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	0f 92       	push	r0
     33c:	11 24       	eor	r1, r1
     33e:	0b b6       	in	r0, 0x3b	; 59
     340:	0f 92       	push	r0
     342:	2f 93       	push	r18
     344:	3f 93       	push	r19
     346:	4f 93       	push	r20
     348:	5f 93       	push	r21
     34a:	6f 93       	push	r22
     34c:	7f 93       	push	r23
     34e:	8f 93       	push	r24
     350:	9f 93       	push	r25
     352:	af 93       	push	r26
     354:	bf 93       	push	r27
     356:	ef 93       	push	r30
     358:	ff 93       	push	r31
     35a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <RX_raw+0x1>
     364:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <RX_raw>
     368:	b9 df       	rcall	.-142    	; 0x2dc <receive>
     36a:	ff 91       	pop	r31
     36c:	ef 91       	pop	r30
     36e:	bf 91       	pop	r27
     370:	af 91       	pop	r26
     372:	9f 91       	pop	r25
     374:	8f 91       	pop	r24
     376:	7f 91       	pop	r23
     378:	6f 91       	pop	r22
     37a:	5f 91       	pop	r21
     37c:	4f 91       	pop	r20
     37e:	3f 91       	pop	r19
     380:	2f 91       	pop	r18
     382:	0f 90       	pop	r0
     384:	0b be       	out	0x3b, r0	; 59
     386:	0f 90       	pop	r0
     388:	0f be       	out	0x3f, r0	; 63
     38a:	0f 90       	pop	r0
     38c:	1f 90       	pop	r1
     38e:	18 95       	reti

00000390 <usart_init>:
     390:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
     394:	8f e5       	ldi	r24, 0x5F	; 95
     396:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
     39a:	88 e9       	ldi	r24, 0x98	; 152
     39c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
     3a0:	86 e0       	ldi	r24, 0x06	; 6
     3a2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
     3a6:	08 95       	ret

000003a8 <ADC_initiate>:
	drivewheel_2(y,-200,200);
	drivewheel_3(z,-200,200);
}
void ADC_initiate()
{
	ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<ADLAR);  // AVcc //  right adjusted
     3a8:	80 e4       	ldi	r24, 0x40	; 64
     3aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1<<ADEN)|(0<<ADATE)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // bit4 ADC EOC flag // prescalar- 111 - 128 division factor
     3ae:	87 e8       	ldi	r24, 0x87	; 135
     3b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = 0x00;
     3b4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     3b8:	08 95       	ret

000003ba <drivewheel_1>:
}
void drivewheel_1(long sp_vect, long l_lim, long h_lim)//black uper red niche
{     
     3ba:	61 30       	cpi	r22, 0x01	; 1
     3bc:	2f ef       	ldi	r18, 0xFF	; 255
     3be:	72 07       	cpc	r23, r18
     3c0:	82 07       	cpc	r24, r18
     3c2:	92 07       	cpc	r25, r18
     3c4:	24 f4       	brge	.+8      	; 0x3ce <drivewheel_1+0x14>
     3c6:	61 e0       	ldi	r22, 0x01	; 1
     3c8:	7f ef       	ldi	r23, 0xFF	; 255
     3ca:	8f ef       	ldi	r24, 0xFF	; 255
     3cc:	9f ef       	ldi	r25, 0xFF	; 255
     3ce:	dc 01       	movw	r26, r24
     3d0:	cb 01       	movw	r24, r22
     3d2:	8f 3f       	cpi	r24, 0xFF	; 255
     3d4:	91 05       	cpc	r25, r1
     3d6:	a1 05       	cpc	r26, r1
     3d8:	b1 05       	cpc	r27, r1
     3da:	29 f0       	breq	.+10     	; 0x3e6 <drivewheel_1+0x2c>
     3dc:	24 f0       	brlt	.+8      	; 0x3e6 <drivewheel_1+0x2c>
     3de:	8f ef       	ldi	r24, 0xFF	; 255
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	a0 e0       	ldi	r26, 0x00	; 0
     3e4:	b0 e0       	ldi	r27, 0x00	; 0
	/*sp_vect=map_value(sp_vect,l_lim,h_lim,-255,255);*/
	sp_vect=limit_var(sp_vect,-255,255);
	if (sp_vect<(-15))
     3e6:	81 3f       	cpi	r24, 0xF1	; 241
     3e8:	2f ef       	ldi	r18, 0xFF	; 255
     3ea:	92 07       	cpc	r25, r18
     3ec:	a2 07       	cpc	r26, r18
     3ee:	b2 07       	cpc	r27, r18
     3f0:	54 f4       	brge	.+20     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		PORTC&=(~(1<<PC0));
     3f2:	40 98       	cbi	0x08, 0	; 8
		PORTC|=(1<<PC1);
     3f4:	41 9a       	sbi	0x08, 1	; 8
		sp_vect=(-sp_vect);
     3f6:	b0 95       	com	r27
     3f8:	a0 95       	com	r26
     3fa:	90 95       	com	r25
     3fc:	81 95       	neg	r24
     3fe:	9f 4f       	sbci	r25, 0xFF	; 255
     400:	af 4f       	sbci	r26, 0xFF	; 255
     402:	bf 4f       	sbci	r27, 0xFF	; 255
     404:	0d c0       	rjmp	.+26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	}
	else if (sp_vect>15)
     406:	80 31       	cpi	r24, 0x10	; 16
     408:	91 05       	cpc	r25, r1
     40a:	a1 05       	cpc	r26, r1
     40c:	b1 05       	cpc	r27, r1
     40e:	1c f0       	brlt	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	{
		PORTC&=(~(1<<PC1));
     410:	41 98       	cbi	0x08, 1	; 8
		PORTC|=(1<<PC0);
     412:	40 9a       	sbi	0x08, 0	; 8
     414:	05 c0       	rjmp	.+10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	}
	else
	{
		PORTC&=(~(1<<PC0));
     416:	40 98       	cbi	0x08, 0	; 8
		PORTC&=(~(1<<PC1));
     418:	41 98       	cbi	0x08, 1	; 8
		sp_vect=0;
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	dc 01       	movw	r26, r24
	}
	OCR5C=sp_vect;
     420:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     424:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
     428:	08 95       	ret

0000042a <drivewheel_2>:
}
void drivewheel_2(long sp_vect, long l_lim, long h_lim)//red upar black niche
{
     42a:	61 30       	cpi	r22, 0x01	; 1
     42c:	2f ef       	ldi	r18, 0xFF	; 255
     42e:	72 07       	cpc	r23, r18
     430:	82 07       	cpc	r24, r18
     432:	92 07       	cpc	r25, r18
     434:	24 f4       	brge	.+8      	; 0x43e <drivewheel_2+0x14>
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	7f ef       	ldi	r23, 0xFF	; 255
     43a:	8f ef       	ldi	r24, 0xFF	; 255
     43c:	9f ef       	ldi	r25, 0xFF	; 255
     43e:	dc 01       	movw	r26, r24
     440:	cb 01       	movw	r24, r22
     442:	8f 3f       	cpi	r24, 0xFF	; 255
     444:	91 05       	cpc	r25, r1
     446:	a1 05       	cpc	r26, r1
     448:	b1 05       	cpc	r27, r1
     44a:	29 f0       	breq	.+10     	; 0x456 <drivewheel_2+0x2c>
     44c:	24 f0       	brlt	.+8      	; 0x456 <drivewheel_2+0x2c>
     44e:	8f ef       	ldi	r24, 0xFF	; 255
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	a0 e0       	ldi	r26, 0x00	; 0
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	81 30       	cpi	r24, 0x01	; 1
     458:	2f ef       	ldi	r18, 0xFF	; 255
     45a:	92 07       	cpc	r25, r18
     45c:	a2 07       	cpc	r26, r18
     45e:	b2 07       	cpc	r27, r18
     460:	24 f4       	brge	.+8      	; 0x46a <drivewheel_2+0x40>
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	9f ef       	ldi	r25, 0xFF	; 255
     466:	af ef       	ldi	r26, 0xFF	; 255
     468:	bf ef       	ldi	r27, 0xFF	; 255
     46a:	8f 3f       	cpi	r24, 0xFF	; 255
     46c:	91 05       	cpc	r25, r1
     46e:	a1 05       	cpc	r26, r1
     470:	b1 05       	cpc	r27, r1
     472:	29 f0       	breq	.+10     	; 0x47e <drivewheel_2+0x54>
     474:	24 f0       	brlt	.+8      	; 0x47e <drivewheel_2+0x54>
     476:	8f ef       	ldi	r24, 0xFF	; 255
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	a0 e0       	ldi	r26, 0x00	; 0
     47c:	b0 e0       	ldi	r27, 0x00	; 0
	/*sp_vect=map_value(sp_vect,l_lim,h_lim,-225,225);*/
	sp_vect=limit_var(sp_vect,-255,255);																																																																																												sp_vect=limit_var(sp_vect,-255,255);
	if (sp_vect<(-15))
     47e:	81 3f       	cpi	r24, 0xF1	; 241
     480:	2f ef       	ldi	r18, 0xFF	; 255
     482:	92 07       	cpc	r25, r18
     484:	a2 07       	cpc	r26, r18
     486:	b2 07       	cpc	r27, r18
     488:	54 f4       	brge	.+20     	; 0x49e <drivewheel_2+0x74>
	{
		PORTC&=(~(1<<PC3));
     48a:	43 98       	cbi	0x08, 3	; 8
		PORTC|=(1<<PC2);
     48c:	42 9a       	sbi	0x08, 2	; 8
		sp_vect=(-sp_vect);
     48e:	b0 95       	com	r27
     490:	a0 95       	com	r26
     492:	90 95       	com	r25
     494:	81 95       	neg	r24
     496:	9f 4f       	sbci	r25, 0xFF	; 255
     498:	af 4f       	sbci	r26, 0xFF	; 255
     49a:	bf 4f       	sbci	r27, 0xFF	; 255
     49c:	0d c0       	rjmp	.+26     	; 0x4b8 <drivewheel_2+0x8e>
	}
	else if (sp_vect>15)
     49e:	80 31       	cpi	r24, 0x10	; 16
     4a0:	91 05       	cpc	r25, r1
     4a2:	a1 05       	cpc	r26, r1
     4a4:	b1 05       	cpc	r27, r1
     4a6:	1c f0       	brlt	.+6      	; 0x4ae <drivewheel_2+0x84>
	{
		PORTC&=(~(1<<PC2));
     4a8:	42 98       	cbi	0x08, 2	; 8
		PORTC|=(1<<PC3);
     4aa:	43 9a       	sbi	0x08, 3	; 8
     4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <drivewheel_2+0x8e>
	}
	else
	{
		PORTC&=(~(1<<PC2));
     4ae:	42 98       	cbi	0x08, 2	; 8
		PORTC&=(~(1<<PC3));
     4b0:	43 98       	cbi	0x08, 3	; 8
		sp_vect=0;
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	dc 01       	movw	r26, r24
	}
	OCR5A=sp_vect;
     4b8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     4bc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     4c0:	08 95       	ret

000004c2 <drivewheel_3>:
}
void drivewheel_3(long sp_vect, long l_lim, long h_lim)//red upar black niche
{
     4c2:	61 30       	cpi	r22, 0x01	; 1
     4c4:	2f ef       	ldi	r18, 0xFF	; 255
     4c6:	72 07       	cpc	r23, r18
     4c8:	82 07       	cpc	r24, r18
     4ca:	92 07       	cpc	r25, r18
     4cc:	24 f4       	brge	.+8      	; 0x4d6 <drivewheel_3+0x14>
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	7f ef       	ldi	r23, 0xFF	; 255
     4d2:	8f ef       	ldi	r24, 0xFF	; 255
     4d4:	9f ef       	ldi	r25, 0xFF	; 255
     4d6:	dc 01       	movw	r26, r24
     4d8:	cb 01       	movw	r24, r22
     4da:	8f 3f       	cpi	r24, 0xFF	; 255
     4dc:	91 05       	cpc	r25, r1
     4de:	a1 05       	cpc	r26, r1
     4e0:	b1 05       	cpc	r27, r1
     4e2:	29 f0       	breq	.+10     	; 0x4ee <drivewheel_3+0x2c>
     4e4:	24 f0       	brlt	.+8      	; 0x4ee <drivewheel_3+0x2c>
     4e6:	8f ef       	ldi	r24, 0xFF	; 255
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	a0 e0       	ldi	r26, 0x00	; 0
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
	/*sp_vect=map_value(sp_vect,l_lim,h_lim,-245,245);*/
	sp_vect=limit_var(sp_vect,-255,255);
	
	if (sp_vect<(-15))
     4ee:	81 3f       	cpi	r24, 0xF1	; 241
     4f0:	2f ef       	ldi	r18, 0xFF	; 255
     4f2:	92 07       	cpc	r25, r18
     4f4:	a2 07       	cpc	r26, r18
     4f6:	b2 07       	cpc	r27, r18
     4f8:	54 f4       	brge	.+20     	; 0x50e <drivewheel_3+0x4c>
	{
		PORTC&=(~(1<<PC4));
     4fa:	44 98       	cbi	0x08, 4	; 8
		PORTC|=(1<<PC5);
     4fc:	45 9a       	sbi	0x08, 5	; 8
		sp_vect=(-sp_vect);
     4fe:	b0 95       	com	r27
     500:	a0 95       	com	r26
     502:	90 95       	com	r25
     504:	81 95       	neg	r24
     506:	9f 4f       	sbci	r25, 0xFF	; 255
     508:	af 4f       	sbci	r26, 0xFF	; 255
     50a:	bf 4f       	sbci	r27, 0xFF	; 255
     50c:	0d c0       	rjmp	.+26     	; 0x528 <drivewheel_3+0x66>
	}
	else if (sp_vect>15)
     50e:	80 31       	cpi	r24, 0x10	; 16
     510:	91 05       	cpc	r25, r1
     512:	a1 05       	cpc	r26, r1
     514:	b1 05       	cpc	r27, r1
     516:	1c f0       	brlt	.+6      	; 0x51e <drivewheel_3+0x5c>
	{
		PORTC&=(~(1<<PC5));
     518:	45 98       	cbi	0x08, 5	; 8
		PORTC|=(1<<PC4);
     51a:	44 9a       	sbi	0x08, 4	; 8
     51c:	05 c0       	rjmp	.+10     	; 0x528 <drivewheel_3+0x66>
	}
	else
	{
		PORTC&=(~(1<<PC4));
     51e:	44 98       	cbi	0x08, 4	; 8
		PORTC&=(~(1<<PC5));
     520:	45 98       	cbi	0x08, 5	; 8
		sp_vect=0;
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	dc 01       	movw	r26, r24
	}
	OCR5B=sp_vect;
     528:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     52c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     530:	08 95       	ret

00000532 <drivecross>:
		in_var=l_limit;
	}
    return in_var;
}
void drivecross(int x_vect,int y_vect,int m_vect,int errg_vect,int errg_side)
{
     532:	2f 92       	push	r2
     534:	3f 92       	push	r3
     536:	4f 92       	push	r4
     538:	5f 92       	push	r5
     53a:	6f 92       	push	r6
     53c:	7f 92       	push	r7
     53e:	8f 92       	push	r8
     540:	9f 92       	push	r9
     542:	af 92       	push	r10
     544:	bf 92       	push	r11
     546:	cf 92       	push	r12
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	2c 97       	sbiw	r28, 0x0c	; 12
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
     566:	5b 01       	movw	r10, r22
     568:	1a 01       	movw	r2, r20
     56a:	3a 87       	std	Y+10, r19	; 0x0a
     56c:	29 87       	std	Y+9, r18	; 0x09
	x=-(-m_vect/1.1+x_vect + errg_side);			//horizontal wheel
     56e:	bc 01       	movw	r22, r24
     570:	99 0f       	add	r25, r25
     572:	88 0b       	sbc	r24, r24
     574:	99 0b       	sbc	r25, r25
     576:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatsisf>
     57a:	69 83       	std	Y+1, r22	; 0x01
     57c:	7a 83       	std	Y+2, r23	; 0x02
     57e:	8b 83       	std	Y+3, r24	; 0x03
     580:	9c 83       	std	Y+4, r25	; 0x04
     582:	b8 01       	movw	r22, r16
     584:	11 0f       	add	r17, r17
     586:	88 0b       	sbc	r24, r24
     588:	99 0b       	sbc	r25, r25
     58a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatsisf>
     58e:	6d 83       	std	Y+5, r22	; 0x05
     590:	7e 83       	std	Y+6, r23	; 0x06
     592:	8f 83       	std	Y+7, r24	; 0x07
     594:	98 87       	std	Y+8, r25	; 0x08
     596:	66 27       	eor	r22, r22
     598:	77 27       	eor	r23, r23
     59a:	62 19       	sub	r22, r2
     59c:	73 09       	sbc	r23, r3
     59e:	07 2e       	mov	r0, r23
     5a0:	00 0c       	add	r0, r0
     5a2:	88 0b       	sbc	r24, r24
     5a4:	99 0b       	sbc	r25, r25
     5a6:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatsisf>
     5aa:	2d ec       	ldi	r18, 0xCD	; 205
     5ac:	3c ec       	ldi	r19, 0xCC	; 204
     5ae:	4c e8       	ldi	r20, 0x8C	; 140
     5b0:	5f e3       	ldi	r21, 0x3F	; 63
     5b2:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divsf3>
     5b6:	29 81       	ldd	r18, Y+1	; 0x01
     5b8:	3a 81       	ldd	r19, Y+2	; 0x02
     5ba:	4b 81       	ldd	r20, Y+3	; 0x03
     5bc:	5c 81       	ldd	r21, Y+4	; 0x04
     5be:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__addsf3>
     5c2:	2d 81       	ldd	r18, Y+5	; 0x05
     5c4:	3e 81       	ldd	r19, Y+6	; 0x06
     5c6:	4f 81       	ldd	r20, Y+7	; 0x07
     5c8:	58 85       	ldd	r21, Y+8	; 0x08
     5ca:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__addsf3>
     5ce:	90 58       	subi	r25, 0x80	; 128
     5d0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fixsfsi>
     5d4:	6b 01       	movw	r12, r22
     5d6:	7c 01       	movw	r14, r24
     5d8:	70 93 53 02 	sts	0x0253, r23	; 0x800253 <x+0x1>
     5dc:	60 93 52 02 	sts	0x0252, r22	; 0x800252 <x>
	z=-(m_vect+(y_vect/1.168)+(x_vect/2.5) + (errg_vect/1.168) + (errg_side/2.5));					//right wheel
     5e0:	29 85       	ldd	r18, Y+9	; 0x09
     5e2:	3a 85       	ldd	r19, Y+10	; 0x0a
     5e4:	b9 01       	movw	r22, r18
     5e6:	33 0f       	add	r19, r19
     5e8:	88 0b       	sbc	r24, r24
     5ea:	99 0b       	sbc	r25, r25
     5ec:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatsisf>
     5f0:	69 87       	std	Y+9, r22	; 0x09
     5f2:	7a 87       	std	Y+10, r23	; 0x0a
     5f4:	8b 87       	std	Y+11, r24	; 0x0b
     5f6:	9c 87       	std	Y+12, r25	; 0x0c
     5f8:	b5 01       	movw	r22, r10
     5fa:	0b 2c       	mov	r0, r11
     5fc:	00 0c       	add	r0, r0
     5fe:	88 0b       	sbc	r24, r24
     600:	99 0b       	sbc	r25, r25
     602:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatsisf>
     606:	26 e0       	ldi	r18, 0x06	; 6
     608:	31 e8       	ldi	r19, 0x81	; 129
     60a:	45 e9       	ldi	r20, 0x95	; 149
     60c:	5f e3       	ldi	r21, 0x3F	; 63
     60e:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divsf3>
     612:	2b 01       	movw	r4, r22
     614:	3c 01       	movw	r6, r24
     616:	b1 01       	movw	r22, r2
     618:	03 2c       	mov	r0, r3
     61a:	00 0c       	add	r0, r0
     61c:	88 0b       	sbc	r24, r24
     61e:	99 0b       	sbc	r25, r25
     620:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatsisf>
     624:	9b 01       	movw	r18, r22
     626:	ac 01       	movw	r20, r24
     628:	c3 01       	movw	r24, r6
     62a:	b2 01       	movw	r22, r4
     62c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__addsf3>
     630:	2b 01       	movw	r4, r22
     632:	3c 01       	movw	r6, r24
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	40 e2       	ldi	r20, 0x20	; 32
     63a:	50 e4       	ldi	r21, 0x40	; 64
     63c:	69 81       	ldd	r22, Y+1	; 0x01
     63e:	7a 81       	ldd	r23, Y+2	; 0x02
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	9c 81       	ldd	r25, Y+4	; 0x04
     644:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divsf3>
     648:	9b 01       	movw	r18, r22
     64a:	ac 01       	movw	r20, r24
     64c:	c3 01       	movw	r24, r6
     64e:	b2 01       	movw	r22, r4
     650:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__addsf3>
     654:	2b 01       	movw	r4, r22
     656:	3c 01       	movw	r6, r24
     658:	26 e0       	ldi	r18, 0x06	; 6
     65a:	31 e8       	ldi	r19, 0x81	; 129
     65c:	45 e9       	ldi	r20, 0x95	; 149
     65e:	5f e3       	ldi	r21, 0x3F	; 63
     660:	69 85       	ldd	r22, Y+9	; 0x09
     662:	7a 85       	ldd	r23, Y+10	; 0x0a
     664:	8b 85       	ldd	r24, Y+11	; 0x0b
     666:	9c 85       	ldd	r25, Y+12	; 0x0c
     668:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divsf3>
     66c:	9b 01       	movw	r18, r22
     66e:	ac 01       	movw	r20, r24
     670:	c3 01       	movw	r24, r6
     672:	b2 01       	movw	r22, r4
     674:	f1 d7       	rcall	.+4066   	; 0x1658 <__addsf3>
     676:	2b 01       	movw	r4, r22
     678:	3c 01       	movw	r6, r24
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	40 e2       	ldi	r20, 0x20	; 32
     680:	50 e4       	ldi	r21, 0x40	; 64
     682:	6d 81       	ldd	r22, Y+5	; 0x05
     684:	7e 81       	ldd	r23, Y+6	; 0x06
     686:	8f 81       	ldd	r24, Y+7	; 0x07
     688:	98 85       	ldd	r25, Y+8	; 0x08
     68a:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divsf3>
     68e:	9b 01       	movw	r18, r22
     690:	ac 01       	movw	r20, r24
     692:	c3 01       	movw	r24, r6
     694:	b2 01       	movw	r22, r4
     696:	e0 d7       	rcall	.+4032   	; 0x1658 <__addsf3>
     698:	90 58       	subi	r25, 0x80	; 128
     69a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fixsfsi>
     69e:	70 93 4f 02 	sts	0x024F, r23	; 0x80024f <z+0x1>
     6a2:	60 93 4e 02 	sts	0x024E, r22	; 0x80024e <z>
	y=-(-m_vect + y_vect-(x_vect/2.25)-(errg_vect) - (errg_side/2.25));			//left wheel
     6a6:	b5 01       	movw	r22, r10
     6a8:	62 19       	sub	r22, r2
     6aa:	73 09       	sbc	r23, r3
     6ac:	07 2e       	mov	r0, r23
     6ae:	00 0c       	add	r0, r0
     6b0:	88 0b       	sbc	r24, r24
     6b2:	99 0b       	sbc	r25, r25
     6b4:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__floatsisf>
     6b8:	2b 01       	movw	r4, r22
     6ba:	3c 01       	movw	r6, r24
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	40 e1       	ldi	r20, 0x10	; 16
     6c2:	50 e4       	ldi	r21, 0x40	; 64
     6c4:	69 81       	ldd	r22, Y+1	; 0x01
     6c6:	7a 81       	ldd	r23, Y+2	; 0x02
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ca:	9c 81       	ldd	r25, Y+4	; 0x04
     6cc:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divsf3>
     6d0:	9b 01       	movw	r18, r22
     6d2:	ac 01       	movw	r20, r24
     6d4:	c3 01       	movw	r24, r6
     6d6:	b2 01       	movw	r22, r4
     6d8:	be d7       	rcall	.+3964   	; 0x1656 <__subsf3>
     6da:	29 85       	ldd	r18, Y+9	; 0x09
     6dc:	3a 85       	ldd	r19, Y+10	; 0x0a
     6de:	4b 85       	ldd	r20, Y+11	; 0x0b
     6e0:	5c 85       	ldd	r21, Y+12	; 0x0c
     6e2:	b9 d7       	rcall	.+3954   	; 0x1656 <__subsf3>
     6e4:	4b 01       	movw	r8, r22
     6e6:	5c 01       	movw	r10, r24
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e1       	ldi	r20, 0x10	; 16
     6ee:	50 e4       	ldi	r21, 0x40	; 64
     6f0:	6d 81       	ldd	r22, Y+5	; 0x05
     6f2:	7e 81       	ldd	r23, Y+6	; 0x06
     6f4:	8f 81       	ldd	r24, Y+7	; 0x07
     6f6:	98 85       	ldd	r25, Y+8	; 0x08
     6f8:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divsf3>
     6fc:	9b 01       	movw	r18, r22
     6fe:	ac 01       	movw	r20, r24
     700:	c5 01       	movw	r24, r10
     702:	b4 01       	movw	r22, r8
     704:	a8 d7       	rcall	.+3920   	; 0x1656 <__subsf3>
     706:	90 58       	subi	r25, 0x80	; 128
     708:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fixsfsi>
     70c:	70 93 51 02 	sts	0x0251, r23	; 0x800251 <y+0x1>
     710:	60 93 50 02 	sts	0x0250, r22	; 0x800250 <y>
	drivewheel_1(x,-200,200);
     714:	b6 01       	movw	r22, r12
     716:	dd 0c       	add	r13, r13
     718:	88 0b       	sbc	r24, r24
     71a:	99 0b       	sbc	r25, r25
     71c:	18 ec       	ldi	r17, 0xC8	; 200
     71e:	e1 2e       	mov	r14, r17
     720:	f1 2c       	mov	r15, r1
     722:	00 e0       	ldi	r16, 0x00	; 0
     724:	10 e0       	ldi	r17, 0x00	; 0
     726:	28 e3       	ldi	r18, 0x38	; 56
     728:	3f ef       	ldi	r19, 0xFF	; 255
     72a:	4f ef       	ldi	r20, 0xFF	; 255
     72c:	5f ef       	ldi	r21, 0xFF	; 255
     72e:	45 de       	rcall	.-886    	; 0x3ba <drivewheel_1>
	drivewheel_2(y,-200,200);
     730:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <y>
     734:	70 91 51 02 	lds	r23, 0x0251	; 0x800251 <y+0x1>
     738:	07 2e       	mov	r0, r23
     73a:	00 0c       	add	r0, r0
     73c:	88 0b       	sbc	r24, r24
     73e:	99 0b       	sbc	r25, r25
     740:	28 e3       	ldi	r18, 0x38	; 56
     742:	3f ef       	ldi	r19, 0xFF	; 255
     744:	4f ef       	ldi	r20, 0xFF	; 255
     746:	5f ef       	ldi	r21, 0xFF	; 255
     748:	70 de       	rcall	.-800    	; 0x42a <drivewheel_2>
	drivewheel_3(z,-200,200);
     74a:	60 91 4e 02 	lds	r22, 0x024E	; 0x80024e <z>
     74e:	70 91 4f 02 	lds	r23, 0x024F	; 0x80024f <z+0x1>
     752:	07 2e       	mov	r0, r23
     754:	00 0c       	add	r0, r0
     756:	88 0b       	sbc	r24, r24
     758:	99 0b       	sbc	r25, r25
     75a:	28 e3       	ldi	r18, 0x38	; 56
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f ef       	ldi	r20, 0xFF	; 255
     760:	5f ef       	ldi	r21, 0xFF	; 255
     762:	af de       	rcall	.-674    	; 0x4c2 <drivewheel_3>
}
     764:	2c 96       	adiw	r28, 0x0c	; 12
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	df 90       	pop	r13
     77e:	cf 90       	pop	r12
     780:	bf 90       	pop	r11
     782:	af 90       	pop	r10
     784:	9f 90       	pop	r9
     786:	8f 90       	pop	r8
     788:	7f 90       	pop	r7
     78a:	6f 90       	pop	r6
     78c:	5f 90       	pop	r5
     78e:	4f 90       	pop	r4
     790:	3f 90       	pop	r3
     792:	2f 90       	pop	r2
     794:	08 95       	ret

00000796 <ADC_read>:
	}
	OCR5B=sp_vect;
}
uint16_t ADC_read(uint8_t ch)
{
	ADMUX = ADMUX & 0b11100000;    //Clearing all the mux
     796:	ec e7       	ldi	r30, 0x7C	; 124
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	90 81       	ld	r25, Z
     79c:	90 7e       	andi	r25, 0xE0	; 224
     79e:	90 83       	st	Z, r25
	ADCSRB = ADCSRB & 0b11110111;  //------"-"-----------
     7a0:	eb e7       	ldi	r30, 0x7B	; 123
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	90 81       	ld	r25, Z
     7a6:	97 7f       	andi	r25, 0xF7	; 247
     7a8:	90 83       	st	Z, r25
	ch = ch & 0b00001111;
     7aa:	98 2f       	mov	r25, r24
     7ac:	9f 70       	andi	r25, 0x0F	; 15
	if ( ch <= 7 )
     7ae:	98 30       	cpi	r25, 0x08	; 8
     7b0:	48 f4       	brcc	.+18     	; 0x7c4 <ADC_read+0x2e>
	{
		ch = ch & 0b00000111;
		ADMUX = ADMUX | ch;
     7b2:	ec e7       	ldi	r30, 0x7C	; 124
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	90 81       	ld	r25, Z
     7b8:	87 70       	andi	r24, 0x07	; 7
     7ba:	89 2b       	or	r24, r25
     7bc:	80 83       	st	Z, r24
		ADCSRB=0x00;
     7be:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     7c2:	0c c0       	rjmp	.+24     	; 0x7dc <ADC_read+0x46>
	}
	else
	{
		ch = ch-8;
		ch = ch & 0b00000111;
		ADMUX = ADMUX | ch;
     7c4:	ec e7       	ldi	r30, 0x7C	; 124
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	97 70       	andi	r25, 0x07	; 7
     7cc:	98 2b       	or	r25, r24
     7ce:	90 83       	st	Z, r25
		ADCSRB=0x00;
     7d0:	eb e7       	ldi	r30, 0x7B	; 123
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	10 82       	st	Z, r1
		ADCSRB = ADCSRB | (1<<MUX5);
     7d6:	80 81       	ld	r24, Z
     7d8:	88 60       	ori	r24, 0x08	; 8
     7da:	80 83       	st	Z, r24
	}
	ADCSRA = ADCSRA | (1<<ADSC);    //Bit 6 to start conversion-ADSC
     7dc:	ea e7       	ldi	r30, 0x7A	; 122
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 81       	ld	r24, Z
     7e2:	80 64       	ori	r24, 0x40	; 64
     7e4:	80 83       	st	Z, r24
	while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
     7e6:	80 81       	ld	r24, Z
     7e8:	84 ff       	sbrs	r24, 4
     7ea:	fd cf       	rjmp	.-6      	; 0x7e6 <ADC_read+0x50>
	return(ADC);
     7ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     7f0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
     7f4:	08 95       	ret

000007f6 <drivewheel_en>:
void drivewheel_en(long sp_vect, long l_lim, long h_lim)
{
     7f6:	8f 92       	push	r8
     7f8:	9f 92       	push	r9
     7fa:	af 92       	push	r10
     7fc:	bf 92       	push	r11
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	49 01       	movw	r8, r18
     808:	5a 01       	movw	r10, r20
    UCSR3B=0b10011000;//enable RXEN TXEN
	UCSR3C=0b00000110;// UCSZ1 UCSZ0
}
long map_value(long in_value, long in_min, long in_max, long out_min, long out_max)
{	
	return (in_value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     80a:	9b 01       	movw	r18, r22
     80c:	ac 01       	movw	r20, r24
     80e:	28 19       	sub	r18, r8
     810:	39 09       	sbc	r19, r9
     812:	4a 09       	sbc	r20, r10
     814:	5b 09       	sbc	r21, r11
     816:	ad e2       	ldi	r26, 0x2D	; 45
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__muluhisi3>
     81e:	a8 01       	movw	r20, r16
     820:	97 01       	movw	r18, r14
     822:	28 19       	sub	r18, r8
     824:	39 09       	sbc	r19, r9
     826:	4a 09       	sbc	r20, r10
     828:	5b 09       	sbc	r21, r11
     82a:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <__divmodsi4>
     82e:	89 01       	movw	r16, r18
     830:	9a 01       	movw	r18, r20
     832:	07 5e       	subi	r16, 0xE7	; 231
     834:	1f 4f       	sbci	r17, 0xFF	; 255
     836:	2f 4f       	sbci	r18, 0xFF	; 255
     838:	3f 4f       	sbci	r19, 0xFF	; 255
}
long limit_var(long in_var, long l_limit, long h_limit)
{
	if (in_var>h_limit)
     83a:	07 34       	cpi	r16, 0x47	; 71
     83c:	11 05       	cpc	r17, r1
     83e:	21 05       	cpc	r18, r1
     840:	31 05       	cpc	r19, r1
     842:	54 f4       	brge	.+20     	; 0x858 <drivewheel_en+0x62>
	{
		in_var=h_limit;
	}
	else if (in_var<l_limit)
     844:	09 31       	cpi	r16, 0x19	; 25
     846:	11 05       	cpc	r17, r1
     848:	21 05       	cpc	r18, r1
     84a:	31 05       	cpc	r19, r1
     84c:	4c f4       	brge	.+18     	; 0x860 <drivewheel_en+0x6a>
	{	
		in_var=l_limit;
     84e:	09 e1       	ldi	r16, 0x19	; 25
     850:	10 e0       	ldi	r17, 0x00	; 0
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	04 c0       	rjmp	.+8      	; 0x860 <drivewheel_en+0x6a>
}
long limit_var(long in_var, long l_limit, long h_limit)
{
	if (in_var>h_limit)
	{
		in_var=h_limit;
     858:	06 e4       	ldi	r16, 0x46	; 70
     85a:	10 e0       	ldi	r17, 0x00	; 0
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
}
void drivewheel_en(long sp_vect, long l_lim, long h_lim)
{
	   sp_vect=map_value(sp_vect,l_lim,h_lim,25,70);
	    sp_vect=limit_var(sp_vect,25,70);
	    if(X<5)
     860:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <X>
     864:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <X+0x1>
     868:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <X+0x2>
     86c:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <X+0x3>
     870:	05 97       	sbiw	r24, 0x05	; 5
     872:	a1 05       	cpc	r26, r1
     874:	b1 05       	cpc	r27, r1
     876:	34 f5       	brge	.+76     	; 0x8c4 <drivewheel_en+0xce>
		{
			PORTA&=(~(1<<PA0));
     878:	10 98       	cbi	0x02, 0	; 2
			PORTA&=(~(1<<PA1));
     87a:	11 98       	cbi	0x02, 1	; 2
			sp_vect = 0;
			enmode_prev = enmode_curr;
     87c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <enmode_curr>
     880:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <enmode_curr+0x1>
     884:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <enmode_prev+0x1>
     888:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <enmode_prev>
			en_flag = 0;
     88c:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <__data_end+0x1>
     890:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <__data_end>
			butt[13] = 0;
     894:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <butt+0x1b>
     898:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <butt+0x1a>
			X = 0;
     89c:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <X>
     8a0:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <X+0x1>
     8a4:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <X+0x2>
     8a8:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <X+0x3>
			DISP = 0;
     8ac:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <DISP>
     8b0:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <DISP+0x1>
     8b4:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <DISP+0x2>
     8b8:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <DISP+0x3>
	    sp_vect=limit_var(sp_vect,25,70);
	    if(X<5)
		{
			PORTA&=(~(1<<PA0));
			PORTA&=(~(1<<PA1));
			sp_vect = 0;
     8bc:	00 e0       	ldi	r16, 0x00	; 0
     8be:	10 e0       	ldi	r17, 0x00	; 0
     8c0:	98 01       	movw	r18, r16
     8c2:	13 c0       	rjmp	.+38     	; 0x8ea <drivewheel_en+0xf4>
			en_flag = 0;
			butt[13] = 0;
			X = 0;
			DISP = 0;
		}
		if(enmode_curr > enmode_prev)//aisa <  1 se start karne ke liye
     8c4:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <enmode_curr>
     8c8:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <enmode_curr+0x1>
     8cc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <enmode_prev>
     8d0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <enmode_prev+0x1>
     8d4:	86 17       	cp	r24, r22
     8d6:	97 07       	cpc	r25, r23
     8d8:	1c f4       	brge	.+6      	; 0x8e0 <drivewheel_en+0xea>
		{
			PORTA&=(~(1<<PA0));
     8da:	10 98       	cbi	0x02, 0	; 2
			PORTA|=(1<<PA1);
     8dc:	11 9a       	sbi	0x02, 1	; 2
     8de:	05 c0       	rjmp	.+10     	; 0x8ea <drivewheel_en+0xf4>
		}
		else if(enmode_prev > enmode_curr)
     8e0:	68 17       	cp	r22, r24
     8e2:	79 07       	cpc	r23, r25
     8e4:	14 f4       	brge	.+4      	; 0x8ea <drivewheel_en+0xf4>
		{
			PORTA&=(~(1<<PA1));
     8e6:	11 98       	cbi	0x02, 1	; 2
			PORTA|=(1<<PA0);
     8e8:	10 9a       	sbi	0x02, 0	; 2
		}
	    OCR4C=sp_vect;
     8ea:	10 93 ad 00 	sts	0x00AD, r17	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     8ee:	00 93 ac 00 	sts	0x00AC, r16	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
}
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	bf 90       	pop	r11
     8fc:	af 90       	pop	r10
     8fe:	9f 90       	pop	r9
     900:	8f 90       	pop	r8
     902:	08 95       	ret

00000904 <en_pid>:
void en_pid()
{
     904:	ef 92       	push	r14
     906:	ff 92       	push	r15
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
   P=X*kp;	
     90c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <X>
     910:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <X+0x1>
     914:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <X+0x2>
     918:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <X+0x3>
     91c:	bb 23       	and	r27, r27
     91e:	1c f4       	brge	.+6      	; 0x926 <en_pid+0x22>
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	dc 01       	movw	r26, r24
     926:	bc 01       	movw	r22, r24
     928:	cd 01       	movw	r24, r26
     92a:	6f 3f       	cpi	r22, 0xFF	; 255
     92c:	71 05       	cpc	r23, r1
     92e:	81 05       	cpc	r24, r1
     930:	91 05       	cpc	r25, r1
     932:	29 f0       	breq	.+10     	; 0x93e <en_pid+0x3a>
     934:	24 f0       	brlt	.+8      	; 0x93e <en_pid+0x3a>
     936:	6f ef       	ldi	r22, 0xFF	; 255
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
   P = limit_var(P,0,255);
     93e:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <P>
     942:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <P+0x1>
     946:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <P+0x2>
     94a:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <P+0x3>
   drivewheel_en(P,0,255);
     94e:	e1 2c       	mov	r14, r1
     950:	f1 2c       	mov	r15, r1
     952:	87 01       	movw	r16, r14
     954:	ea 94       	dec	r14
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	a9 01       	movw	r20, r18
     95c:	4c df       	rcall	.-360    	; 0x7f6 <drivewheel_en>
}
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	08 95       	ret

00000968 <enrun>:
    {
		butt[15] =0;
    }
}
void enrun()
{
     968:	cf 92       	push	r12
     96a:	df 92       	push	r13
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
	if (enmode_curr < enmode_prev)
     970:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <enmode_curr>
     974:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <enmode_curr+0x1>
     978:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <enmode_prev>
     97c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <enmode_prev+0x1>
     980:	28 17       	cp	r18, r24
     982:	39 07       	cpc	r19, r25
     984:	0c f0       	brlt	.+2      	; 0x988 <enrun+0x20>
     986:	b9 c0       	rjmp	.+370    	; 0xafa <enrun+0x192>
	{
		if (en_flag == 0)
     988:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
     98c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
     990:	89 2b       	or	r24, r25
     992:	91 f4       	brne	.+36     	; 0x9b8 <enrun+0x50>
		{
			prev = ADC_read(1);
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	ff de       	rcall	.-514    	; 0x796 <ADC_read>
     998:	a0 e0       	ldi	r26, 0x00	; 0
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <prev>
     9a0:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <prev+0x1>
     9a4:	a0 93 2e 02 	sts	0x022E, r26	; 0x80022e <prev+0x2>
     9a8:	b0 93 2f 02 	sts	0x022F, r27	; 0x80022f <prev+0x3>
			en_flag = 1;
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
     9b4:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
		}
			TARG = ((-enmode_curr+enmode_prev)*393);
     9b8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <enmode_prev>
     9bc:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <enmode_prev+0x1>
     9c0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <enmode_curr>
     9c4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <enmode_curr+0x1>
     9c8:	fc 01       	movw	r30, r24
     9ca:	e4 1b       	sub	r30, r20
     9cc:	f5 0b       	sbc	r31, r21
     9ce:	69 e8       	ldi	r22, 0x89	; 137
     9d0:	71 e0       	ldi	r23, 0x01	; 1
     9d2:	e6 9f       	mul	r30, r22
     9d4:	90 01       	movw	r18, r0
     9d6:	e7 9f       	mul	r30, r23
     9d8:	30 0d       	add	r19, r0
     9da:	f6 9f       	mul	r31, r22
     9dc:	30 0d       	add	r19, r0
     9de:	11 24       	eor	r1, r1
     9e0:	69 01       	movw	r12, r18
     9e2:	03 2e       	mov	r0, r19
     9e4:	00 0c       	add	r0, r0
     9e6:	ee 08       	sbc	r14, r14
     9e8:	ff 08       	sbc	r15, r15
     9ea:	c0 92 74 02 	sts	0x0274, r12	; 0x800274 <TARG>
     9ee:	d0 92 75 02 	sts	0x0275, r13	; 0x800275 <TARG+0x1>
     9f2:	e0 92 76 02 	sts	0x0276, r14	; 0x800276 <TARG+0x2>
     9f6:	f0 92 77 02 	sts	0x0277, r15	; 0x800277 <TARG+0x3>
			if(enmode_prev == 6 && enmode_curr <= 5)
     9fa:	06 97       	sbiw	r24, 0x06	; 6
     9fc:	91 f4       	brne	.+36     	; 0xa22 <enrun+0xba>
     9fe:	46 30       	cpi	r20, 0x06	; 6
     a00:	51 05       	cpc	r21, r1
     a02:	7c f4       	brge	.+30     	; 0xa22 <enrun+0xba>
			{
				TARG = ((-enmode_curr+enmode_prev)*393-75);
     a04:	c9 01       	movw	r24, r18
     a06:	8b 54       	subi	r24, 0x4B	; 75
     a08:	91 09       	sbc	r25, r1
     a0a:	09 2e       	mov	r0, r25
     a0c:	00 0c       	add	r0, r0
     a0e:	aa 0b       	sbc	r26, r26
     a10:	bb 0b       	sbc	r27, r27
     a12:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <TARG>
     a16:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <TARG+0x1>
     a1a:	a0 93 76 02 	sts	0x0276, r26	; 0x800276 <TARG+0x2>
     a1e:	b0 93 77 02 	sts	0x0277, r27	; 0x800277 <TARG+0x3>
			}
		curr = ADC_read(1);
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	b8 de       	rcall	.-656    	; 0x796 <ADC_read>
     a26:	a0 e0       	ldi	r26, 0x00	; 0
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <curr>
     a2e:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <curr+0x1>
     a32:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <curr+0x2>
     a36:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <curr+0x3>
		DISP+= (curr- prev);
     a3a:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <prev>
     a3e:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <prev+0x1>
     a42:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <prev+0x2>
     a46:	70 91 2f 02 	lds	r23, 0x022F	; 0x80022f <prev+0x3>
     a4a:	84 1b       	sub	r24, r20
     a4c:	95 0b       	sbc	r25, r21
     a4e:	a6 0b       	sbc	r26, r22
     a50:	b7 0b       	sbc	r27, r23
     a52:	40 91 30 02 	lds	r20, 0x0230	; 0x800230 <DISP>
     a56:	50 91 31 02 	lds	r21, 0x0231	; 0x800231 <DISP+0x1>
     a5a:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <DISP+0x2>
     a5e:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <DISP+0x3>
     a62:	48 0f       	add	r20, r24
     a64:	59 1f       	adc	r21, r25
     a66:	6a 1f       	adc	r22, r26
		if((curr - prev) > 500)
     a68:	7b 1f       	adc	r23, r27
     a6a:	85 3f       	cpi	r24, 0xF5	; 245
     a6c:	21 e0       	ldi	r18, 0x01	; 1
     a6e:	92 07       	cpc	r25, r18
     a70:	a1 05       	cpc	r26, r1
     a72:	b1 05       	cpc	r27, r1
		{
			DISP -= 1024;
     a74:	64 f0       	brlt	.+24     	; 0xa8e <enrun+0x126>
     a76:	54 50       	subi	r21, 0x04	; 4
     a78:	61 09       	sbc	r22, r1
     a7a:	71 09       	sbc	r23, r1
     a7c:	40 93 30 02 	sts	0x0230, r20	; 0x800230 <DISP>
     a80:	50 93 31 02 	sts	0x0231, r21	; 0x800231 <DISP+0x1>
     a84:	60 93 32 02 	sts	0x0232, r22	; 0x800232 <DISP+0x2>
     a88:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <DISP+0x3>
		}
		else if((curr - prev) < -500)
     a8c:	19 c0       	rjmp	.+50     	; 0xac0 <enrun+0x158>
     a8e:	8c 30       	cpi	r24, 0x0C	; 12
     a90:	9e 4f       	sbci	r25, 0xFE	; 254
     a92:	af 4f       	sbci	r26, 0xFF	; 255
     a94:	bf 4f       	sbci	r27, 0xFF	; 255
			if(enmode_prev == 6 && enmode_curr <= 5)
			{
				TARG = ((-enmode_curr+enmode_prev)*393-75);
			}
		curr = ADC_read(1);
		DISP+= (curr- prev);
     a96:	4c f0       	brlt	.+18     	; 0xaaa <enrun+0x142>
     a98:	40 93 30 02 	sts	0x0230, r20	; 0x800230 <DISP>
     a9c:	50 93 31 02 	sts	0x0231, r21	; 0x800231 <DISP+0x1>
     aa0:	60 93 32 02 	sts	0x0232, r22	; 0x800232 <DISP+0x2>
     aa4:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <DISP+0x3>
		{
			DISP -= 1024;
		}
		else if((curr - prev) < -500)
		{
			DISP += 1024;
     aa8:	0b c0       	rjmp	.+22     	; 0xac0 <enrun+0x158>
     aaa:	5c 5f       	subi	r21, 0xFC	; 252
     aac:	6f 4f       	sbci	r22, 0xFF	; 255
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	40 93 30 02 	sts	0x0230, r20	; 0x800230 <DISP>
     ab4:	50 93 31 02 	sts	0x0231, r21	; 0x800231 <DISP+0x1>
     ab8:	60 93 32 02 	sts	0x0232, r22	; 0x800232 <DISP+0x2>
     abc:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <DISP+0x3>
        }
        X = TARG + DISP;
     ac0:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <TARG>
     ac4:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <TARG+0x1>
     ac8:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <TARG+0x2>
     acc:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <TARG+0x3>
     ad0:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <DISP>
     ad4:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <DISP+0x1>
     ad8:	a0 91 32 02 	lds	r26, 0x0232	; 0x800232 <DISP+0x2>
     adc:	b0 91 33 02 	lds	r27, 0x0233	; 0x800233 <DISP+0x3>
     ae0:	84 0f       	add	r24, r20
     ae2:	95 1f       	adc	r25, r21
     ae4:	a6 1f       	adc	r26, r22
     ae6:	b7 1f       	adc	r27, r23
     ae8:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <X>
     aec:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <X+0x1>
     af0:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <X+0x2>
     af4:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <X+0x3>
	}
	else if (enmode_curr > enmode_prev)
     af8:	bc c0       	rjmp	.+376    	; 0xc72 <enrun+0x30a>
     afa:	82 17       	cp	r24, r18
     afc:	93 07       	cpc	r25, r19
     afe:	0c f0       	brlt	.+2      	; 0xb02 <enrun+0x19a>
	{
		if(en_flag ==0)
     b00:	b8 c0       	rjmp	.+368    	; 0xc72 <enrun+0x30a>
     b02:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
     b06:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
		{
			prev = ADC_read(1);
     b0a:	89 2b       	or	r24, r25
     b0c:	91 f4       	brne	.+36     	; 0xb32 <enrun+0x1ca>
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	42 de       	rcall	.-892    	; 0x796 <ADC_read>
     b12:	a0 e0       	ldi	r26, 0x00	; 0
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <prev>
     b1a:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <prev+0x1>
     b1e:	a0 93 2e 02 	sts	0x022E, r26	; 0x80022e <prev+0x2>
     b22:	b0 93 2f 02 	sts	0x022F, r27	; 0x80022f <prev+0x3>
			en_flag = 1;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
     b2e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
		}
			TARG = ((enmode_curr-enmode_prev)*393);
     b32:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <enmode_curr>
     b36:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <enmode_curr+0x1>
     b3a:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <enmode_prev>
     b3e:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <enmode_prev+0x1>
     b42:	fc 01       	movw	r30, r24
     b44:	e4 1b       	sub	r30, r20
     b46:	f5 0b       	sbc	r31, r21
     b48:	69 e8       	ldi	r22, 0x89	; 137
     b4a:	71 e0       	ldi	r23, 0x01	; 1
     b4c:	e6 9f       	mul	r30, r22
     b4e:	90 01       	movw	r18, r0
     b50:	e7 9f       	mul	r30, r23
     b52:	30 0d       	add	r19, r0
     b54:	f6 9f       	mul	r31, r22
     b56:	30 0d       	add	r19, r0
     b58:	11 24       	eor	r1, r1
     b5a:	69 01       	movw	r12, r18
     b5c:	03 2e       	mov	r0, r19
     b5e:	00 0c       	add	r0, r0
     b60:	ee 08       	sbc	r14, r14
     b62:	ff 08       	sbc	r15, r15
     b64:	c0 92 74 02 	sts	0x0274, r12	; 0x800274 <TARG>
     b68:	d0 92 75 02 	sts	0x0275, r13	; 0x800275 <TARG+0x1>
     b6c:	e0 92 76 02 	sts	0x0276, r14	; 0x800276 <TARG+0x2>
     b70:	f0 92 77 02 	sts	0x0277, r15	; 0x800277 <TARG+0x3>
			if(enmode_curr == 6&& enmode_prev <=5)
     b74:	06 97       	sbiw	r24, 0x06	; 6
     b76:	91 f4       	brne	.+36     	; 0xb9c <enrun+0x234>
     b78:	46 30       	cpi	r20, 0x06	; 6
     b7a:	51 05       	cpc	r21, r1
			{
			TARG = ((enmode_curr-enmode_prev)*393-75);		
     b7c:	7c f4       	brge	.+30     	; 0xb9c <enrun+0x234>
     b7e:	c9 01       	movw	r24, r18
     b80:	8b 54       	subi	r24, 0x4B	; 75
     b82:	91 09       	sbc	r25, r1
     b84:	09 2e       	mov	r0, r25
     b86:	00 0c       	add	r0, r0
     b88:	aa 0b       	sbc	r26, r26
     b8a:	bb 0b       	sbc	r27, r27
     b8c:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <TARG>
     b90:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <TARG+0x1>
     b94:	a0 93 76 02 	sts	0x0276, r26	; 0x800276 <TARG+0x2>
			}
		curr = ADC_read(1);
     b98:	b0 93 77 02 	sts	0x0277, r27	; 0x800277 <TARG+0x3>
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	fb dd       	rcall	.-1034   	; 0x796 <ADC_read>
     ba0:	a0 e0       	ldi	r26, 0x00	; 0
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <curr>
     ba8:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <curr+0x1>
     bac:	a0 93 2a 02 	sts	0x022A, r26	; 0x80022a <curr+0x2>
     bb0:	b0 93 2b 02 	sts	0x022B, r27	; 0x80022b <curr+0x3>
		DISP+= (curr- prev);
     bb4:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <prev>
     bb8:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <prev+0x1>
     bbc:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <prev+0x2>
     bc0:	70 91 2f 02 	lds	r23, 0x022F	; 0x80022f <prev+0x3>
     bc4:	84 1b       	sub	r24, r20
     bc6:	95 0b       	sbc	r25, r21
     bc8:	a6 0b       	sbc	r26, r22
     bca:	b7 0b       	sbc	r27, r23
     bcc:	40 91 30 02 	lds	r20, 0x0230	; 0x800230 <DISP>
     bd0:	50 91 31 02 	lds	r21, 0x0231	; 0x800231 <DISP+0x1>
     bd4:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <DISP+0x2>
     bd8:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <DISP+0x3>
     bdc:	48 0f       	add	r20, r24
     bde:	59 1f       	adc	r21, r25
     be0:	6a 1f       	adc	r22, r26
		if((curr - prev) > 500)
     be2:	7b 1f       	adc	r23, r27
     be4:	85 3f       	cpi	r24, 0xF5	; 245
     be6:	21 e0       	ldi	r18, 0x01	; 1
     be8:	92 07       	cpc	r25, r18
     bea:	a1 05       	cpc	r26, r1
     bec:	b1 05       	cpc	r27, r1
		{
		DISP -= 1024;
     bee:	64 f0       	brlt	.+24     	; 0xc08 <enrun+0x2a0>
     bf0:	54 50       	subi	r21, 0x04	; 4
     bf2:	61 09       	sbc	r22, r1
     bf4:	71 09       	sbc	r23, r1
     bf6:	40 93 30 02 	sts	0x0230, r20	; 0x800230 <DISP>
     bfa:	50 93 31 02 	sts	0x0231, r21	; 0x800231 <DISP+0x1>
     bfe:	60 93 32 02 	sts	0x0232, r22	; 0x800232 <DISP+0x2>
     c02:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <DISP+0x3>
		}
		else if((curr - prev) < -500)
     c06:	19 c0       	rjmp	.+50     	; 0xc3a <enrun+0x2d2>
     c08:	8c 30       	cpi	r24, 0x0C	; 12
     c0a:	9e 4f       	sbci	r25, 0xFE	; 254
     c0c:	af 4f       	sbci	r26, 0xFF	; 255
     c0e:	bf 4f       	sbci	r27, 0xFF	; 255
			if(enmode_curr == 6&& enmode_prev <=5)
			{
			TARG = ((enmode_curr-enmode_prev)*393-75);		
			}
		curr = ADC_read(1);
		DISP+= (curr- prev);
     c10:	4c f0       	brlt	.+18     	; 0xc24 <enrun+0x2bc>
     c12:	40 93 30 02 	sts	0x0230, r20	; 0x800230 <DISP>
     c16:	50 93 31 02 	sts	0x0231, r21	; 0x800231 <DISP+0x1>
     c1a:	60 93 32 02 	sts	0x0232, r22	; 0x800232 <DISP+0x2>
     c1e:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <DISP+0x3>
		{
		DISP -= 1024;
		}
		else if((curr - prev) < -500)
		{
		DISP += 1024;
     c22:	0b c0       	rjmp	.+22     	; 0xc3a <enrun+0x2d2>
     c24:	5c 5f       	subi	r21, 0xFC	; 252
     c26:	6f 4f       	sbci	r22, 0xFF	; 255
     c28:	7f 4f       	sbci	r23, 0xFF	; 255
     c2a:	40 93 30 02 	sts	0x0230, r20	; 0x800230 <DISP>
     c2e:	50 93 31 02 	sts	0x0231, r21	; 0x800231 <DISP+0x1>
     c32:	60 93 32 02 	sts	0x0232, r22	; 0x800232 <DISP+0x2>
     c36:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <DISP+0x3>
		}
		X = TARG - DISP;
     c3a:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <TARG>
     c3e:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <TARG+0x1>
     c42:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <TARG+0x2>
     c46:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <TARG+0x3>
     c4a:	40 91 30 02 	lds	r20, 0x0230	; 0x800230 <DISP>
     c4e:	50 91 31 02 	lds	r21, 0x0231	; 0x800231 <DISP+0x1>
     c52:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <DISP+0x2>
     c56:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <DISP+0x3>
     c5a:	84 1b       	sub	r24, r20
     c5c:	95 0b       	sbc	r25, r21
     c5e:	a6 0b       	sbc	r26, r22
     c60:	b7 0b       	sbc	r27, r23
     c62:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <X>
     c66:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <X+0x1>
     c6a:	a0 93 26 02 	sts	0x0226, r26	; 0x800226 <X+0x2>
     c6e:	b0 93 27 02 	sts	0x0227, r27	; 0x800227 <X+0x3>
	}
	prev = curr;
     c72:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <curr>
     c76:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <curr+0x1>
     c7a:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <curr+0x2>
     c7e:	b0 91 2b 02 	lds	r27, 0x022B	; 0x80022b <curr+0x3>
     c82:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <prev>
     c86:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <prev+0x1>
     c8a:	a0 93 2e 02 	sts	0x022E, r26	; 0x80022e <prev+0x2>
	en_pid();
     c8e:	b0 93 2f 02 	sts	0x022F, r27	; 0x80022f <prev+0x3>
}
     c92:	38 de       	rcall	.-912    	; 0x904 <en_pid>
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	df 90       	pop	r13
     c9a:	cf 90       	pop	r12
     c9c:	08 95       	ret

00000c9e <main1>:
		PORTB &= (~(1<<PB1));
	}
	PORTD = enmode_curr;
}
void main1()
{
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
	xj1=map_value(RX[0],0,RX_range,(-pwm_range),pwm_range);
     caa:	c0 90 18 02 	lds	r12, 0x0218	; 0x800218 <RX_range>
     cae:	d0 90 19 02 	lds	r13, 0x0219	; 0x800219 <RX_range+0x1>
     cb2:	0d 2c       	mov	r0, r13
     cb4:	00 0c       	add	r0, r0
     cb6:	ee 08       	sbc	r14, r14
     cb8:	ff 08       	sbc	r15, r15
     cba:	c8 e0       	ldi	r28, 0x08	; 8
     cbc:	d2 e0       	ldi	r29, 0x02	; 2
     cbe:	28 81       	ld	r18, Y
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	a0 e9       	ldi	r26, 0x90	; 144
     cc4:	b1 e0       	ldi	r27, 0x01	; 1
     cc6:	d2 d6       	rcall	.+3492   	; 0x1a6c <__umulhisi3>
     cc8:	a7 01       	movw	r20, r14
     cca:	96 01       	movw	r18, r12
     ccc:	b3 d6       	rcall	.+3430   	; 0x1a34 <__divmodsi4>
     cce:	da 01       	movw	r26, r20
     cd0:	c9 01       	movw	r24, r18
     cd2:	88 5c       	subi	r24, 0xC8	; 200
     cd4:	91 09       	sbc	r25, r1
     cd6:	a1 09       	sbc	r26, r1
     cd8:	b1 09       	sbc	r27, r1
     cda:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <xj1+0x1>
     cde:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <xj1>
	yj1=map_value(RX[1],0,RX_range,(-pwm_range),pwm_range);
     ce2:	29 81       	ldd	r18, Y+1	; 0x01
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	a0 e9       	ldi	r26, 0x90	; 144
     ce8:	b1 e0       	ldi	r27, 0x01	; 1
     cea:	c0 d6       	rcall	.+3456   	; 0x1a6c <__umulhisi3>
     cec:	a7 01       	movw	r20, r14
     cee:	96 01       	movw	r18, r12
     cf0:	a1 d6       	rcall	.+3394   	; 0x1a34 <__divmodsi4>
     cf2:	da 01       	movw	r26, r20
     cf4:	c9 01       	movw	r24, r18
     cf6:	88 5c       	subi	r24, 0xC8	; 200
     cf8:	91 09       	sbc	r25, r1
     cfa:	a1 09       	sbc	r26, r1
     cfc:	b1 09       	sbc	r27, r1
     cfe:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <yj1+0x1>
     d02:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <yj1>
	xj2=map_value(RX[2],0,RX_range,(-rot_range),(rot_range));
     d06:	2a 81       	ldd	r18, Y+2	; 0x02
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	a6 e9       	ldi	r26, 0x96	; 150
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ae d6       	rcall	.+3420   	; 0x1a6c <__umulhisi3>
     d10:	a7 01       	movw	r20, r14
     d12:	96 01       	movw	r18, r12
     d14:	8f d6       	rcall	.+3358   	; 0x1a34 <__divmodsi4>
     d16:	da 01       	movw	r26, r20
     d18:	c9 01       	movw	r24, r18
     d1a:	8b 54       	subi	r24, 0x4B	; 75
     d1c:	91 09       	sbc	r25, r1
     d1e:	a1 09       	sbc	r26, r1
     d20:	b1 09       	sbc	r27, r1
     d22:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <xj2+0x1>
	yj2=map_value(RX[3],0,RX_range,(-pwm_range),pwm_range);
     d26:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <xj2>
     d2a:	2b 81       	ldd	r18, Y+3	; 0x03
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	a0 e9       	ldi	r26, 0x90	; 144
     d30:	b1 e0       	ldi	r27, 0x01	; 1
     d32:	9c d6       	rcall	.+3384   	; 0x1a6c <__umulhisi3>
     d34:	a7 01       	movw	r20, r14
     d36:	96 01       	movw	r18, r12
     d38:	7d d6       	rcall	.+3322   	; 0x1a34 <__divmodsi4>
     d3a:	da 01       	movw	r26, r20
     d3c:	c9 01       	movw	r24, r18
     d3e:	88 5c       	subi	r24, 0xC8	; 200
     d40:	91 09       	sbc	r25, r1
     d42:	a1 09       	sbc	r26, r1
     d44:	b1 09       	sbc	r27, r1
     d46:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <yj2+0x1>
     d4a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <yj2>
	if (butt[0]==1)
     d4e:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <butt>
     d52:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <butt+0x1>
     d56:	01 97       	sbiw	r24, 0x01	; 1
    {
		ip^=1;
     d58:	79 f4       	brne	.+30     	; 0xd78 <main1+0xda>
     d5a:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <ip>
     d5e:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <ip+0x1>
     d62:	21 e0       	ldi	r18, 0x01	; 1
     d64:	82 27       	eor	r24, r18
     d66:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <ip+0x1>
     d6a:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <ip>
	    butt[0]=0;
     d6e:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <butt+0x1>
     d72:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <butt>
    }
    else if (butt[1]==1)
     d76:	35 c1       	rjmp	.+618    	; 0xfe2 <main1+0x344>
     d78:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <butt+0x2>
     d7c:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <butt+0x3>
     d80:	01 97       	sbiw	r24, 0x01	; 1
    {
		ip1 ^=1;
     d82:	79 f4       	brne	.+30     	; 0xda2 <main1+0x104>
     d84:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <ip1>
     d88:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <ip1+0x1>
     d8c:	21 e0       	ldi	r18, 0x01	; 1
     d8e:	82 27       	eor	r24, r18
     d90:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <ip1+0x1>
     d94:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <ip1>
	    butt[1]=0;
     d98:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <butt+0x3>
     d9c:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <butt+0x2>
    }
    else if (butt[2]==1)
     da0:	20 c1       	rjmp	.+576    	; 0xfe2 <main1+0x344>
     da2:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <butt+0x4>
     da6:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <butt+0x5>
     daa:	01 97       	sbiw	r24, 0x01	; 1
    {
		enmode_curr++;
     dac:	c1 f4       	brne	.+48     	; 0xdde <main1+0x140>
     dae:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <enmode_curr>
     db2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <enmode_curr+0x1>
		if(enmode_curr==7)
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	87 30       	cpi	r24, 0x07	; 7
     dba:	91 05       	cpc	r25, r1
		ip1 ^=1;
	    butt[1]=0;
    }
    else if (butt[2]==1)
    {
		enmode_curr++;
     dbc:	29 f0       	breq	.+10     	; 0xdc8 <main1+0x12a>
     dbe:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <enmode_curr+0x1>
     dc2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <enmode_curr>
		if(enmode_curr==7)
		{
		enmode_curr = 1;
     dc6:	06 c0       	rjmp	.+12     	; 0xdd4 <main1+0x136>
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <enmode_curr+0x1>
     dd0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <enmode_curr>
		}
	    butt[2]=0;
     dd4:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <butt+0x5>
     dd8:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <butt+0x4>
    }
   else if (butt[3]==1)
     ddc:	02 c1       	rjmp	.+516    	; 0xfe2 <main1+0x344>
     dde:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <butt+0x6>
     de2:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <butt+0x7>
     de6:	01 97       	sbiw	r24, 0x01	; 1
    {
	    gyromode++;
     de8:	29 f5       	brne	.+74     	; 0xe34 <main1+0x196>
     dea:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <gyromode>
     dee:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <gyromode+0x1>
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <gyromode+0x1>
     df8:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <gyromode>
		if(gyromode%2 == 0)
     dfc:	80 fd       	sbrc	r24, 0
		{
			gyro_rot = 2;
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <main1+0x170>
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <gyro_rot+0x1>
     e08:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <gyro_rot>
		}
		else if(gyromode%2 == 1)
     e0c:	0e c0       	rjmp	.+28     	; 0xe2a <main1+0x18c>
     e0e:	81 70       	andi	r24, 0x01	; 1
     e10:	90 78       	andi	r25, 0x80	; 128
     e12:	99 23       	and	r25, r25
     e14:	24 f4       	brge	.+8      	; 0xe1e <main1+0x180>
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	8e 6f       	ori	r24, 0xFE	; 254
     e1a:	9f 6f       	ori	r25, 0xFF	; 255
     e1c:	01 96       	adiw	r24, 0x01	; 1
     e1e:	01 97       	sbiw	r24, 0x01	; 1
		{
			gyro_rot = 0;
     e20:	21 f4       	brne	.+8      	; 0xe2a <main1+0x18c>
     e22:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <gyro_rot+0x1>
     e26:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <gyro_rot>
		}
	    butt[3]=0;
     e2a:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <butt+0x7>
     e2e:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <butt+0x6>
    }
   else if (butt[4]==1)
     e32:	d7 c0       	rjmp	.+430    	; 0xfe2 <main1+0x344>
     e34:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <butt+0x8>
     e38:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <butt+0x9>
     e3c:	01 97       	sbiw	r24, 0x01	; 1
    {
	    gyromode--;
     e3e:	29 f5       	brne	.+74     	; 0xe8a <main1+0x1ec>
     e40:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <gyromode>
     e44:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <gyromode+0x1>
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <gyromode+0x1>
     e4e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <gyromode>
		if(gyromode%2 == 0)
     e52:	80 fd       	sbrc	r24, 0
		{
			gyro_rot = 1;
     e54:	07 c0       	rjmp	.+14     	; 0xe64 <main1+0x1c6>
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <gyro_rot+0x1>
     e5e:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <gyro_rot>
		}
		else if(gyromode%2 == 1)
     e62:	0e c0       	rjmp	.+28     	; 0xe80 <main1+0x1e2>
     e64:	81 70       	andi	r24, 0x01	; 1
     e66:	90 78       	andi	r25, 0x80	; 128
     e68:	99 23       	and	r25, r25
     e6a:	24 f4       	brge	.+8      	; 0xe74 <main1+0x1d6>
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	8e 6f       	ori	r24, 0xFE	; 254
     e70:	9f 6f       	ori	r25, 0xFF	; 255
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	01 97       	sbiw	r24, 0x01	; 1
		{
			gyro_rot = 0;
     e76:	21 f4       	brne	.+8      	; 0xe80 <main1+0x1e2>
     e78:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <gyro_rot+0x1>
     e7c:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <gyro_rot>
		}
	    butt[4]=0;
     e80:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <butt+0x9>
     e84:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <butt+0x8>
    }
    else if (butt[5]==1)
     e88:	ac c0       	rjmp	.+344    	; 0xfe2 <main1+0x344>
     e8a:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <butt+0xa>
     e8e:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <butt+0xb>
     e92:	01 97       	sbiw	r24, 0x01	; 1
    {
		enmode_curr--;
     e94:	b1 f4       	brne	.+44     	; 0xec2 <main1+0x224>
     e96:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <enmode_curr>
     e9a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <enmode_curr+0x1>
		if(enmode_curr==0)
     e9e:	01 97       	sbiw	r24, 0x01	; 1
		}
	    butt[4]=0;
    }
    else if (butt[5]==1)
    {
		enmode_curr--;
     ea0:	29 f0       	breq	.+10     	; 0xeac <main1+0x20e>
     ea2:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <enmode_curr+0x1>
     ea6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <enmode_curr>
		if(enmode_curr==0)
		{
		enmode_curr =6;
     eaa:	06 c0       	rjmp	.+12     	; 0xeb8 <main1+0x21a>
     eac:	86 e0       	ldi	r24, 0x06	; 6
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <enmode_curr+0x1>
     eb4:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <enmode_curr>
		}
	    butt[5]=0;
     eb8:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <butt+0xb>
     ebc:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <butt+0xa>
    }
    else if (butt[6]==1)
     ec0:	90 c0       	rjmp	.+288    	; 0xfe2 <main1+0x344>
     ec2:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <butt+0xc>
     ec6:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <butt+0xd>
     eca:	01 97       	sbiw	r24, 0x01	; 1
    {
	    butt[6]=0;
     ecc:	29 f4       	brne	.+10     	; 0xed8 <main1+0x23a>
     ece:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <butt+0xd>
     ed2:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <butt+0xc>
    }
    else if (butt[7]==1)
     ed6:	85 c0       	rjmp	.+266    	; 0xfe2 <main1+0x344>
     ed8:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <butt+0xe>
     edc:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <butt+0xf>
     ee0:	01 97       	sbiw	r24, 0x01	; 1
    {
	    butt[7]=0;
     ee2:	29 f4       	brne	.+10     	; 0xeee <main1+0x250>
     ee4:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <butt+0xf>
     ee8:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <butt+0xe>
    }
    else if (butt[8]==1)//l2
     eec:	7a c0       	rjmp	.+244    	; 0xfe2 <main1+0x344>
     eee:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <butt+0x10>
     ef2:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <butt+0x11>
     ef6:	01 97       	sbiw	r24, 0x01	; 1
    {
      butt[8] = 0;
     ef8:	29 f4       	brne	.+10     	; 0xf04 <main1+0x266>
     efa:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <butt+0x11>
     efe:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <butt+0x10>
    }
    else if (butt[9]==1)//r2
     f02:	6f c0       	rjmp	.+222    	; 0xfe2 <main1+0x344>
     f04:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <butt+0x12>
     f08:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <butt+0x13>
     f0c:	01 97       	sbiw	r24, 0x01	; 1
    {
		 butt[9]=0;
     f0e:	29 f4       	brne	.+10     	; 0xf1a <main1+0x27c>
     f10:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <butt+0x13>
     f14:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <butt+0x12>
    }
   else if (butt[10]==1)
     f18:	64 c0       	rjmp	.+200    	; 0xfe2 <main1+0x344>
     f1a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <butt+0x14>
     f1e:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <butt+0x15>
     f22:	01 97       	sbiw	r24, 0x01	; 1
    {
      butt[10]=0;
     f24:	29 f4       	brne	.+10     	; 0xf30 <main1+0x292>
     f26:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <butt+0x15>
     f2a:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <butt+0x14>
    }
    else if (butt[11]==1)
     f2e:	59 c0       	rjmp	.+178    	; 0xfe2 <main1+0x344>
     f30:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <butt+0x16>
     f34:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <butt+0x17>
     f38:	01 97       	sbiw	r24, 0x01	; 1
    {
	    butt[11]=0;
     f3a:	29 f4       	brne	.+10     	; 0xf46 <main1+0x2a8>
     f3c:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <butt+0x17>
     f40:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <butt+0x16>
    }
    else if (butt[12]==1)
     f44:	4e c0       	rjmp	.+156    	; 0xfe2 <main1+0x344>
     f46:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <butt+0x18>
     f4a:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <butt+0x19>
    {
      servorun();
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	09 f5       	brne	.+66     	; 0xf94 <main1+0x2f6>
	  gripmode ^=1;
     f52:	ea d8       	rcall	.-3628   	; 0x128 <servorun>
     f54:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <gripmode>
     f58:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <gripmode+0x1>
     f5c:	21 e0       	ldi	r18, 0x01	; 1
     f5e:	82 27       	eor	r24, r18
     f60:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <gripmode+0x1>
     f64:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <gripmode>
	    servomode ++;
     f68:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <servomode>
     f6c:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <servomode+0x1>
	    if(servomode==4)
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	84 30       	cpi	r24, 0x04	; 4
     f74:	91 05       	cpc	r25, r1
    }
    else if (butt[12]==1)
    {
      servorun();
	  gripmode ^=1;
	    servomode ++;
     f76:	29 f0       	breq	.+10     	; 0xf82 <main1+0x2e4>
     f78:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <servomode+0x1>
     f7c:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <servomode>
	    if(servomode==4)
	    {
		    servomode = 0;
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <main1+0x2ec>
     f82:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <servomode+0x1>
     f86:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <servomode>
	    }
       butt[12] = 0;
     f8a:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <butt+0x19>
     f8e:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <butt+0x18>
    }
    else if (butt[13]==1)//circle
     f92:	27 c0       	rjmp	.+78     	; 0xfe2 <main1+0x344>
     f94:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <butt+0x1a>
     f98:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <butt+0x1b>
    {
      enrun();
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	11 f4       	brne	.+4      	; 0xfa4 <main1+0x306>
     fa0:	e3 dc       	rcall	.-1594   	; 0x968 <enrun>
    }
    else if (butt[14]==1)//square
     fa2:	1f c0       	rjmp	.+62     	; 0xfe2 <main1+0x344>
     fa4:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <butt+0x1c>
     fa8:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <butt+0x1d>
     fac:	01 97       	sbiw	r24, 0x01	; 1
    {
      rackmode ^= 1;
     fae:	79 f4       	brne	.+30     	; 0xfce <main1+0x330>
     fb0:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <rackmode>
     fb4:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <rackmode+0x1>
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	82 27       	eor	r24, r18
     fbc:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <rackmode+0x1>
     fc0:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <rackmode>
		butt[14]=0;
     fc4:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <butt+0x1d>
     fc8:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <butt+0x1c>
    }
    else if (butt[15]==1)
     fcc:	0a c0       	rjmp	.+20     	; 0xfe2 <main1+0x344>
     fce:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <butt+0x1e>
     fd2:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <butt+0x1f>
     fd6:	01 97       	sbiw	r24, 0x01	; 1
    {
		butt[15] =0;
     fd8:	21 f4       	brne	.+8      	; 0xfe2 <main1+0x344>
     fda:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <butt+0x1f>
     fde:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <butt+0x1e>
    }
}
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	ff 90       	pop	r15
     fe8:	ef 90       	pop	r14
     fea:	df 90       	pop	r13
     fec:	cf 90       	pop	r12
     fee:	08 95       	ret

00000ff0 <usart_init1>:
   P = limit_var(P,0,255);
   drivewheel_en(P,0,255);
}
void usart_init1()
{
	UBRR0H=BAUDRATE>>8;
     ff0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L=BAUDRATE;
     ff4:	8f e5       	ldi	r24, 0x5F	; 95
     ff6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UCSR0B=0b10011000;//enable RXEN TXEN
     ffa:	88 e9       	ldi	r24, 0x98	; 152
     ffc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C=0b00000110;// UCSZ1 UCSZ0
    1000:	86 e0       	ldi	r24, 0x06	; 6
    1002:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1006:	08 95       	ret

00001008 <__vector_25>:
}
ISR(USART0_RX_vect)
{
    1008:	1f 92       	push	r1
    100a:	0f 92       	push	r0
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	0f 92       	push	r0
    1010:	11 24       	eor	r1, r1
    1012:	8f 93       	push	r24
    1014:	9f 93       	push	r25
	g=UDR0;
    1016:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <g+0x1>
    1020:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <g>
}
    1024:	9f 91       	pop	r25
    1026:	8f 91       	pop	r24
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <drivewheel_r>:
void drivewheel_r(long sp_vect, long l_lim, long h_lim)//red upar black niche
{
    1032:	8f 92       	push	r8
    1034:	9f 92       	push	r9
    1036:	af 92       	push	r10
    1038:	bf 92       	push	r11
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	49 01       	movw	r8, r18
    1044:	5a 01       	movw	r10, r20
    UCSR3B=0b10011000;//enable RXEN TXEN
	UCSR3C=0b00000110;// UCSZ1 UCSZ0
}
long map_value(long in_value, long in_min, long in_max, long out_min, long out_max)
{	
	return (in_value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1046:	9b 01       	movw	r18, r22
    1048:	ac 01       	movw	r20, r24
    104a:	28 19       	sub	r18, r8
    104c:	39 09       	sbc	r19, r9
    104e:	4a 09       	sbc	r20, r10
    1050:	5b 09       	sbc	r21, r11
    1052:	a0 ef       	ldi	r26, 0xF0	; 240
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	19 d5       	rcall	.+2610   	; 0x1a8a <__muluhisi3>
    1058:	a8 01       	movw	r20, r16
    105a:	97 01       	movw	r18, r14
    105c:	28 19       	sub	r18, r8
    105e:	39 09       	sbc	r19, r9
    1060:	4a 09       	sbc	r20, r10
    1062:	5b 09       	sbc	r21, r11
    1064:	e7 d4       	rcall	.+2510   	; 0x1a34 <__divmodsi4>
    1066:	da 01       	movw	r26, r20
    1068:	c9 01       	movw	r24, r18
    106a:	88 57       	subi	r24, 0x78	; 120
    106c:	91 09       	sbc	r25, r1
    106e:	a1 09       	sbc	r26, r1
    1070:	b1 09       	sbc	r27, r1
    1072:	88 38       	cpi	r24, 0x88	; 136
    1074:	2f ef       	ldi	r18, 0xFF	; 255
    1076:	92 07       	cpc	r25, r18
    1078:	a2 07       	cpc	r26, r18
    107a:	b2 07       	cpc	r27, r18
    107c:	24 f4       	brge	.+8      	; 0x1086 <drivewheel_r+0x54>
    107e:	88 e8       	ldi	r24, 0x88	; 136
    1080:	9f ef       	ldi	r25, 0xFF	; 255
    1082:	af ef       	ldi	r26, 0xFF	; 255
    1084:	bf ef       	ldi	r27, 0xFF	; 255
    1086:	89 37       	cpi	r24, 0x79	; 121
    1088:	91 05       	cpc	r25, r1
    108a:	a1 05       	cpc	r26, r1
    108c:	b1 05       	cpc	r27, r1
    108e:	24 f0       	brlt	.+8      	; 0x1098 <drivewheel_r+0x66>
    1090:	88 e7       	ldi	r24, 0x78	; 120
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a0 e0       	ldi	r26, 0x00	; 0
    1096:	b0 e0       	ldi	r27, 0x00	; 0
}
void drivewheel_r(long sp_vect, long l_lim, long h_lim)//red upar black niche
{
	sp_vect=map_value(sp_vect,l_lim,h_lim,-120,120);
	sp_vect=limit_var(sp_vect,-120,120);
	if (sp_vect<(-5))
    1098:	8b 3f       	cpi	r24, 0xFB	; 251
    109a:	2f ef       	ldi	r18, 0xFF	; 255
    109c:	92 07       	cpc	r25, r18
    109e:	a2 07       	cpc	r26, r18
    10a0:	b2 07       	cpc	r27, r18
    10a2:	54 f4       	brge	.+20     	; 0x10b8 <drivewheel_r+0x86>
	{
		PORTA&=(~(1<<PA2));
    10a4:	12 98       	cbi	0x02, 2	; 2
		PORTA|=(1<<PA3);
    10a6:	13 9a       	sbi	0x02, 3	; 2
		sp_vect=(-sp_vect);
    10a8:	b0 95       	com	r27
    10aa:	a0 95       	com	r26
    10ac:	90 95       	com	r25
    10ae:	81 95       	neg	r24
    10b0:	9f 4f       	sbci	r25, 0xFF	; 255
    10b2:	af 4f       	sbci	r26, 0xFF	; 255
    10b4:	bf 4f       	sbci	r27, 0xFF	; 255
    10b6:	0b c0       	rjmp	.+22     	; 0x10ce <drivewheel_r+0x9c>
	}
	else if (sp_vect>5)
    10b8:	86 30       	cpi	r24, 0x06	; 6
    10ba:	91 05       	cpc	r25, r1
    10bc:	a1 05       	cpc	r26, r1
    10be:	b1 05       	cpc	r27, r1
    10c0:	1c f0       	brlt	.+6      	; 0x10c8 <drivewheel_r+0x96>
	{
		PORTA&=(~(1<<PA3));
    10c2:	13 98       	cbi	0x02, 3	; 2
		PORTA|=(1<<PA2);
    10c4:	12 9a       	sbi	0x02, 2	; 2
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <drivewheel_r+0x9c>
	}
	else
	{
		sp_vect=0;
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	dc 01       	movw	r26, r24
	}
	OCR4A=sp_vect;
    10ce:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    10d2:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
}
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	ef 90       	pop	r14
    10de:	bf 90       	pop	r11
    10e0:	af 90       	pop	r10
    10e2:	9f 90       	pop	r9
    10e4:	8f 90       	pop	r8
    10e6:	08 95       	ret

000010e8 <drivewheel_rextra>:
void drivewheel_rextra(long sp_vect, long l_lim, long h_lim)//red upar black niche
{
    10e8:	8f 92       	push	r8
    10ea:	9f 92       	push	r9
    10ec:	af 92       	push	r10
    10ee:	bf 92       	push	r11
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	49 01       	movw	r8, r18
    10fa:	5a 01       	movw	r10, r20
    UCSR3B=0b10011000;//enable RXEN TXEN
	UCSR3C=0b00000110;// UCSZ1 UCSZ0
}
long map_value(long in_value, long in_min, long in_max, long out_min, long out_max)
{	
	return (in_value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    10fc:	9b 01       	movw	r18, r22
    10fe:	ac 01       	movw	r20, r24
    1100:	28 19       	sub	r18, r8
    1102:	39 09       	sbc	r19, r9
    1104:	4a 09       	sbc	r20, r10
    1106:	5b 09       	sbc	r21, r11
    1108:	a0 ef       	ldi	r26, 0xF0	; 240
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	be d4       	rcall	.+2428   	; 0x1a8a <__muluhisi3>
    110e:	a8 01       	movw	r20, r16
    1110:	97 01       	movw	r18, r14
    1112:	28 19       	sub	r18, r8
    1114:	39 09       	sbc	r19, r9
    1116:	4a 09       	sbc	r20, r10
    1118:	5b 09       	sbc	r21, r11
    111a:	8c d4       	rcall	.+2328   	; 0x1a34 <__divmodsi4>
    111c:	da 01       	movw	r26, r20
    111e:	c9 01       	movw	r24, r18
    1120:	88 57       	subi	r24, 0x78	; 120
    1122:	91 09       	sbc	r25, r1
    1124:	a1 09       	sbc	r26, r1
    1126:	b1 09       	sbc	r27, r1
    1128:	88 38       	cpi	r24, 0x88	; 136
    112a:	2f ef       	ldi	r18, 0xFF	; 255
    112c:	92 07       	cpc	r25, r18
    112e:	a2 07       	cpc	r26, r18
    1130:	b2 07       	cpc	r27, r18
    1132:	24 f4       	brge	.+8      	; 0x113c <drivewheel_rextra+0x54>
    1134:	88 e8       	ldi	r24, 0x88	; 136
    1136:	9f ef       	ldi	r25, 0xFF	; 255
    1138:	af ef       	ldi	r26, 0xFF	; 255
    113a:	bf ef       	ldi	r27, 0xFF	; 255
    113c:	89 37       	cpi	r24, 0x79	; 121
    113e:	91 05       	cpc	r25, r1
    1140:	a1 05       	cpc	r26, r1
    1142:	b1 05       	cpc	r27, r1
    1144:	24 f0       	brlt	.+8      	; 0x114e <drivewheel_rextra+0x66>
    1146:	88 e7       	ldi	r24, 0x78	; 120
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a0 e0       	ldi	r26, 0x00	; 0
    114c:	b0 e0       	ldi	r27, 0x00	; 0
}
void drivewheel_rextra(long sp_vect, long l_lim, long h_lim)//red upar black niche
{
	sp_vect=map_value(sp_vect,l_lim,h_lim,-120,120);
	sp_vect=limit_var(sp_vect,-120,120);
	if (sp_vect<(-5))
    114e:	8b 3f       	cpi	r24, 0xFB	; 251
    1150:	2f ef       	ldi	r18, 0xFF	; 255
    1152:	92 07       	cpc	r25, r18
    1154:	a2 07       	cpc	r26, r18
    1156:	b2 07       	cpc	r27, r18
    1158:	54 f4       	brge	.+20     	; 0x116e <drivewheel_rextra+0x86>
	{
		PORTA&=(~(1<<PA0));
    115a:	10 98       	cbi	0x02, 0	; 2
		PORTA|=(1<<PA1);
    115c:	11 9a       	sbi	0x02, 1	; 2
		sp_vect=(-sp_vect);
    115e:	b0 95       	com	r27
    1160:	a0 95       	com	r26
    1162:	90 95       	com	r25
    1164:	81 95       	neg	r24
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	af 4f       	sbci	r26, 0xFF	; 255
    116a:	bf 4f       	sbci	r27, 0xFF	; 255
    116c:	0b c0       	rjmp	.+22     	; 0x1184 <drivewheel_rextra+0x9c>
	}
	else if (sp_vect>5)
    116e:	86 30       	cpi	r24, 0x06	; 6
    1170:	91 05       	cpc	r25, r1
    1172:	a1 05       	cpc	r26, r1
    1174:	b1 05       	cpc	r27, r1
    1176:	1c f0       	brlt	.+6      	; 0x117e <drivewheel_rextra+0x96>
	{
		PORTA&=(~(1<<PA1));
    1178:	11 98       	cbi	0x02, 1	; 2
		PORTA|=(1<<PA0);
    117a:	10 9a       	sbi	0x02, 0	; 2
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <drivewheel_rextra+0x9c>
	}
	else
	{
		sp_vect=0;
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	dc 01       	movw	r26, r24
	}
	OCR4C=sp_vect;
    1184:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
    1188:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
}
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	bf 90       	pop	r11
    1196:	af 90       	pop	r10
    1198:	9f 90       	pop	r9
    119a:	8f 90       	pop	r8
    119c:	08 95       	ret

0000119e <gyro>:
void gyro()
{
    119e:	8f 92       	push	r8
    11a0:	9f 92       	push	r9
    11a2:	af 92       	push	r10
    11a4:	bf 92       	push	r11
    11a6:	cf 92       	push	r12
    11a8:	df 92       	push	r13
    11aa:	ef 92       	push	r14
    11ac:	ff 92       	push	r15
    11ae:	0f 93       	push	r16
    11b0:	1f 93       	push	r17
	  if(gyro_rot == 1)
    11b2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <gyro_rot>
    11b6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <gyro_rot+0x1>
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	91 05       	cpc	r25, r1
    11be:	39 f4       	brne	.+14     	; 0x11ce <gyro+0x30>
	  {
		  jg = 50;
    11c0:	82 e3       	ldi	r24, 0x32	; 50
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    11c8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    11cc:	0f c0       	rjmp	.+30     	; 0x11ec <gyro+0x4e>
	  }
	  else if(gyro_rot == 2)
    11ce:	02 97       	sbiw	r24, 0x02	; 2
    11d0:	39 f4       	brne	.+14     	; 0x11e0 <gyro+0x42>
	  {
		  jg = 150;
    11d2:	86 e9       	ldi	r24, 0x96	; 150
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    11da:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    11de:	06 c0       	rjmp	.+12     	; 0x11ec <gyro+0x4e>
	  }
	  else
	  {
		  jg = 100;
    11e0:	84 e6       	ldi	r24, 0x64	; 100
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    11e8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
	  }
	  errg=jg-g;
    11ec:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <g>
    11f0:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <g+0x1>
    11f4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    11f8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    11fc:	82 1b       	sub	r24, r18
    11fe:	93 0b       	sbc	r25, r19
    1200:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <errg+0x1>
    1204:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <errg>
	  PORTK = g;
    1208:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	  pwmg = errg;
    120c:	80 90 44 02 	lds	r8, 0x0244	; 0x800244 <errg>
    1210:	90 90 45 02 	lds	r9, 0x0245	; 0x800245 <errg+0x1>
	  errg = map_value(errg,-100,100,-255,255);
    1214:	09 2c       	mov	r0, r9
    1216:	00 0c       	add	r0, r0
    1218:	aa 08       	sbc	r10, r10
    121a:	bb 08       	sbc	r11, r11
    121c:	a5 01       	movw	r20, r10
    121e:	94 01       	movw	r18, r8
    1220:	2c 59       	subi	r18, 0x9C	; 156
    1222:	3f 4f       	sbci	r19, 0xFF	; 255
    1224:	4f 4f       	sbci	r20, 0xFF	; 255
    1226:	5f 4f       	sbci	r21, 0xFF	; 255
    1228:	ae ef       	ldi	r26, 0xFE	; 254
    122a:	b1 e0       	ldi	r27, 0x01	; 1
    122c:	2e d4       	rcall	.+2140   	; 0x1a8a <__muluhisi3>
    122e:	28 ec       	ldi	r18, 0xC8	; 200
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	fe d3       	rcall	.+2044   	; 0x1a34 <__divmodsi4>
    1238:	69 01       	movw	r12, r18
    123a:	7a 01       	movw	r14, r20
    123c:	8f ef       	ldi	r24, 0xFF	; 255
    123e:	c8 1a       	sub	r12, r24
    1240:	d1 08       	sbc	r13, r1
    1242:	e1 08       	sbc	r14, r1
    UCSR3B=0b10011000;//enable RXEN TXEN
	UCSR3C=0b00000110;// UCSZ1 UCSZ0
}
long map_value(long in_value, long in_min, long in_max, long out_min, long out_max)
{	
	return (in_value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1244:	f1 08       	sbc	r15, r1
    1246:	c5 01       	movw	r24, r10
    1248:	b4 01       	movw	r22, r8
    124a:	05 d3       	rcall	.+1546   	; 0x1856 <__floatsisf>
    124c:	2f e8       	ldi	r18, 0x8F	; 143
    124e:	32 ec       	ldi	r19, 0xC2	; 194
    1250:	45 eb       	ldi	r20, 0xB5	; 181
    1252:	5f e3       	ldi	r21, 0x3F	; 63
    1254:	8c d3       	rcall	.+1816   	; 0x196e <__mulsf3>
    1256:	cc d2       	rcall	.+1432   	; 0x17f0 <__fixsfsi>
    1258:	cb 01       	movw	r24, r22
    125a:	77 0f       	add	r23, r23
    125c:	aa 0b       	sbc	r26, r26
    125e:	bb 0b       	sbc	r27, r27
    1260:	9c 01       	movw	r18, r24
    1262:	ad 01       	movw	r20, r26
    1264:	21 50       	subi	r18, 0x01	; 1
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	4f 4f       	sbci	r20, 0xFF	; 255
    126a:	5f 4f       	sbci	r21, 0xFF	; 255
    126c:	a2 e8       	ldi	r26, 0x82	; 130
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	0c d4       	rcall	.+2072   	; 0x1a8a <__muluhisi3>
    1272:	2e ef       	ldi	r18, 0xFE	; 254
    1274:	31 e0       	ldi	r19, 0x01	; 1
    1276:	40 e0       	ldi	r20, 0x00	; 0
    1278:	50 e0       	ldi	r21, 0x00	; 0
    127a:	dc d3       	rcall	.+1976   	; 0x1a34 <__divmodsi4>
    127c:	ba 01       	movw	r22, r20
    127e:	a9 01       	movw	r20, r18
    1280:	41 54       	subi	r20, 0x41	; 65
    1282:	51 09       	sbc	r21, r1
    1284:	61 09       	sbc	r22, r1
	  PORTK = g;
	  pwmg = errg;
	  errg = map_value(errg,-100,100,-255,255);
	  pwmg = pwmg*kpg_rot;
	  pwmg = map_value(pwmg,-255,255,-65,65);
	  if(pwmg >= -18 && pwmg <=-1)
    1286:	71 09       	sbc	r23, r1
    1288:	ca 01       	movw	r24, r20
    128a:	42 96       	adiw	r24, 0x12	; 18
    128c:	42 97       	sbiw	r24, 0x12	; 18
	  {
		  pwmg = -18;
    128e:	38 f4       	brcc	.+14     	; 0x129e <gyro+0x100>
    1290:	8e ee       	ldi	r24, 0xEE	; 238
    1292:	9f ef       	ldi	r25, 0xFF	; 255
    1294:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <pwmg+0x1>
    1298:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <pwmg>
	  }
	  else if(pwmg<=18 && pwmg >=1)
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <gyro+0x11e>
    129e:	ca 01       	movw	r24, r20
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	42 97       	sbiw	r24, 0x12	; 18
	  errg=jg-g;
	  PORTK = g;
	  pwmg = errg;
	  errg = map_value(errg,-100,100,-255,255);
	  pwmg = pwmg*kpg_rot;
	  pwmg = map_value(pwmg,-255,255,-65,65);
    12a4:	28 f0       	brcs	.+10     	; 0x12b0 <gyro+0x112>
    12a6:	50 93 41 02 	sts	0x0241, r21	; 0x800241 <pwmg+0x1>
    12aa:	40 93 40 02 	sts	0x0240, r20	; 0x800240 <pwmg>
	  {
		  pwmg = -18;
	  }
	  else if(pwmg<=18 && pwmg >=1)
	  {
		  pwmg = 18;
    12ae:	06 c0       	rjmp	.+12     	; 0x12bc <gyro+0x11e>
    12b0:	82 e1       	ldi	r24, 0x12	; 18
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <pwmg+0x1>
	  }
	  errg = errg*kpg;
    12b8:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <pwmg>
    12bc:	b6 01       	movw	r22, r12
    12be:	dd 0c       	add	r13, r13
    12c0:	88 0b       	sbc	r24, r24
    12c2:	99 0b       	sbc	r25, r25
    12c4:	c8 d2       	rcall	.+1424   	; 0x1856 <__floatsisf>
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e5       	ldi	r20, 0x50	; 80
    12cc:	50 e4       	ldi	r21, 0x40	; 64
    12ce:	4f d3       	rcall	.+1694   	; 0x196e <__mulsf3>
    12d0:	8f d2       	rcall	.+1310   	; 0x17f0 <__fixsfsi>
    12d2:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <errg+0x1>
    12d6:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <errg>
  if(yj1 == 0 && xj1 ==0 && g!=jg)
    12da:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <yj1>
    12de:	f0 91 4b 02 	lds	r31, 0x024B	; 0x80024b <yj1+0x1>
    12e2:	30 97       	sbiw	r30, 0x00	; 0
    12e4:	61 f5       	brne	.+88     	; 0x133e <gyro+0x1a0>
    12e6:	a0 91 4c 02 	lds	r26, 0x024C	; 0x80024c <xj1>
    12ea:	b0 91 4d 02 	lds	r27, 0x024D	; 0x80024d <xj1+0x1>
    12ee:	10 97       	sbiw	r26, 0x00	; 0
    12f0:	61 f5       	brne	.+88     	; 0x134a <gyro+0x1ac>
    12f2:	40 91 42 02 	lds	r20, 0x0242	; 0x800242 <g>
    12f6:	50 91 43 02 	lds	r21, 0x0243	; 0x800243 <g+0x1>
    12fa:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    12fe:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    1302:	42 17       	cp	r20, r18
    1304:	53 07       	cpc	r21, r19
    1306:	09 f4       	brne	.+2      	; 0x130a <gyro+0x16c>
  {
	  drivecross(0,0,pwmg,0,0);
    1308:	40 c0       	rjmp	.+128    	; 0x138a <gyro+0x1ec>
    130a:	40 91 40 02 	lds	r20, 0x0240	; 0x800240 <pwmg>
    130e:	50 91 41 02 	lds	r21, 0x0241	; 0x800241 <pwmg+0x1>
    1312:	00 e0       	ldi	r16, 0x00	; 0
    1314:	10 e0       	ldi	r17, 0x00	; 0
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
  }
  else if(yj1 == 0 && xj1 ==0 && g==jg)
  {
	  drivecross(0,0,0,0,0);
    1322:	07 d9       	rcall	.-3570   	; 0x532 <drivecross>
    1324:	3e c0       	rjmp	.+124    	; 0x13a2 <gyro+0x204>
    1326:	00 e0       	ldi	r16, 0x00	; 0
    1328:	10 e0       	ldi	r17, 0x00	; 0
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	fb d8       	rcall	.-3594   	; 0x532 <drivecross>
  }
  else if(xj1 != 0 && g!=jg)
    133c:	32 c0       	rjmp	.+100    	; 0x13a2 <gyro+0x204>
    133e:	a0 91 4c 02 	lds	r26, 0x024C	; 0x80024c <xj1>
    1342:	b0 91 4d 02 	lds	r27, 0x024D	; 0x80024d <xj1+0x1>
    1346:	10 97       	sbiw	r26, 0x00	; 0
    1348:	a9 f0       	breq	.+42     	; 0x1374 <gyro+0x1d6>
    134a:	40 91 42 02 	lds	r20, 0x0242	; 0x800242 <g>
    134e:	50 91 43 02 	lds	r21, 0x0243	; 0x800243 <g+0x1>
    1352:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1356:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    135a:	42 17       	cp	r20, r18
  {
	  drivecross(xj1,yj1,xj2,errg,errg);
    135c:	53 07       	cpc	r21, r19
    135e:	51 f0       	breq	.+20     	; 0x1374 <gyro+0x1d6>
    1360:	40 91 48 02 	lds	r20, 0x0248	; 0x800248 <xj2>
    1364:	50 91 49 02 	lds	r21, 0x0249	; 0x800249 <xj2+0x1>
    1368:	8b 01       	movw	r16, r22
    136a:	9b 01       	movw	r18, r22
    136c:	bf 01       	movw	r22, r30
    136e:	cd 01       	movw	r24, r26
  }
  else
  {
	  drivecross(xj1,yj1,xj2,errg,0);
    1370:	e0 d8       	rcall	.-3648   	; 0x532 <drivecross>
    1372:	17 c0       	rjmp	.+46     	; 0x13a2 <gyro+0x204>
    1374:	40 91 48 02 	lds	r20, 0x0248	; 0x800248 <xj2>
    1378:	50 91 49 02 	lds	r21, 0x0249	; 0x800249 <xj2+0x1>
    137c:	00 e0       	ldi	r16, 0x00	; 0
    137e:	10 e0       	ldi	r17, 0x00	; 0
    1380:	9b 01       	movw	r18, r22
    1382:	bf 01       	movw	r22, r30
    1384:	cd 01       	movw	r24, r26
  }
}
    1386:	d5 d8       	rcall	.-3670   	; 0x532 <drivecross>
	  errg = errg*kpg;
  if(yj1 == 0 && xj1 ==0 && g!=jg)
  {
	  drivecross(0,0,pwmg,0,0);
  }
  else if(yj1 == 0 && xj1 ==0 && g==jg)
    1388:	0c c0       	rjmp	.+24     	; 0x13a2 <gyro+0x204>
    138a:	40 91 42 02 	lds	r20, 0x0242	; 0x800242 <g>
    138e:	50 91 43 02 	lds	r21, 0x0243	; 0x800243 <g+0x1>
    1392:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    1396:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    139a:	42 17       	cp	r20, r18
    139c:	53 07       	cpc	r21, r19
    139e:	51 f7       	brne	.-44     	; 0x1374 <gyro+0x1d6>
  }
  else
  {
	  drivecross(xj1,yj1,xj2,errg,0);
  }
}
    13a0:	c2 cf       	rjmp	.-124    	; 0x1326 <gyro+0x188>
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	bf 90       	pop	r11
    13b0:	af 90       	pop	r10
    13b2:	9f 90       	pop	r9
    13b4:	8f 90       	pop	r8
    13b6:	08 95       	ret

000013b8 <drivewheel_grip>:
void drivewheel_grip(long sp_vect, long l_lim, long h_lim)
{
    13b8:	8f 92       	push	r8
    13ba:	9f 92       	push	r9
    13bc:	af 92       	push	r10
    13be:	bf 92       	push	r11
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	49 01       	movw	r8, r18
    13ca:	5a 01       	movw	r10, r20
    UCSR3B=0b10011000;//enable RXEN TXEN
	UCSR3C=0b00000110;// UCSZ1 UCSZ0
}
long map_value(long in_value, long in_min, long in_max, long out_min, long out_max)
{	
	return (in_value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    13cc:	9b 01       	movw	r18, r22
    13ce:	ac 01       	movw	r20, r24
    13d0:	28 19       	sub	r18, r8
    13d2:	39 09       	sbc	r19, r9
    13d4:	4a 09       	sbc	r20, r10
    13d6:	5b 09       	sbc	r21, r11
    13d8:	a0 ef       	ldi	r26, 0xF0	; 240
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	56 d3       	rcall	.+1708   	; 0x1a8a <__muluhisi3>
    13de:	a8 01       	movw	r20, r16
    13e0:	97 01       	movw	r18, r14
    13e2:	28 19       	sub	r18, r8
    13e4:	39 09       	sbc	r19, r9
    13e6:	4a 09       	sbc	r20, r10
    13e8:	5b 09       	sbc	r21, r11
    13ea:	24 d3       	rcall	.+1608   	; 0x1a34 <__divmodsi4>
    13ec:	da 01       	movw	r26, r20
    13ee:	c9 01       	movw	r24, r18
    13f0:	88 57       	subi	r24, 0x78	; 120
    13f2:	91 09       	sbc	r25, r1
    13f4:	a1 09       	sbc	r26, r1
    13f6:	b1 09       	sbc	r27, r1
    13f8:	88 38       	cpi	r24, 0x88	; 136
    13fa:	2f ef       	ldi	r18, 0xFF	; 255
    13fc:	92 07       	cpc	r25, r18
    13fe:	a2 07       	cpc	r26, r18
    1400:	b2 07       	cpc	r27, r18
    1402:	24 f4       	brge	.+8      	; 0x140c <drivewheel_grip+0x54>
    1404:	88 e8       	ldi	r24, 0x88	; 136
    1406:	9f ef       	ldi	r25, 0xFF	; 255
    1408:	af ef       	ldi	r26, 0xFF	; 255
    140a:	bf ef       	ldi	r27, 0xFF	; 255
    140c:	89 37       	cpi	r24, 0x79	; 121
    140e:	91 05       	cpc	r25, r1
    1410:	a1 05       	cpc	r26, r1
    1412:	b1 05       	cpc	r27, r1
    1414:	24 f0       	brlt	.+8      	; 0x141e <drivewheel_grip+0x66>
    1416:	88 e7       	ldi	r24, 0x78	; 120
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	a0 e0       	ldi	r26, 0x00	; 0
    141c:	b0 e0       	ldi	r27, 0x00	; 0
}
void drivewheel_grip(long sp_vect, long l_lim, long h_lim)
{
	sp_vect=map_value(sp_vect,l_lim,h_lim,-120,120);
	sp_vect=limit_var(sp_vect,-120,120);
	if (sp_vect>5)
    141e:	86 30       	cpi	r24, 0x06	; 6
    1420:	91 05       	cpc	r25, r1
    1422:	a1 05       	cpc	r26, r1
    1424:	b1 05       	cpc	r27, r1
    1426:	1c f0       	brlt	.+6      	; 0x142e <drivewheel_grip+0x76>
	{
		PORTB&=(~(1<<PB0));
    1428:	28 98       	cbi	0x05, 0	; 5
		PORTB|=(1<<PB1);
    142a:	29 9a       	sbi	0x05, 1	; 5
    142c:	0a c0       	rjmp	.+20     	; 0x1442 <drivewheel_grip+0x8a>
	}
	else if (sp_vect<(-5))
    142e:	8b 3f       	cpi	r24, 0xFB	; 251
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	af 4f       	sbci	r26, 0xFF	; 255
    1434:	bf 4f       	sbci	r27, 0xFF	; 255
    1436:	1c f4       	brge	.+6      	; 0x143e <drivewheel_grip+0x86>
	{
		PORTB&=(~(1<<PB1));
    1438:	29 98       	cbi	0x05, 1	; 5
		PORTB|=(1<<PB0);
    143a:	28 9a       	sbi	0x05, 0	; 5
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <drivewheel_grip+0x8a>
	}
	else
	{
	PORTB&=(~(1<<PB1));
    143e:	29 98       	cbi	0x05, 1	; 5
	PORTB&=(~(1<<PB0));
    1440:	28 98       	cbi	0x05, 0	; 5
	}
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	bf 90       	pop	r11
    144c:	af 90       	pop	r10
    144e:	9f 90       	pop	r9
    1450:	8f 90       	pop	r8
    1452:	08 95       	ret

00001454 <while_wala>:
    {
		while_wala();
	}
}
void while_wala()
{
    1454:	ef 92       	push	r14
    1456:	ff 92       	push	r15
    1458:	0f 93       	push	r16
	main1();
    145a:	1f 93       	push	r17
	if(ip==1 && ip1 ==0)
    145c:	20 dc       	rcall	.-1984   	; 0xc9e <main1>
    145e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <ip>
    1462:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <ip+0x1>
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	71 f4       	brne	.+28     	; 0x1486 <while_wala+0x32>
    146a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <ip1>
    146e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <ip1+0x1>
	{
		gyro();
    1472:	89 2b       	or	r24, r25
    1474:	41 f4       	brne	.+16     	; 0x1486 <while_wala+0x32>
			PORTA &= (~(1<<PA1));
    1476:	93 de       	rcall	.-730    	; 0x119e <gyro>
			PORTA &= (~(1<<PA0));
    1478:	11 98       	cbi	0x02, 1	; 2
			PORTA &= (~(1<<PA2));
    147a:	10 98       	cbi	0x02, 0	; 2
			PORTA &= (~(1<<PA3));
    147c:	12 98       	cbi	0x02, 2	; 2
			PORTB &= (~(1<<PB0));
    147e:	13 98       	cbi	0x02, 3	; 2
			PORTB &= (~(1<<PB1));
    1480:	28 98       	cbi	0x05, 0	; 5
    1482:	29 98       	cbi	0x05, 1	; 5
	}
	else
	{
		drivecross(xj1,yj1,xj2,0,0);
    1484:	11 c0       	rjmp	.+34     	; 0x14a8 <while_wala+0x54>
    1486:	40 91 48 02 	lds	r20, 0x0248	; 0x800248 <xj2>
    148a:	50 91 49 02 	lds	r21, 0x0249	; 0x800249 <xj2+0x1>
    148e:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <yj1>
    1492:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <yj1+0x1>
    1496:	00 e0       	ldi	r16, 0x00	; 0
    1498:	10 e0       	ldi	r17, 0x00	; 0
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <xj1>
    14a2:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <xj1+0x1>
	}
	if(ip1 ==1)
    14a6:	45 d8       	rcall	.-3958   	; 0x532 <drivecross>
    14a8:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <ip1>
    14ac:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <ip1+0x1>
    14b0:	01 97       	sbiw	r24, 0x01	; 1
	{
		PORTC = 0x00;
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <while_wala+0x62>
	}
	if(rackmode==1)
    14b4:	18 b8       	out	0x08, r1	; 8
    14b6:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <rackmode>
    14ba:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <rackmode+0x1>
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	91 05       	cpc	r25, r1
	{
		drivewheel_r(yj2,-255,255);
    14c2:	a1 f4       	brne	.+40     	; 0x14ec <while_wala+0x98>
    14c4:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <yj2>
    14c8:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <yj2+0x1>
    14cc:	07 2e       	mov	r0, r23
    14ce:	00 0c       	add	r0, r0
    14d0:	88 0b       	sbc	r24, r24
    14d2:	99 0b       	sbc	r25, r25
    14d4:	e1 2c       	mov	r14, r1
    14d6:	f1 2c       	mov	r15, r1
    14d8:	87 01       	movw	r16, r14
    14da:	ea 94       	dec	r14
    14dc:	21 e0       	ldi	r18, 0x01	; 1
    14de:	3f ef       	ldi	r19, 0xFF	; 255
    14e0:	4f ef       	ldi	r20, 0xFF	; 255
    14e2:	5f ef       	ldi	r21, 0xFF	; 255
		PORTA &= (~(1<<PA1));
    14e4:	a6 dd       	rcall	.-1204   	; 0x1032 <drivewheel_r>
		PORTA &= (~(1<<PA0));
    14e6:	11 98       	cbi	0x02, 1	; 2
    14e8:	10 98       	cbi	0x02, 0	; 2
		// 	PORTA &= (~(1<<PA4));
		// 	PORTA &= (~(1<<PA5));
	}
	else if(rackmode ==0)
    14ea:	15 c0       	rjmp	.+42     	; 0x1516 <while_wala+0xc2>
    14ec:	89 2b       	or	r24, r25
	{
		drivewheel_rextra(xj2,-255,255);
    14ee:	99 f4       	brne	.+38     	; 0x1516 <while_wala+0xc2>
    14f0:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <xj2>
    14f4:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <xj2+0x1>
    14f8:	07 2e       	mov	r0, r23
    14fa:	00 0c       	add	r0, r0
    14fc:	88 0b       	sbc	r24, r24
    14fe:	99 0b       	sbc	r25, r25
    1500:	e1 2c       	mov	r14, r1
    1502:	f1 2c       	mov	r15, r1
    1504:	87 01       	movw	r16, r14
    1506:	ea 94       	dec	r14
    1508:	21 e0       	ldi	r18, 0x01	; 1
    150a:	3f ef       	ldi	r19, 0xFF	; 255
    150c:	4f ef       	ldi	r20, 0xFF	; 255
    150e:	5f ef       	ldi	r21, 0xFF	; 255
		PORTA &= (~(1<<PA2));
    1510:	eb dd       	rcall	.-1066   	; 0x10e8 <drivewheel_rextra>
		PORTA &= (~(1<<PA3));
    1512:	12 98       	cbi	0x02, 2	; 2
		//    PORTA &= (~(1<<PA4));
		//    PORTA &= (~(1<<PA5));
	}
	if(gripmode ==0)
    1514:	13 98       	cbi	0x02, 3	; 2
    1516:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <gripmode>
    151a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <gripmode+0x1>
    151e:	00 97       	sbiw	r24, 0x00	; 0
	{
		PORTA &= (~(1<<PA2));
    1520:	a1 f4       	brne	.+40     	; 0x154a <while_wala+0xf6>
		PORTA &= (~(1<<PA3));
    1522:	12 98       	cbi	0x02, 2	; 2
		drivewheel_grip(xj1,-255,255);
    1524:	13 98       	cbi	0x02, 3	; 2
    1526:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <xj1>
    152a:	70 91 4d 02 	lds	r23, 0x024D	; 0x80024d <xj1+0x1>
    152e:	07 2e       	mov	r0, r23
    1530:	00 0c       	add	r0, r0
    1532:	88 0b       	sbc	r24, r24
    1534:	99 0b       	sbc	r25, r25
    1536:	e1 2c       	mov	r14, r1
    1538:	f1 2c       	mov	r15, r1
    153a:	87 01       	movw	r16, r14
    153c:	ea 94       	dec	r14
    153e:	21 e0       	ldi	r18, 0x01	; 1
    1540:	3f ef       	ldi	r19, 0xFF	; 255
    1542:	4f ef       	ldi	r20, 0xFF	; 255
    1544:	5f ef       	ldi	r21, 0xFF	; 255
    1546:	38 df       	rcall	.-400    	; 0x13b8 <drivewheel_grip>
	}
	else if(gripmode == 1)
    1548:	04 c0       	rjmp	.+8      	; 0x1552 <while_wala+0xfe>
    154a:	01 97       	sbiw	r24, 0x01	; 1
	{
		PORTB &= (~(1<<PB0));
    154c:	11 f4       	brne	.+4      	; 0x1552 <while_wala+0xfe>
		PORTB &= (~(1<<PB1));
    154e:	28 98       	cbi	0x05, 0	; 5
	}
	PORTD = enmode_curr;
    1550:	29 98       	cbi	0x05, 1	; 5
    1552:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <enmode_curr>
}
    1556:	8b b9       	out	0x0b, r24	; 11
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	08 95       	ret

00001562 <main>:
int servomode=0,ip=0,ip1=0,enmode_prev = 1,enmode_curr=1,gyromode = 1000,gripmode = 0,gyro_rot = 0,rackmode=0,jg = 100;
long  DISP=0,prev=0,curr=0,TARG,X=0,P=0,I=0;
int i=1,en_flag =0;
int main(void)
{
	sei();
    1562:	78 94       	sei
	DDRJ |= (1<<PJ0)|(1<<PJ1);
    1564:	e4 e0       	ldi	r30, 0x04	; 4
    1566:	f1 e0       	ldi	r31, 0x01	; 1
    1568:	80 81       	ld	r24, Z
    156a:	83 60       	ori	r24, 0x03	; 3
    156c:	80 83       	st	Z, r24
	PORTJ |= (1<<PJ1)|(1<<PJ0);//bluetooth
    156e:	e5 e0       	ldi	r30, 0x05	; 5
    1570:	f1 e0       	ldi	r31, 0x01	; 1
    1572:	80 81       	ld	r24, Z
    1574:	83 60       	ori	r24, 0x03	; 3
    1576:	80 83       	st	Z, r24
	DDRE |= (1<<PE0)|(1<<PE1);
    1578:	8d b1       	in	r24, 0x0d	; 13
    157a:	83 60       	ori	r24, 0x03	; 3
    157c:	8d b9       	out	0x0d, r24	; 13
	PORTE |= (1<<PE0)|(1<<PE1);//gyro
    157e:	8e b1       	in	r24, 0x0e	; 14
    1580:	83 60       	ori	r24, 0x03	; 3
    1582:	8e b9       	out	0x0e, r24	; 14
	DDRC = 0xFF;//direction drive
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	87 b9       	out	0x07, r24	; 7
	DDRH = 0xFF;//pwm pw and rack
    1588:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRA = 0xFF;//direction of pw and rack
    158c:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF;//grip servo
    158e:	84 b9       	out	0x04, r24	; 4
	DDRL = 0xFF;//pwm drive
    1590:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
	PORTL = 0xFF;//high pwm of drive
    1594:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	DDRD = 0xFF;//led
    1598:	8a b9       	out	0x0a, r24	; 10
	DDRK = 0xFF;
    159a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	TCCR1B |= (1<<CS10) | (1<<WGM12) | (1<<WGM13) | (1<<CS11);
    159e:	e1 e8       	ldi	r30, 0x81	; 129
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	90 81       	ld	r25, Z
    15a4:	9b 61       	ori	r25, 0x1B	; 27
    15a6:	90 83       	st	Z, r25
	TCCR1A |=(1<<WGM11) | (1<<COM1A1);
    15a8:	e0 e8       	ldi	r30, 0x80	; 128
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	90 81       	ld	r25, Z
    15ae:	92 68       	ori	r25, 0x82	; 130
    15b0:	90 83       	st	Z, r25
	PORTB = 0xFF;  //pwm grip
    15b2:	85 b9       	out	0x05, r24	; 5
	TCCR4A |= (1<<COM4A1)|(1<<COM4B1)|(1<<COM4C1)|(1<<WGM40);
    15b4:	e0 ea       	ldi	r30, 0xA0	; 160
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	90 81       	ld	r25, Z
    15ba:	99 6a       	ori	r25, 0xA9	; 169
    15bc:	90 83       	st	Z, r25
	TCCR4B |= (1<<WGM42)|(1<<CS42)|(1<<CS40);//015E
    15be:	e1 ea       	ldi	r30, 0xA1	; 161
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	90 81       	ld	r25, Z
    15c4:	9d 60       	ori	r25, 0x0D	; 13
    15c6:	90 83       	st	Z, r25
	PORTH = 0xFF;//high pwm output
    15c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	DDRF  = 0x00;   //rotary encoder input
    15cc:	10 ba       	out	0x10, r1	; 16
	PORTB = 0xFF;   //servo port high
    15ce:	85 b9       	out	0x05, r24	; 5
    TCCR5A |= (1<<COM5B1)|(1<<COM5A1)|(1<<COM5C1)|(1<<WGM50);
    15d0:	e0 e2       	ldi	r30, 0x20	; 32
    15d2:	f1 e0       	ldi	r31, 0x01	; 1
    15d4:	80 81       	ld	r24, Z
    15d6:	89 6a       	ori	r24, 0xA9	; 169
    15d8:	80 83       	st	Z, r24
    TCCR5B |= (1<<CS52)|(1<<CS50)|(1<<WGM52);
    15da:	e1 e2       	ldi	r30, 0x21	; 33
    15dc:	f1 e0       	ldi	r31, 0x01	; 1
    15de:	80 81       	ld	r24, Z
    15e0:	8d 60       	ori	r24, 0x0D	; 13
    15e2:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2A1)|(0<<COM2A0)|(1<<WGM21)|(1<<WGM20)|(0<<COM2B1)|(0<<COM2B0);
    15e4:	e0 eb       	ldi	r30, 0xB0	; 176
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	83 68       	ori	r24, 0x83	; 131
    15ec:	80 83       	st	Z, r24
	TCCR2B |= (1<<WGM22)|(1<<CS22)|(1<<CS20)|(1<<CS21);
    15ee:	e1 eb       	ldi	r30, 0xB1	; 177
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	8f 60       	ori	r24, 0x0F	; 15
    15f6:	80 83       	st	Z, r24
	TCCR0A |= (1<<COM0A1)|(0<<COM0A0)|(1<<WGM01)|(1<<WGM00)|(0<<COM0B1)|(0<<COM0B0);
    15f8:	84 b5       	in	r24, 0x24	; 36
    15fa:	83 68       	ori	r24, 0x83	; 131
    15fc:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02)|(1<<CS02)|(1<<CS00)|(1<<CS01);
    15fe:	85 b5       	in	r24, 0x25	; 37
    1600:	8f 60       	ori	r24, 0x0F	; 15
    1602:	85 bd       	out	0x25, r24	; 37
	ADC_initiate();
    1604:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <ADC_initiate>
    usart_init();
    1608:	0e 94 c8 01 	call	0x390	; 0x390 <usart_init>
   usart_init1();
	ICR1=4607;
    160c:	f1 dc       	rcall	.-1566   	; 0xff0 <usart_init1>
    160e:	8f ef       	ldi	r24, 0xFF	; 255
    1610:	91 e1       	ldi	r25, 0x11	; 17
    1612:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
    1616:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 	OCR1A = 90;
    161a:	8a e5       	ldi	r24, 0x5A	; 90
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    1622:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1626:	2f ef       	ldi	r18, 0xFF	; 255
    1628:	8f e3       	ldi	r24, 0x3F	; 63
    162a:	92 e0       	ldi	r25, 0x02	; 2
    162c:	21 50       	subi	r18, 0x01	; 1
    162e:	80 40       	sbci	r24, 0x00	; 0
    1630:	90 40       	sbci	r25, 0x00	; 0
    1632:	e1 f7       	brne	.-8      	; 0x162c <main+0xca>
    1634:	00 c0       	rjmp	.+0      	; 0x1636 <main+0xd4>
 	_delay_ms(50);
	 PORTB = 0x00;
     prev = ADC_read(1);
    1636:	00 00       	nop
    1638:	15 b8       	out	0x05, r1	; 5
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	ac d8       	rcall	.-3752   	; 0x796 <ADC_read>
    163e:	a0 e0       	ldi	r26, 0x00	; 0
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <prev>
    1646:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <prev+0x1>
    164a:	a0 93 2e 02 	sts	0x022E, r26	; 0x80022e <prev+0x2>
    while (1) 
    {
		while_wala();
    164e:	b0 93 2f 02 	sts	0x022F, r27	; 0x80022f <prev+0x3>
    1652:	00 df       	rcall	.-512    	; 0x1454 <while_wala>
    1654:	fe cf       	rjmp	.-4      	; 0x1652 <main+0xf0>

00001656 <__subsf3>:
    1656:	50 58       	subi	r21, 0x80	; 128

00001658 <__addsf3>:
    1658:	bb 27       	eor	r27, r27
    165a:	aa 27       	eor	r26, r26
    165c:	0e d0       	rcall	.+28     	; 0x167a <__addsf3x>
    165e:	4d c1       	rjmp	.+666    	; 0x18fa <__fp_round>
    1660:	3e d1       	rcall	.+636    	; 0x18de <__fp_pscA>
    1662:	30 f0       	brcs	.+12     	; 0x1670 <__addsf3+0x18>
    1664:	43 d1       	rcall	.+646    	; 0x18ec <__fp_pscB>
    1666:	20 f0       	brcs	.+8      	; 0x1670 <__addsf3+0x18>
    1668:	31 f4       	brne	.+12     	; 0x1676 <__addsf3+0x1e>
    166a:	9f 3f       	cpi	r25, 0xFF	; 255
    166c:	11 f4       	brne	.+4      	; 0x1672 <__addsf3+0x1a>
    166e:	1e f4       	brtc	.+6      	; 0x1676 <__addsf3+0x1e>
    1670:	33 c1       	rjmp	.+614    	; 0x18d8 <__fp_nan>
    1672:	0e f4       	brtc	.+2      	; 0x1676 <__addsf3+0x1e>
    1674:	e0 95       	com	r30
    1676:	e7 fb       	bst	r30, 7
    1678:	29 c1       	rjmp	.+594    	; 0x18cc <__fp_inf>

0000167a <__addsf3x>:
    167a:	e9 2f       	mov	r30, r25
    167c:	4f d1       	rcall	.+670    	; 0x191c <__fp_split3>
    167e:	80 f3       	brcs	.-32     	; 0x1660 <__addsf3+0x8>
    1680:	ba 17       	cp	r27, r26
    1682:	62 07       	cpc	r22, r18
    1684:	73 07       	cpc	r23, r19
    1686:	84 07       	cpc	r24, r20
    1688:	95 07       	cpc	r25, r21
    168a:	18 f0       	brcs	.+6      	; 0x1692 <__addsf3x+0x18>
    168c:	71 f4       	brne	.+28     	; 0x16aa <__addsf3x+0x30>
    168e:	9e f5       	brtc	.+102    	; 0x16f6 <__addsf3x+0x7c>
    1690:	67 c1       	rjmp	.+718    	; 0x1960 <__fp_zero>
    1692:	0e f4       	brtc	.+2      	; 0x1696 <__addsf3x+0x1c>
    1694:	e0 95       	com	r30
    1696:	0b 2e       	mov	r0, r27
    1698:	ba 2f       	mov	r27, r26
    169a:	a0 2d       	mov	r26, r0
    169c:	0b 01       	movw	r0, r22
    169e:	b9 01       	movw	r22, r18
    16a0:	90 01       	movw	r18, r0
    16a2:	0c 01       	movw	r0, r24
    16a4:	ca 01       	movw	r24, r20
    16a6:	a0 01       	movw	r20, r0
    16a8:	11 24       	eor	r1, r1
    16aa:	ff 27       	eor	r31, r31
    16ac:	59 1b       	sub	r21, r25
    16ae:	99 f0       	breq	.+38     	; 0x16d6 <__addsf3x+0x5c>
    16b0:	59 3f       	cpi	r21, 0xF9	; 249
    16b2:	50 f4       	brcc	.+20     	; 0x16c8 <__addsf3x+0x4e>
    16b4:	50 3e       	cpi	r21, 0xE0	; 224
    16b6:	68 f1       	brcs	.+90     	; 0x1712 <__addsf3x+0x98>
    16b8:	1a 16       	cp	r1, r26
    16ba:	f0 40       	sbci	r31, 0x00	; 0
    16bc:	a2 2f       	mov	r26, r18
    16be:	23 2f       	mov	r18, r19
    16c0:	34 2f       	mov	r19, r20
    16c2:	44 27       	eor	r20, r20
    16c4:	58 5f       	subi	r21, 0xF8	; 248
    16c6:	f3 cf       	rjmp	.-26     	; 0x16ae <__addsf3x+0x34>
    16c8:	46 95       	lsr	r20
    16ca:	37 95       	ror	r19
    16cc:	27 95       	ror	r18
    16ce:	a7 95       	ror	r26
    16d0:	f0 40       	sbci	r31, 0x00	; 0
    16d2:	53 95       	inc	r21
    16d4:	c9 f7       	brne	.-14     	; 0x16c8 <__addsf3x+0x4e>
    16d6:	7e f4       	brtc	.+30     	; 0x16f6 <__addsf3x+0x7c>
    16d8:	1f 16       	cp	r1, r31
    16da:	ba 0b       	sbc	r27, r26
    16dc:	62 0b       	sbc	r22, r18
    16de:	73 0b       	sbc	r23, r19
    16e0:	84 0b       	sbc	r24, r20
    16e2:	ba f0       	brmi	.+46     	; 0x1712 <__addsf3x+0x98>
    16e4:	91 50       	subi	r25, 0x01	; 1
    16e6:	a1 f0       	breq	.+40     	; 0x1710 <__addsf3x+0x96>
    16e8:	ff 0f       	add	r31, r31
    16ea:	bb 1f       	adc	r27, r27
    16ec:	66 1f       	adc	r22, r22
    16ee:	77 1f       	adc	r23, r23
    16f0:	88 1f       	adc	r24, r24
    16f2:	c2 f7       	brpl	.-16     	; 0x16e4 <__addsf3x+0x6a>
    16f4:	0e c0       	rjmp	.+28     	; 0x1712 <__addsf3x+0x98>
    16f6:	ba 0f       	add	r27, r26
    16f8:	62 1f       	adc	r22, r18
    16fa:	73 1f       	adc	r23, r19
    16fc:	84 1f       	adc	r24, r20
    16fe:	48 f4       	brcc	.+18     	; 0x1712 <__addsf3x+0x98>
    1700:	87 95       	ror	r24
    1702:	77 95       	ror	r23
    1704:	67 95       	ror	r22
    1706:	b7 95       	ror	r27
    1708:	f7 95       	ror	r31
    170a:	9e 3f       	cpi	r25, 0xFE	; 254
    170c:	08 f0       	brcs	.+2      	; 0x1710 <__addsf3x+0x96>
    170e:	b3 cf       	rjmp	.-154    	; 0x1676 <__addsf3+0x1e>
    1710:	93 95       	inc	r25
    1712:	88 0f       	add	r24, r24
    1714:	08 f0       	brcs	.+2      	; 0x1718 <__addsf3x+0x9e>
    1716:	99 27       	eor	r25, r25
    1718:	ee 0f       	add	r30, r30
    171a:	97 95       	ror	r25
    171c:	87 95       	ror	r24
    171e:	08 95       	ret

00001720 <__divsf3>:
    1720:	0c d0       	rcall	.+24     	; 0x173a <__divsf3x>
    1722:	eb c0       	rjmp	.+470    	; 0x18fa <__fp_round>
    1724:	e3 d0       	rcall	.+454    	; 0x18ec <__fp_pscB>
    1726:	40 f0       	brcs	.+16     	; 0x1738 <__divsf3+0x18>
    1728:	da d0       	rcall	.+436    	; 0x18de <__fp_pscA>
    172a:	30 f0       	brcs	.+12     	; 0x1738 <__divsf3+0x18>
    172c:	21 f4       	brne	.+8      	; 0x1736 <__divsf3+0x16>
    172e:	5f 3f       	cpi	r21, 0xFF	; 255
    1730:	19 f0       	breq	.+6      	; 0x1738 <__divsf3+0x18>
    1732:	cc c0       	rjmp	.+408    	; 0x18cc <__fp_inf>
    1734:	51 11       	cpse	r21, r1
    1736:	15 c1       	rjmp	.+554    	; 0x1962 <__fp_szero>
    1738:	cf c0       	rjmp	.+414    	; 0x18d8 <__fp_nan>

0000173a <__divsf3x>:
    173a:	f0 d0       	rcall	.+480    	; 0x191c <__fp_split3>
    173c:	98 f3       	brcs	.-26     	; 0x1724 <__divsf3+0x4>

0000173e <__divsf3_pse>:
    173e:	99 23       	and	r25, r25
    1740:	c9 f3       	breq	.-14     	; 0x1734 <__divsf3+0x14>
    1742:	55 23       	and	r21, r21
    1744:	b1 f3       	breq	.-20     	; 0x1732 <__divsf3+0x12>
    1746:	95 1b       	sub	r25, r21
    1748:	55 0b       	sbc	r21, r21
    174a:	bb 27       	eor	r27, r27
    174c:	aa 27       	eor	r26, r26
    174e:	62 17       	cp	r22, r18
    1750:	73 07       	cpc	r23, r19
    1752:	84 07       	cpc	r24, r20
    1754:	38 f0       	brcs	.+14     	; 0x1764 <__divsf3_pse+0x26>
    1756:	9f 5f       	subi	r25, 0xFF	; 255
    1758:	5f 4f       	sbci	r21, 0xFF	; 255
    175a:	22 0f       	add	r18, r18
    175c:	33 1f       	adc	r19, r19
    175e:	44 1f       	adc	r20, r20
    1760:	aa 1f       	adc	r26, r26
    1762:	a9 f3       	breq	.-22     	; 0x174e <__divsf3_pse+0x10>
    1764:	33 d0       	rcall	.+102    	; 0x17cc <__divsf3_pse+0x8e>
    1766:	0e 2e       	mov	r0, r30
    1768:	3a f0       	brmi	.+14     	; 0x1778 <__divsf3_pse+0x3a>
    176a:	e0 e8       	ldi	r30, 0x80	; 128
    176c:	30 d0       	rcall	.+96     	; 0x17ce <__divsf3_pse+0x90>
    176e:	91 50       	subi	r25, 0x01	; 1
    1770:	50 40       	sbci	r21, 0x00	; 0
    1772:	e6 95       	lsr	r30
    1774:	00 1c       	adc	r0, r0
    1776:	ca f7       	brpl	.-14     	; 0x176a <__divsf3_pse+0x2c>
    1778:	29 d0       	rcall	.+82     	; 0x17cc <__divsf3_pse+0x8e>
    177a:	fe 2f       	mov	r31, r30
    177c:	27 d0       	rcall	.+78     	; 0x17cc <__divsf3_pse+0x8e>
    177e:	66 0f       	add	r22, r22
    1780:	77 1f       	adc	r23, r23
    1782:	88 1f       	adc	r24, r24
    1784:	bb 1f       	adc	r27, r27
    1786:	26 17       	cp	r18, r22
    1788:	37 07       	cpc	r19, r23
    178a:	48 07       	cpc	r20, r24
    178c:	ab 07       	cpc	r26, r27
    178e:	b0 e8       	ldi	r27, 0x80	; 128
    1790:	09 f0       	breq	.+2      	; 0x1794 <__divsf3_pse+0x56>
    1792:	bb 0b       	sbc	r27, r27
    1794:	80 2d       	mov	r24, r0
    1796:	bf 01       	movw	r22, r30
    1798:	ff 27       	eor	r31, r31
    179a:	93 58       	subi	r25, 0x83	; 131
    179c:	5f 4f       	sbci	r21, 0xFF	; 255
    179e:	2a f0       	brmi	.+10     	; 0x17aa <__divsf3_pse+0x6c>
    17a0:	9e 3f       	cpi	r25, 0xFE	; 254
    17a2:	51 05       	cpc	r21, r1
    17a4:	68 f0       	brcs	.+26     	; 0x17c0 <__divsf3_pse+0x82>
    17a6:	92 c0       	rjmp	.+292    	; 0x18cc <__fp_inf>
    17a8:	dc c0       	rjmp	.+440    	; 0x1962 <__fp_szero>
    17aa:	5f 3f       	cpi	r21, 0xFF	; 255
    17ac:	ec f3       	brlt	.-6      	; 0x17a8 <__divsf3_pse+0x6a>
    17ae:	98 3e       	cpi	r25, 0xE8	; 232
    17b0:	dc f3       	brlt	.-10     	; 0x17a8 <__divsf3_pse+0x6a>
    17b2:	86 95       	lsr	r24
    17b4:	77 95       	ror	r23
    17b6:	67 95       	ror	r22
    17b8:	b7 95       	ror	r27
    17ba:	f7 95       	ror	r31
    17bc:	9f 5f       	subi	r25, 0xFF	; 255
    17be:	c9 f7       	brne	.-14     	; 0x17b2 <__divsf3_pse+0x74>
    17c0:	88 0f       	add	r24, r24
    17c2:	91 1d       	adc	r25, r1
    17c4:	96 95       	lsr	r25
    17c6:	87 95       	ror	r24
    17c8:	97 f9       	bld	r25, 7
    17ca:	08 95       	ret
    17cc:	e1 e0       	ldi	r30, 0x01	; 1
    17ce:	66 0f       	add	r22, r22
    17d0:	77 1f       	adc	r23, r23
    17d2:	88 1f       	adc	r24, r24
    17d4:	bb 1f       	adc	r27, r27
    17d6:	62 17       	cp	r22, r18
    17d8:	73 07       	cpc	r23, r19
    17da:	84 07       	cpc	r24, r20
    17dc:	ba 07       	cpc	r27, r26
    17de:	20 f0       	brcs	.+8      	; 0x17e8 <__divsf3_pse+0xaa>
    17e0:	62 1b       	sub	r22, r18
    17e2:	73 0b       	sbc	r23, r19
    17e4:	84 0b       	sbc	r24, r20
    17e6:	ba 0b       	sbc	r27, r26
    17e8:	ee 1f       	adc	r30, r30
    17ea:	88 f7       	brcc	.-30     	; 0x17ce <__divsf3_pse+0x90>
    17ec:	e0 95       	com	r30
    17ee:	08 95       	ret

000017f0 <__fixsfsi>:
    17f0:	04 d0       	rcall	.+8      	; 0x17fa <__fixunssfsi>
    17f2:	68 94       	set
    17f4:	b1 11       	cpse	r27, r1
    17f6:	b5 c0       	rjmp	.+362    	; 0x1962 <__fp_szero>
    17f8:	08 95       	ret

000017fa <__fixunssfsi>:
    17fa:	98 d0       	rcall	.+304    	; 0x192c <__fp_splitA>
    17fc:	88 f0       	brcs	.+34     	; 0x1820 <__fixunssfsi+0x26>
    17fe:	9f 57       	subi	r25, 0x7F	; 127
    1800:	90 f0       	brcs	.+36     	; 0x1826 <__fixunssfsi+0x2c>
    1802:	b9 2f       	mov	r27, r25
    1804:	99 27       	eor	r25, r25
    1806:	b7 51       	subi	r27, 0x17	; 23
    1808:	a0 f0       	brcs	.+40     	; 0x1832 <__fixunssfsi+0x38>
    180a:	d1 f0       	breq	.+52     	; 0x1840 <__fixunssfsi+0x46>
    180c:	66 0f       	add	r22, r22
    180e:	77 1f       	adc	r23, r23
    1810:	88 1f       	adc	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	1a f0       	brmi	.+6      	; 0x181c <__fixunssfsi+0x22>
    1816:	ba 95       	dec	r27
    1818:	c9 f7       	brne	.-14     	; 0x180c <__fixunssfsi+0x12>
    181a:	12 c0       	rjmp	.+36     	; 0x1840 <__fixunssfsi+0x46>
    181c:	b1 30       	cpi	r27, 0x01	; 1
    181e:	81 f0       	breq	.+32     	; 0x1840 <__fixunssfsi+0x46>
    1820:	9f d0       	rcall	.+318    	; 0x1960 <__fp_zero>
    1822:	b1 e0       	ldi	r27, 0x01	; 1
    1824:	08 95       	ret
    1826:	9c c0       	rjmp	.+312    	; 0x1960 <__fp_zero>
    1828:	67 2f       	mov	r22, r23
    182a:	78 2f       	mov	r23, r24
    182c:	88 27       	eor	r24, r24
    182e:	b8 5f       	subi	r27, 0xF8	; 248
    1830:	39 f0       	breq	.+14     	; 0x1840 <__fixunssfsi+0x46>
    1832:	b9 3f       	cpi	r27, 0xF9	; 249
    1834:	cc f3       	brlt	.-14     	; 0x1828 <__fixunssfsi+0x2e>
    1836:	86 95       	lsr	r24
    1838:	77 95       	ror	r23
    183a:	67 95       	ror	r22
    183c:	b3 95       	inc	r27
    183e:	d9 f7       	brne	.-10     	; 0x1836 <__fixunssfsi+0x3c>
    1840:	3e f4       	brtc	.+14     	; 0x1850 <__fixunssfsi+0x56>
    1842:	90 95       	com	r25
    1844:	80 95       	com	r24
    1846:	70 95       	com	r23
    1848:	61 95       	neg	r22
    184a:	7f 4f       	sbci	r23, 0xFF	; 255
    184c:	8f 4f       	sbci	r24, 0xFF	; 255
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	08 95       	ret

00001852 <__floatunsisf>:
    1852:	e8 94       	clt
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <__floatsisf+0x12>

00001856 <__floatsisf>:
    1856:	97 fb       	bst	r25, 7
    1858:	3e f4       	brtc	.+14     	; 0x1868 <__floatsisf+0x12>
    185a:	90 95       	com	r25
    185c:	80 95       	com	r24
    185e:	70 95       	com	r23
    1860:	61 95       	neg	r22
    1862:	7f 4f       	sbci	r23, 0xFF	; 255
    1864:	8f 4f       	sbci	r24, 0xFF	; 255
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	99 23       	and	r25, r25
    186a:	a9 f0       	breq	.+42     	; 0x1896 <__floatsisf+0x40>
    186c:	f9 2f       	mov	r31, r25
    186e:	96 e9       	ldi	r25, 0x96	; 150
    1870:	bb 27       	eor	r27, r27
    1872:	93 95       	inc	r25
    1874:	f6 95       	lsr	r31
    1876:	87 95       	ror	r24
    1878:	77 95       	ror	r23
    187a:	67 95       	ror	r22
    187c:	b7 95       	ror	r27
    187e:	f1 11       	cpse	r31, r1
    1880:	f8 cf       	rjmp	.-16     	; 0x1872 <__floatsisf+0x1c>
    1882:	fa f4       	brpl	.+62     	; 0x18c2 <__floatsisf+0x6c>
    1884:	bb 0f       	add	r27, r27
    1886:	11 f4       	brne	.+4      	; 0x188c <__floatsisf+0x36>
    1888:	60 ff       	sbrs	r22, 0
    188a:	1b c0       	rjmp	.+54     	; 0x18c2 <__floatsisf+0x6c>
    188c:	6f 5f       	subi	r22, 0xFF	; 255
    188e:	7f 4f       	sbci	r23, 0xFF	; 255
    1890:	8f 4f       	sbci	r24, 0xFF	; 255
    1892:	9f 4f       	sbci	r25, 0xFF	; 255
    1894:	16 c0       	rjmp	.+44     	; 0x18c2 <__floatsisf+0x6c>
    1896:	88 23       	and	r24, r24
    1898:	11 f0       	breq	.+4      	; 0x189e <__floatsisf+0x48>
    189a:	96 e9       	ldi	r25, 0x96	; 150
    189c:	11 c0       	rjmp	.+34     	; 0x18c0 <__floatsisf+0x6a>
    189e:	77 23       	and	r23, r23
    18a0:	21 f0       	breq	.+8      	; 0x18aa <__floatsisf+0x54>
    18a2:	9e e8       	ldi	r25, 0x8E	; 142
    18a4:	87 2f       	mov	r24, r23
    18a6:	76 2f       	mov	r23, r22
    18a8:	05 c0       	rjmp	.+10     	; 0x18b4 <__floatsisf+0x5e>
    18aa:	66 23       	and	r22, r22
    18ac:	71 f0       	breq	.+28     	; 0x18ca <__floatsisf+0x74>
    18ae:	96 e8       	ldi	r25, 0x86	; 134
    18b0:	86 2f       	mov	r24, r22
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	2a f0       	brmi	.+10     	; 0x18c2 <__floatsisf+0x6c>
    18b8:	9a 95       	dec	r25
    18ba:	66 0f       	add	r22, r22
    18bc:	77 1f       	adc	r23, r23
    18be:	88 1f       	adc	r24, r24
    18c0:	da f7       	brpl	.-10     	; 0x18b8 <__floatsisf+0x62>
    18c2:	88 0f       	add	r24, r24
    18c4:	96 95       	lsr	r25
    18c6:	87 95       	ror	r24
    18c8:	97 f9       	bld	r25, 7
    18ca:	08 95       	ret

000018cc <__fp_inf>:
    18cc:	97 f9       	bld	r25, 7
    18ce:	9f 67       	ori	r25, 0x7F	; 127
    18d0:	80 e8       	ldi	r24, 0x80	; 128
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	08 95       	ret

000018d8 <__fp_nan>:
    18d8:	9f ef       	ldi	r25, 0xFF	; 255
    18da:	80 ec       	ldi	r24, 0xC0	; 192
    18dc:	08 95       	ret

000018de <__fp_pscA>:
    18de:	00 24       	eor	r0, r0
    18e0:	0a 94       	dec	r0
    18e2:	16 16       	cp	r1, r22
    18e4:	17 06       	cpc	r1, r23
    18e6:	18 06       	cpc	r1, r24
    18e8:	09 06       	cpc	r0, r25
    18ea:	08 95       	ret

000018ec <__fp_pscB>:
    18ec:	00 24       	eor	r0, r0
    18ee:	0a 94       	dec	r0
    18f0:	12 16       	cp	r1, r18
    18f2:	13 06       	cpc	r1, r19
    18f4:	14 06       	cpc	r1, r20
    18f6:	05 06       	cpc	r0, r21
    18f8:	08 95       	ret

000018fa <__fp_round>:
    18fa:	09 2e       	mov	r0, r25
    18fc:	03 94       	inc	r0
    18fe:	00 0c       	add	r0, r0
    1900:	11 f4       	brne	.+4      	; 0x1906 <__fp_round+0xc>
    1902:	88 23       	and	r24, r24
    1904:	52 f0       	brmi	.+20     	; 0x191a <__fp_round+0x20>
    1906:	bb 0f       	add	r27, r27
    1908:	40 f4       	brcc	.+16     	; 0x191a <__fp_round+0x20>
    190a:	bf 2b       	or	r27, r31
    190c:	11 f4       	brne	.+4      	; 0x1912 <__fp_round+0x18>
    190e:	60 ff       	sbrs	r22, 0
    1910:	04 c0       	rjmp	.+8      	; 0x191a <__fp_round+0x20>
    1912:	6f 5f       	subi	r22, 0xFF	; 255
    1914:	7f 4f       	sbci	r23, 0xFF	; 255
    1916:	8f 4f       	sbci	r24, 0xFF	; 255
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	08 95       	ret

0000191c <__fp_split3>:
    191c:	57 fd       	sbrc	r21, 7
    191e:	90 58       	subi	r25, 0x80	; 128
    1920:	44 0f       	add	r20, r20
    1922:	55 1f       	adc	r21, r21
    1924:	59 f0       	breq	.+22     	; 0x193c <__fp_splitA+0x10>
    1926:	5f 3f       	cpi	r21, 0xFF	; 255
    1928:	71 f0       	breq	.+28     	; 0x1946 <__fp_splitA+0x1a>
    192a:	47 95       	ror	r20

0000192c <__fp_splitA>:
    192c:	88 0f       	add	r24, r24
    192e:	97 fb       	bst	r25, 7
    1930:	99 1f       	adc	r25, r25
    1932:	61 f0       	breq	.+24     	; 0x194c <__fp_splitA+0x20>
    1934:	9f 3f       	cpi	r25, 0xFF	; 255
    1936:	79 f0       	breq	.+30     	; 0x1956 <__fp_splitA+0x2a>
    1938:	87 95       	ror	r24
    193a:	08 95       	ret
    193c:	12 16       	cp	r1, r18
    193e:	13 06       	cpc	r1, r19
    1940:	14 06       	cpc	r1, r20
    1942:	55 1f       	adc	r21, r21
    1944:	f2 cf       	rjmp	.-28     	; 0x192a <__fp_split3+0xe>
    1946:	46 95       	lsr	r20
    1948:	f1 df       	rcall	.-30     	; 0x192c <__fp_splitA>
    194a:	08 c0       	rjmp	.+16     	; 0x195c <__fp_splitA+0x30>
    194c:	16 16       	cp	r1, r22
    194e:	17 06       	cpc	r1, r23
    1950:	18 06       	cpc	r1, r24
    1952:	99 1f       	adc	r25, r25
    1954:	f1 cf       	rjmp	.-30     	; 0x1938 <__fp_splitA+0xc>
    1956:	86 95       	lsr	r24
    1958:	71 05       	cpc	r23, r1
    195a:	61 05       	cpc	r22, r1
    195c:	08 94       	sec
    195e:	08 95       	ret

00001960 <__fp_zero>:
    1960:	e8 94       	clt

00001962 <__fp_szero>:
    1962:	bb 27       	eor	r27, r27
    1964:	66 27       	eor	r22, r22
    1966:	77 27       	eor	r23, r23
    1968:	cb 01       	movw	r24, r22
    196a:	97 f9       	bld	r25, 7
    196c:	08 95       	ret

0000196e <__mulsf3>:
    196e:	0b d0       	rcall	.+22     	; 0x1986 <__mulsf3x>
    1970:	c4 cf       	rjmp	.-120    	; 0x18fa <__fp_round>
    1972:	b5 df       	rcall	.-150    	; 0x18de <__fp_pscA>
    1974:	28 f0       	brcs	.+10     	; 0x1980 <__mulsf3+0x12>
    1976:	ba df       	rcall	.-140    	; 0x18ec <__fp_pscB>
    1978:	18 f0       	brcs	.+6      	; 0x1980 <__mulsf3+0x12>
    197a:	95 23       	and	r25, r21
    197c:	09 f0       	breq	.+2      	; 0x1980 <__mulsf3+0x12>
    197e:	a6 cf       	rjmp	.-180    	; 0x18cc <__fp_inf>
    1980:	ab cf       	rjmp	.-170    	; 0x18d8 <__fp_nan>
    1982:	11 24       	eor	r1, r1
    1984:	ee cf       	rjmp	.-36     	; 0x1962 <__fp_szero>

00001986 <__mulsf3x>:
    1986:	ca df       	rcall	.-108    	; 0x191c <__fp_split3>
    1988:	a0 f3       	brcs	.-24     	; 0x1972 <__mulsf3+0x4>

0000198a <__mulsf3_pse>:
    198a:	95 9f       	mul	r25, r21
    198c:	d1 f3       	breq	.-12     	; 0x1982 <__mulsf3+0x14>
    198e:	95 0f       	add	r25, r21
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	55 1f       	adc	r21, r21
    1994:	62 9f       	mul	r22, r18
    1996:	f0 01       	movw	r30, r0
    1998:	72 9f       	mul	r23, r18
    199a:	bb 27       	eor	r27, r27
    199c:	f0 0d       	add	r31, r0
    199e:	b1 1d       	adc	r27, r1
    19a0:	63 9f       	mul	r22, r19
    19a2:	aa 27       	eor	r26, r26
    19a4:	f0 0d       	add	r31, r0
    19a6:	b1 1d       	adc	r27, r1
    19a8:	aa 1f       	adc	r26, r26
    19aa:	64 9f       	mul	r22, r20
    19ac:	66 27       	eor	r22, r22
    19ae:	b0 0d       	add	r27, r0
    19b0:	a1 1d       	adc	r26, r1
    19b2:	66 1f       	adc	r22, r22
    19b4:	82 9f       	mul	r24, r18
    19b6:	22 27       	eor	r18, r18
    19b8:	b0 0d       	add	r27, r0
    19ba:	a1 1d       	adc	r26, r1
    19bc:	62 1f       	adc	r22, r18
    19be:	73 9f       	mul	r23, r19
    19c0:	b0 0d       	add	r27, r0
    19c2:	a1 1d       	adc	r26, r1
    19c4:	62 1f       	adc	r22, r18
    19c6:	83 9f       	mul	r24, r19
    19c8:	a0 0d       	add	r26, r0
    19ca:	61 1d       	adc	r22, r1
    19cc:	22 1f       	adc	r18, r18
    19ce:	74 9f       	mul	r23, r20
    19d0:	33 27       	eor	r19, r19
    19d2:	a0 0d       	add	r26, r0
    19d4:	61 1d       	adc	r22, r1
    19d6:	23 1f       	adc	r18, r19
    19d8:	84 9f       	mul	r24, r20
    19da:	60 0d       	add	r22, r0
    19dc:	21 1d       	adc	r18, r1
    19de:	82 2f       	mov	r24, r18
    19e0:	76 2f       	mov	r23, r22
    19e2:	6a 2f       	mov	r22, r26
    19e4:	11 24       	eor	r1, r1
    19e6:	9f 57       	subi	r25, 0x7F	; 127
    19e8:	50 40       	sbci	r21, 0x00	; 0
    19ea:	8a f0       	brmi	.+34     	; 0x1a0e <__mulsf3_pse+0x84>
    19ec:	e1 f0       	breq	.+56     	; 0x1a26 <__mulsf3_pse+0x9c>
    19ee:	88 23       	and	r24, r24
    19f0:	4a f0       	brmi	.+18     	; 0x1a04 <__mulsf3_pse+0x7a>
    19f2:	ee 0f       	add	r30, r30
    19f4:	ff 1f       	adc	r31, r31
    19f6:	bb 1f       	adc	r27, r27
    19f8:	66 1f       	adc	r22, r22
    19fa:	77 1f       	adc	r23, r23
    19fc:	88 1f       	adc	r24, r24
    19fe:	91 50       	subi	r25, 0x01	; 1
    1a00:	50 40       	sbci	r21, 0x00	; 0
    1a02:	a9 f7       	brne	.-22     	; 0x19ee <__mulsf3_pse+0x64>
    1a04:	9e 3f       	cpi	r25, 0xFE	; 254
    1a06:	51 05       	cpc	r21, r1
    1a08:	70 f0       	brcs	.+28     	; 0x1a26 <__mulsf3_pse+0x9c>
    1a0a:	60 cf       	rjmp	.-320    	; 0x18cc <__fp_inf>
    1a0c:	aa cf       	rjmp	.-172    	; 0x1962 <__fp_szero>
    1a0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a10:	ec f3       	brlt	.-6      	; 0x1a0c <__mulsf3_pse+0x82>
    1a12:	98 3e       	cpi	r25, 0xE8	; 232
    1a14:	dc f3       	brlt	.-10     	; 0x1a0c <__mulsf3_pse+0x82>
    1a16:	86 95       	lsr	r24
    1a18:	77 95       	ror	r23
    1a1a:	67 95       	ror	r22
    1a1c:	b7 95       	ror	r27
    1a1e:	f7 95       	ror	r31
    1a20:	e7 95       	ror	r30
    1a22:	9f 5f       	subi	r25, 0xFF	; 255
    1a24:	c1 f7       	brne	.-16     	; 0x1a16 <__mulsf3_pse+0x8c>
    1a26:	fe 2b       	or	r31, r30
    1a28:	88 0f       	add	r24, r24
    1a2a:	91 1d       	adc	r25, r1
    1a2c:	96 95       	lsr	r25
    1a2e:	87 95       	ror	r24
    1a30:	97 f9       	bld	r25, 7
    1a32:	08 95       	ret

00001a34 <__divmodsi4>:
    1a34:	05 2e       	mov	r0, r21
    1a36:	97 fb       	bst	r25, 7
    1a38:	16 f4       	brtc	.+4      	; 0x1a3e <__divmodsi4+0xa>
    1a3a:	00 94       	com	r0
    1a3c:	0f d0       	rcall	.+30     	; 0x1a5c <__negsi2>
    1a3e:	57 fd       	sbrc	r21, 7
    1a40:	05 d0       	rcall	.+10     	; 0x1a4c <__divmodsi4_neg2>
    1a42:	2d d0       	rcall	.+90     	; 0x1a9e <__udivmodsi4>
    1a44:	07 fc       	sbrc	r0, 7
    1a46:	02 d0       	rcall	.+4      	; 0x1a4c <__divmodsi4_neg2>
    1a48:	46 f4       	brtc	.+16     	; 0x1a5a <__divmodsi4_exit>
    1a4a:	08 c0       	rjmp	.+16     	; 0x1a5c <__negsi2>

00001a4c <__divmodsi4_neg2>:
    1a4c:	50 95       	com	r21
    1a4e:	40 95       	com	r20
    1a50:	30 95       	com	r19
    1a52:	21 95       	neg	r18
    1a54:	3f 4f       	sbci	r19, 0xFF	; 255
    1a56:	4f 4f       	sbci	r20, 0xFF	; 255
    1a58:	5f 4f       	sbci	r21, 0xFF	; 255

00001a5a <__divmodsi4_exit>:
    1a5a:	08 95       	ret

00001a5c <__negsi2>:
    1a5c:	90 95       	com	r25
    1a5e:	80 95       	com	r24
    1a60:	70 95       	com	r23
    1a62:	61 95       	neg	r22
    1a64:	7f 4f       	sbci	r23, 0xFF	; 255
    1a66:	8f 4f       	sbci	r24, 0xFF	; 255
    1a68:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6a:	08 95       	ret

00001a6c <__umulhisi3>:
    1a6c:	a2 9f       	mul	r26, r18
    1a6e:	b0 01       	movw	r22, r0
    1a70:	b3 9f       	mul	r27, r19
    1a72:	c0 01       	movw	r24, r0
    1a74:	a3 9f       	mul	r26, r19
    1a76:	70 0d       	add	r23, r0
    1a78:	81 1d       	adc	r24, r1
    1a7a:	11 24       	eor	r1, r1
    1a7c:	91 1d       	adc	r25, r1
    1a7e:	b2 9f       	mul	r27, r18
    1a80:	70 0d       	add	r23, r0
    1a82:	81 1d       	adc	r24, r1
    1a84:	11 24       	eor	r1, r1
    1a86:	91 1d       	adc	r25, r1
    1a88:	08 95       	ret

00001a8a <__muluhisi3>:
    1a8a:	f0 df       	rcall	.-32     	; 0x1a6c <__umulhisi3>
    1a8c:	a5 9f       	mul	r26, r21
    1a8e:	90 0d       	add	r25, r0
    1a90:	b4 9f       	mul	r27, r20
    1a92:	90 0d       	add	r25, r0
    1a94:	a4 9f       	mul	r26, r20
    1a96:	80 0d       	add	r24, r0
    1a98:	91 1d       	adc	r25, r1
    1a9a:	11 24       	eor	r1, r1
    1a9c:	08 95       	ret

00001a9e <__udivmodsi4>:
    1a9e:	a1 e2       	ldi	r26, 0x21	; 33
    1aa0:	1a 2e       	mov	r1, r26
    1aa2:	aa 1b       	sub	r26, r26
    1aa4:	bb 1b       	sub	r27, r27
    1aa6:	fd 01       	movw	r30, r26
    1aa8:	0d c0       	rjmp	.+26     	; 0x1ac4 <__udivmodsi4_ep>

00001aaa <__udivmodsi4_loop>:
    1aaa:	aa 1f       	adc	r26, r26
    1aac:	bb 1f       	adc	r27, r27
    1aae:	ee 1f       	adc	r30, r30
    1ab0:	ff 1f       	adc	r31, r31
    1ab2:	a2 17       	cp	r26, r18
    1ab4:	b3 07       	cpc	r27, r19
    1ab6:	e4 07       	cpc	r30, r20
    1ab8:	f5 07       	cpc	r31, r21
    1aba:	20 f0       	brcs	.+8      	; 0x1ac4 <__udivmodsi4_ep>
    1abc:	a2 1b       	sub	r26, r18
    1abe:	b3 0b       	sbc	r27, r19
    1ac0:	e4 0b       	sbc	r30, r20
    1ac2:	f5 0b       	sbc	r31, r21

00001ac4 <__udivmodsi4_ep>:
    1ac4:	66 1f       	adc	r22, r22
    1ac6:	77 1f       	adc	r23, r23
    1ac8:	88 1f       	adc	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	1a 94       	dec	r1
    1ace:	69 f7       	brne	.-38     	; 0x1aaa <__udivmodsi4_loop>
    1ad0:	60 95       	com	r22
    1ad2:	70 95       	com	r23
    1ad4:	80 95       	com	r24
    1ad6:	90 95       	com	r25
    1ad8:	9b 01       	movw	r18, r22
    1ada:	ac 01       	movw	r20, r24
    1adc:	bd 01       	movw	r22, r26
    1ade:	cf 01       	movw	r24, r30
    1ae0:	08 95       	ret

00001ae2 <_exit>:
    1ae2:	f8 94       	cli

00001ae4 <__stop_program>:
    1ae4:	ff cf       	rjmp	.-2      	; 0x1ae4 <__stop_program>
