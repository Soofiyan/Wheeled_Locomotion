
car drive with callibration using encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00001328  000013bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001328  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000073  00800208  00800208  000013c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017ab  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d64  00000000  00000000  00002c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a3c  00000000  00000000  000039f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00004430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079c  00000000  00000000  00004620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000956  00000000  00000000  00004dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00005712  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	1f c2       	rjmp	.+1086   	; 0x4c0 <__vector_32>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e2       	ldi	r30, 0x28	; 40
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 37       	cpi	r26, 0x7B	; 123
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	e7 d6       	rcall	.+3534   	; 0xeee <main>
     120:	0c 94 92 09 	jmp	0x1324	; 0x1324 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <init_ports>:
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
     126:	87 b1       	in	r24, 0x07	; 7
     128:	87 6f       	ori	r24, 0xF7	; 247
     12a:	87 b9       	out	0x07, r24	; 7
     12c:	88 b1       	in	r24, 0x08	; 8
     12e:	80 78       	andi	r24, 0x80	; 128
     130:	88 b9       	out	0x08, r24	; 8
     132:	08 95       	ret

00000134 <lcd_set_4bit>:
     134:	86 e6       	ldi	r24, 0x66	; 102
     136:	9e e0       	ldi	r25, 0x0E	; 14
     138:	01 97       	sbiw	r24, 0x01	; 1
     13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_set_4bit+0x4>
     13c:	00 00       	nop
     13e:	40 98       	cbi	0x08, 0	; 8
     140:	41 98       	cbi	0x08, 1	; 8
     142:	80 e3       	ldi	r24, 0x30	; 48
     144:	88 b9       	out	0x08, r24	; 8
     146:	42 9a       	sbi	0x08, 2	; 8
     148:	ef ef       	ldi	r30, 0xFF	; 255
     14a:	f7 e4       	ldi	r31, 0x47	; 71
     14c:	31 97       	sbiw	r30, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_set_4bit+0x18>
     150:	00 c0       	rjmp	.+0      	; 0x152 <lcd_set_4bit+0x1e>
     152:	00 00       	nop
     154:	42 98       	cbi	0x08, 2	; 8
     156:	e6 e6       	ldi	r30, 0x66	; 102
     158:	fe e0       	ldi	r31, 0x0E	; 14
     15a:	31 97       	sbiw	r30, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_set_4bit+0x26>
     15e:	00 00       	nop
     160:	40 98       	cbi	0x08, 0	; 8
     162:	41 98       	cbi	0x08, 1	; 8
     164:	88 b9       	out	0x08, r24	; 8
     166:	42 9a       	sbi	0x08, 2	; 8
     168:	ef ef       	ldi	r30, 0xFF	; 255
     16a:	f7 e4       	ldi	r31, 0x47	; 71
     16c:	31 97       	sbiw	r30, 0x01	; 1
     16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_set_4bit+0x38>
     170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_set_4bit+0x3e>
     172:	00 00       	nop
     174:	42 98       	cbi	0x08, 2	; 8
     176:	e6 e6       	ldi	r30, 0x66	; 102
     178:	fe e0       	ldi	r31, 0x0E	; 14
     17a:	31 97       	sbiw	r30, 0x01	; 1
     17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_set_4bit+0x46>
     17e:	00 00       	nop
     180:	40 98       	cbi	0x08, 0	; 8
     182:	41 98       	cbi	0x08, 1	; 8
     184:	88 b9       	out	0x08, r24	; 8
     186:	42 9a       	sbi	0x08, 2	; 8
     188:	8f ef       	ldi	r24, 0xFF	; 255
     18a:	97 e4       	ldi	r25, 0x47	; 71
     18c:	01 97       	sbiw	r24, 0x01	; 1
     18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_set_4bit+0x58>
     190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_set_4bit+0x5e>
     192:	00 00       	nop
     194:	42 98       	cbi	0x08, 2	; 8
     196:	e6 e6       	ldi	r30, 0x66	; 102
     198:	fe e0       	ldi	r31, 0x0E	; 14
     19a:	31 97       	sbiw	r30, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_set_4bit+0x66>
     19e:	00 00       	nop
     1a0:	40 98       	cbi	0x08, 0	; 8
     1a2:	41 98       	cbi	0x08, 1	; 8
     1a4:	80 e2       	ldi	r24, 0x20	; 32
     1a6:	88 b9       	out	0x08, r24	; 8
     1a8:	42 9a       	sbi	0x08, 2	; 8
     1aa:	8f ef       	ldi	r24, 0xFF	; 255
     1ac:	97 e4       	ldi	r25, 0x47	; 71
     1ae:	01 97       	sbiw	r24, 0x01	; 1
     1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_set_4bit+0x7a>
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_set_4bit+0x80>
     1b4:	00 00       	nop
     1b6:	42 98       	cbi	0x08, 2	; 8
     1b8:	08 95       	ret

000001ba <lcd_wr_command>:
     1ba:	98 b1       	in	r25, 0x08	; 8
     1bc:	9f 70       	andi	r25, 0x0F	; 15
     1be:	98 b9       	out	0x08, r25	; 8
     1c0:	98 b1       	in	r25, 0x08	; 8
     1c2:	28 2f       	mov	r18, r24
     1c4:	20 7f       	andi	r18, 0xF0	; 240
     1c6:	92 2b       	or	r25, r18
     1c8:	98 b9       	out	0x08, r25	; 8
     1ca:	40 98       	cbi	0x08, 0	; 8
     1cc:	41 98       	cbi	0x08, 1	; 8
     1ce:	42 9a       	sbi	0x08, 2	; 8
     1d0:	ef ef       	ldi	r30, 0xFF	; 255
     1d2:	f7 e4       	ldi	r31, 0x47	; 71
     1d4:	31 97       	sbiw	r30, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_wr_command+0x1a>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_wr_command+0x20>
     1da:	00 00       	nop
     1dc:	42 98       	cbi	0x08, 2	; 8
     1de:	98 b1       	in	r25, 0x08	; 8
     1e0:	9f 70       	andi	r25, 0x0F	; 15
     1e2:	98 b9       	out	0x08, r25	; 8
     1e4:	98 b1       	in	r25, 0x08	; 8
     1e6:	82 95       	swap	r24
     1e8:	80 7f       	andi	r24, 0xF0	; 240
     1ea:	89 2b       	or	r24, r25
     1ec:	88 b9       	out	0x08, r24	; 8
     1ee:	40 98       	cbi	0x08, 0	; 8
     1f0:	41 98       	cbi	0x08, 1	; 8
     1f2:	42 9a       	sbi	0x08, 2	; 8
     1f4:	8f ef       	ldi	r24, 0xFF	; 255
     1f6:	97 e4       	ldi	r25, 0x47	; 71
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_wr_command+0x3e>
     1fc:	00 c0       	rjmp	.+0      	; 0x1fe <lcd_wr_command+0x44>
     1fe:	00 00       	nop
     200:	42 98       	cbi	0x08, 2	; 8
     202:	08 95       	ret

00000204 <lcd_init>:
     204:	97 df       	rcall	.-210    	; 0x134 <lcd_set_4bit>
     206:	86 e6       	ldi	r24, 0x66	; 102
     208:	9e e0       	ldi	r25, 0x0E	; 14
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_init+0x6>
     20e:	00 00       	nop
     210:	88 e2       	ldi	r24, 0x28	; 40
     212:	d3 df       	rcall	.-90     	; 0x1ba <lcd_wr_command>
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	d1 df       	rcall	.-94     	; 0x1ba <lcd_wr_command>
     218:	86 e0       	ldi	r24, 0x06	; 6
     21a:	cf df       	rcall	.-98     	; 0x1ba <lcd_wr_command>
     21c:	8e e0       	ldi	r24, 0x0E	; 14
     21e:	cd df       	rcall	.-102    	; 0x1ba <lcd_wr_command>
     220:	80 e8       	ldi	r24, 0x80	; 128
     222:	cb cf       	rjmp	.-106    	; 0x1ba <lcd_wr_command>
     224:	08 95       	ret

00000226 <lcd_wr_char>:
     226:	98 b1       	in	r25, 0x08	; 8
     228:	9f 70       	andi	r25, 0x0F	; 15
     22a:	98 b9       	out	0x08, r25	; 8
     22c:	98 b1       	in	r25, 0x08	; 8
     22e:	28 2f       	mov	r18, r24
     230:	20 7f       	andi	r18, 0xF0	; 240
     232:	92 2b       	or	r25, r18
     234:	98 b9       	out	0x08, r25	; 8
     236:	40 9a       	sbi	0x08, 0	; 8
     238:	41 98       	cbi	0x08, 1	; 8
     23a:	42 9a       	sbi	0x08, 2	; 8
     23c:	ef ef       	ldi	r30, 0xFF	; 255
     23e:	f7 e4       	ldi	r31, 0x47	; 71
     240:	31 97       	sbiw	r30, 0x01	; 1
     242:	f1 f7       	brne	.-4      	; 0x240 <lcd_wr_char+0x1a>
     244:	00 c0       	rjmp	.+0      	; 0x246 <lcd_wr_char+0x20>
     246:	00 00       	nop
     248:	42 98       	cbi	0x08, 2	; 8
     24a:	98 b1       	in	r25, 0x08	; 8
     24c:	9f 70       	andi	r25, 0x0F	; 15
     24e:	98 b9       	out	0x08, r25	; 8
     250:	98 b1       	in	r25, 0x08	; 8
     252:	82 95       	swap	r24
     254:	80 7f       	andi	r24, 0xF0	; 240
     256:	89 2b       	or	r24, r25
     258:	88 b9       	out	0x08, r24	; 8
     25a:	40 9a       	sbi	0x08, 0	; 8
     25c:	41 98       	cbi	0x08, 1	; 8
     25e:	42 9a       	sbi	0x08, 2	; 8
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	97 e4       	ldi	r25, 0x47	; 71
     264:	01 97       	sbiw	r24, 0x01	; 1
     266:	f1 f7       	brne	.-4      	; 0x264 <lcd_wr_char+0x3e>
     268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_wr_char+0x44>
     26a:	00 00       	nop
     26c:	42 98       	cbi	0x08, 2	; 8
     26e:	08 95       	ret

00000270 <lcd_home>:
     270:	80 e8       	ldi	r24, 0x80	; 128
     272:	a3 cf       	rjmp	.-186    	; 0x1ba <lcd_wr_command>
     274:	08 95       	ret

00000276 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     276:	82 30       	cpi	r24, 0x02	; 2
     278:	69 f0       	breq	.+26     	; 0x294 <lcd_cursor+0x1e>
     27a:	18 f4       	brcc	.+6      	; 0x282 <lcd_cursor+0xc>
     27c:	81 30       	cpi	r24, 0x01	; 1
     27e:	31 f0       	breq	.+12     	; 0x28c <lcd_cursor+0x16>
     280:	08 95       	ret
     282:	83 30       	cpi	r24, 0x03	; 3
     284:	59 f0       	breq	.+22     	; 0x29c <lcd_cursor+0x26>
     286:	84 30       	cpi	r24, 0x04	; 4
     288:	69 f0       	breq	.+26     	; 0x2a4 <lcd_cursor+0x2e>
     28a:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
     28c:	8f e7       	ldi	r24, 0x7F	; 127
     28e:	86 0f       	add	r24, r22
     290:	94 cf       	rjmp	.-216    	; 0x1ba <lcd_wr_command>
     292:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     294:	8f eb       	ldi	r24, 0xBF	; 191
     296:	86 0f       	add	r24, r22
     298:	90 cf       	rjmp	.-224    	; 0x1ba <lcd_wr_command>
     29a:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     29c:	83 e9       	ldi	r24, 0x93	; 147
     29e:	86 0f       	add	r24, r22
     2a0:	8c cf       	rjmp	.-232    	; 0x1ba <lcd_wr_command>
     2a2:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     2a4:	83 ed       	ldi	r24, 0xD3	; 211
     2a6:	86 0f       	add	r24, r22
     2a8:	88 cf       	rjmp	.-240    	; 0x1ba <lcd_wr_command>
     2aa:	08 95       	ret

000002ac <lcd_print>:
     2ac:	0f 93       	push	r16
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     2ae:	1f 93       	push	r17
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	8a 01       	movw	r16, r20
     2b6:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2b8:	88 23       	and	r24, r24
     2ba:	11 f0       	breq	.+4      	; 0x2c0 <lcd_print+0x14>
     2bc:	61 11       	cpse	r22, r1
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <lcd_print+0x18>
	{
		lcd_home();
     2c0:	d7 df       	rcall	.-82     	; 0x270 <lcd_home>
     2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <lcd_print+0x1a>
	}
	else
	{
		lcd_cursor(row,coloumn);
     2c4:	d8 df       	rcall	.-80     	; 0x276 <lcd_cursor>
     2c6:	c5 30       	cpi	r28, 0x05	; 5
	}
	if(digits==5 || flag==1)
     2c8:	d1 05       	cpc	r29, r1
     2ca:	09 f0       	breq	.+2      	; 0x2ce <lcd_print+0x22>
     2cc:	d1 c0       	rjmp	.+418    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     2ce:	98 01       	movw	r18, r16
	{
		million=value/10000+48;
     2d0:	32 95       	swap	r19
     2d2:	22 95       	swap	r18
     2d4:	2f 70       	andi	r18, 0x0F	; 15
     2d6:	23 27       	eor	r18, r19
     2d8:	3f 70       	andi	r19, 0x0F	; 15
     2da:	23 27       	eor	r18, r19
     2dc:	a7 e4       	ldi	r26, 0x47	; 71
     2de:	b3 e0       	ldi	r27, 0x03	; 3
     2e0:	f0 d7       	rcall	.+4064   	; 0x12c2 <__umulhisi3>
     2e2:	96 95       	lsr	r25
     2e4:	87 95       	ror	r24
     2e6:	96 95       	lsr	r25
     2e8:	87 95       	ror	r24
     2ea:	96 95       	lsr	r25
     2ec:	87 95       	ror	r24
     2ee:	c0 96       	adiw	r24, 0x30	; 48
     2f0:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <million+0x1>
     2f4:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <million>
		lcd_wr_char(million);
     2f8:	96 df       	rcall	.-212    	; 0x226 <lcd_wr_char>
     2fa:	98 01       	movw	r18, r16
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
     2fc:	36 95       	lsr	r19
     2fe:	27 95       	ror	r18
     300:	36 95       	lsr	r19
     302:	27 95       	ror	r18
     304:	36 95       	lsr	r19
     306:	27 95       	ror	r18
     308:	a5 ec       	ldi	r26, 0xC5	; 197
     30a:	b0 e2       	ldi	r27, 0x20	; 32
     30c:	da d7       	rcall	.+4020   	; 0x12c2 <__umulhisi3>
     30e:	ac 01       	movw	r20, r24
     310:	52 95       	swap	r21
     312:	42 95       	swap	r20
     314:	4f 70       	andi	r20, 0x0F	; 15
     316:	45 27       	eor	r20, r21
     318:	5f 70       	andi	r21, 0x0F	; 15
     31a:	45 27       	eor	r20, r21
     31c:	50 93 51 02 	sts	0x0251, r21	; 0x800251 <temp+0x1>
     320:	40 93 50 02 	sts	0x0250, r20	; 0x800250 <temp>
		thousand = temp%10 + 48;
     324:	9a 01       	movw	r18, r20
     326:	ad ec       	ldi	r26, 0xCD	; 205
     328:	bc ec       	ldi	r27, 0xCC	; 204
     32a:	cb d7       	rcall	.+3990   	; 0x12c2 <__umulhisi3>
     32c:	96 95       	lsr	r25
     32e:	87 95       	ror	r24
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
     334:	96 95       	lsr	r25
     336:	87 95       	ror	r24
     338:	9c 01       	movw	r18, r24
     33a:	22 0f       	add	r18, r18
     33c:	33 1f       	adc	r19, r19
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	82 0f       	add	r24, r18
     34c:	93 1f       	adc	r25, r19
     34e:	9a 01       	movw	r18, r20
     350:	28 1b       	sub	r18, r24
     352:	39 0b       	sbc	r19, r25
     354:	c9 01       	movw	r24, r18
     356:	c0 96       	adiw	r24, 0x30	; 48
     358:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <thousand+0x1>
     35c:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <thousand>
		lcd_wr_char(thousand);
     360:	62 df       	rcall	.-316    	; 0x226 <lcd_wr_char>
     362:	03 c0       	rjmp	.+6      	; 0x36a <lcd_print+0xbe>
     364:	c3 30       	cpi	r28, 0x03	; 3
		flag=1;
	}
	if(digits==3 || flag==1)
     366:	d1 05       	cpc	r29, r1
     368:	79 f5       	brne	.+94     	; 0x3c8 <lcd_print+0x11c>
     36a:	98 01       	movw	r18, r16
	{
		temp = value/100;
     36c:	36 95       	lsr	r19
     36e:	27 95       	ror	r18
     370:	36 95       	lsr	r19
     372:	27 95       	ror	r18
     374:	ab e7       	ldi	r26, 0x7B	; 123
     376:	b4 e1       	ldi	r27, 0x14	; 20
     378:	a4 d7       	rcall	.+3912   	; 0x12c2 <__umulhisi3>
     37a:	ac 01       	movw	r20, r24
     37c:	56 95       	lsr	r21
     37e:	47 95       	ror	r20
     380:	50 93 51 02 	sts	0x0251, r21	; 0x800251 <temp+0x1>
     384:	40 93 50 02 	sts	0x0250, r20	; 0x800250 <temp>
		hundred = temp%10 + 48;
     388:	9a 01       	movw	r18, r20
     38a:	ad ec       	ldi	r26, 0xCD	; 205
     38c:	bc ec       	ldi	r27, 0xCC	; 204
     38e:	99 d7       	rcall	.+3890   	; 0x12c2 <__umulhisi3>
     390:	96 95       	lsr	r25
     392:	87 95       	ror	r24
     394:	96 95       	lsr	r25
     396:	87 95       	ror	r24
     398:	96 95       	lsr	r25
     39a:	87 95       	ror	r24
     39c:	9c 01       	movw	r18, r24
     39e:	22 0f       	add	r18, r18
     3a0:	33 1f       	adc	r19, r19
     3a2:	88 0f       	add	r24, r24
     3a4:	99 1f       	adc	r25, r25
     3a6:	88 0f       	add	r24, r24
     3a8:	99 1f       	adc	r25, r25
     3aa:	88 0f       	add	r24, r24
     3ac:	99 1f       	adc	r25, r25
     3ae:	82 0f       	add	r24, r18
     3b0:	93 1f       	adc	r25, r19
     3b2:	9a 01       	movw	r18, r20
     3b4:	28 1b       	sub	r18, r24
     3b6:	39 0b       	sbc	r19, r25
     3b8:	c9 01       	movw	r24, r18
     3ba:	c0 96       	adiw	r24, 0x30	; 48
     3bc:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <hundred+0x1>
     3c0:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <hundred>
		lcd_wr_char(hundred);
     3c4:	30 df       	rcall	.-416    	; 0x226 <lcd_wr_char>
     3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <lcd_print+0x124>
     3c8:	c2 30       	cpi	r28, 0x02	; 2
		flag=1;
	}
	if(digits==2 || flag==1)
     3ca:	d1 05       	cpc	r29, r1
     3cc:	09 f0       	breq	.+2      	; 0x3d0 <lcd_print+0x124>
     3ce:	55 c0       	rjmp	.+170    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
	{
		temp = value/10;
     3d0:	98 01       	movw	r18, r16
     3d2:	ad ec       	ldi	r26, 0xCD	; 205
     3d4:	bc ec       	ldi	r27, 0xCC	; 204
     3d6:	75 d7       	rcall	.+3818   	; 0x12c2 <__umulhisi3>
     3d8:	ac 01       	movw	r20, r24
     3da:	56 95       	lsr	r21
     3dc:	47 95       	ror	r20
     3de:	56 95       	lsr	r21
     3e0:	47 95       	ror	r20
     3e2:	56 95       	lsr	r21
     3e4:	47 95       	ror	r20
     3e6:	50 93 51 02 	sts	0x0251, r21	; 0x800251 <temp+0x1>
     3ea:	40 93 50 02 	sts	0x0250, r20	; 0x800250 <temp>
		tens = temp%10 + 48;
     3ee:	9a 01       	movw	r18, r20
     3f0:	68 d7       	rcall	.+3792   	; 0x12c2 <__umulhisi3>
     3f2:	96 95       	lsr	r25
     3f4:	87 95       	ror	r24
     3f6:	96 95       	lsr	r25
     3f8:	87 95       	ror	r24
     3fa:	96 95       	lsr	r25
     3fc:	87 95       	ror	r24
     3fe:	9c 01       	movw	r18, r24
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	82 0f       	add	r24, r18
     412:	93 1f       	adc	r25, r19
     414:	9a 01       	movw	r18, r20
     416:	28 1b       	sub	r18, r24
     418:	39 0b       	sbc	r19, r25
     41a:	c9 01       	movw	r24, r18
     41c:	c0 96       	adiw	r24, 0x30	; 48
     41e:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <tens+0x1>
     422:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <tens>
		lcd_wr_char(tens);
     426:	ff de       	rcall	.-514    	; 0x226 <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
     428:	98 01       	movw	r18, r16
     42a:	ad ec       	ldi	r26, 0xCD	; 205
     42c:	bc ec       	ldi	r27, 0xCC	; 204
     42e:	49 d7       	rcall	.+3730   	; 0x12c2 <__umulhisi3>
     430:	96 95       	lsr	r25
     432:	87 95       	ror	r24
     434:	96 95       	lsr	r25
     436:	87 95       	ror	r24
     438:	96 95       	lsr	r25
     43a:	87 95       	ror	r24
     43c:	9c 01       	movw	r18, r24
     43e:	22 0f       	add	r18, r18
     440:	33 1f       	adc	r19, r19
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	88 0f       	add	r24, r24
     44c:	99 1f       	adc	r25, r25
     44e:	82 0f       	add	r24, r18
     450:	93 1f       	adc	r25, r19
     452:	98 01       	movw	r18, r16
     454:	28 1b       	sub	r18, r24
     456:	39 0b       	sbc	r19, r25
     458:	c9 01       	movw	r24, r18
     45a:	c0 96       	adiw	r24, 0x30	; 48
     45c:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <unit+0x1>
     460:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <unit>
		lcd_wr_char(unit);
     464:	e0 de       	rcall	.-576    	; 0x226 <lcd_wr_char>
	}
	if(digits>5)
     466:	26 97       	sbiw	r28, 0x06	; 6
     468:	64 f0       	brlt	.+24     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	{
		lcd_wr_char('E');
     46a:	85 e4       	ldi	r24, 0x45	; 69
     46c:	dc de       	rcall	.-584    	; 0x226 <lcd_wr_char>
     46e:	09 c0       	rjmp	.+18     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	}
	
}
     470:	c4 30       	cpi	r28, 0x04	; 4
	{
		million=value/10000+48;
		lcd_wr_char(million);
		flag=1;
	}
	if(digits==4 || flag==1)
     472:	d1 05       	cpc	r29, r1
     474:	09 f0       	breq	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     476:	76 cf       	rjmp	.-276    	; 0x364 <lcd_print+0xb8>
     478:	40 cf       	rjmp	.-384    	; 0x2fa <lcd_print+0x4e>
     47a:	c1 30       	cpi	r28, 0x01	; 1
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
     47c:	d1 05       	cpc	r29, r1
     47e:	99 f7       	brne	.-26     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     480:	d3 cf       	rjmp	.-90     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     482:	df 91       	pop	r29
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	08 95       	ret

0000048c <delay_interrupt>:
     48c:	e0 e9       	ldi	r30, 0x90	; 144
}


void delay_interrupt()
{
	TCCR3A |= (1<<COM3A1)|(1<<COM3B1)|(1<<COM3C1);
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	88 6a       	ori	r24, 0xA8	; 168
     494:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM32)|(1<<CS32)|(1<<CS30);
     496:	e1 e9       	ldi	r30, 0x91	; 145
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	8d 60       	ori	r24, 0x0D	; 13
     49e:	80 83       	st	Z, r24
	OCR3A = 57600;
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	91 ee       	ldi	r25, 0xE1	; 225
     4a4:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     4a8:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	TCNT3 = 0;
     4ac:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     4b0:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	TIMSK3 |= (1<<OCIE3A)|(1<<OCIE3B);
     4b4:	e1 e7       	ldi	r30, 0x71	; 113
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	80 81       	ld	r24, Z
     4ba:	86 60       	ori	r24, 0x06	; 6
     4bc:	80 83       	st	Z, r24
     4be:	08 95       	ret

000004c0 <__vector_32>:
}


ISR (TIMER3_COMPA_vect)
{
     4c0:	1f 92       	push	r1
     4c2:	0f 92       	push	r0
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	8f 93       	push	r24
     4cc:	9f 93       	push	r25
	count_call = 1;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <count_call>
	TCNT3 = 0;
     4d4:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     4d8:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	OCR3A = 57600;
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	91 ee       	ldi	r25, 0xE1	; 225
     4e0:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     4e4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	PORTE ^= 0xFF;
     4e8:	8e b1       	in	r24, 0x0e	; 14
     4ea:	80 95       	com	r24
     4ec:	8e b9       	out	0x0e, r24	; 14
}
     4ee:	9f 91       	pop	r25
     4f0:	8f 91       	pop	r24
     4f2:	0f 90       	pop	r0
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	0f 90       	pop	r0
     4f8:	1f 90       	pop	r1
     4fa:	18 95       	reti

000004fc <timer_init_motor>:
}


void timer_init_motor()
{
	TCCR4A |= (1<<COM4A1)|(1<<COM4B1)|(1<<COM4C1)|(1<<WGM40);
     4fc:	e0 ea       	ldi	r30, 0xA0	; 160
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	89 6a       	ori	r24, 0xA9	; 169
     504:	80 83       	st	Z, r24
	TCCR4B |= (1<<WGM42)|(1<<CS41)|(1<<CS40);
     506:	e1 ea       	ldi	r30, 0xA1	; 161
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	80 81       	ld	r24, Z
     50c:	8b 60       	ori	r24, 0x0B	; 11
     50e:	80 83       	st	Z, r24
	TCCR5A |= (1<<COM5A1)|(1<<COM5B1)|(1<<COM5C1)|(1<<WGM50);
     510:	e0 e2       	ldi	r30, 0x20	; 32
     512:	f1 e0       	ldi	r31, 0x01	; 1
     514:	80 81       	ld	r24, Z
     516:	89 6a       	ori	r24, 0xA9	; 169
     518:	80 83       	st	Z, r24
	TCCR5B |= (1<<WGM52)|(1<<CS51)|(1<<CS50);
     51a:	e1 e2       	ldi	r30, 0x21	; 33
     51c:	f1 e0       	ldi	r31, 0x01	; 1
     51e:	80 81       	ld	r24, Z
     520:	8b 60       	ori	r24, 0x0B	; 11
     522:	80 83       	st	Z, r24
	PORTH = 0xFF;
     524:	8f ef       	ldi	r24, 0xFF	; 255
     526:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTL = 0xFF;
     52a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
     52e:	08 95       	ret

00000530 <ADC_initiate>:
//3 5
//4 4

void ADC_initiate()
{
	DDRF = 0x00;
     530:	10 ba       	out	0x10, r1	; 16
	ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<ADLAR);  // AVcc //  right adjusted
     532:	80 e4       	ldi	r24, 0x40	; 64
     534:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1<<ADEN)|(0<<ADATE)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // bit4 ADC EOC flag // prescalar- 111 - 128 division factor
     538:	87 e8       	ldi	r24, 0x87	; 135
     53a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = 0x00;
     53e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     542:	08 95       	ret

00000544 <ADC_read>:
}


uint16_t ADC_read(uint8_t ch)
{
	ADMUX = ADMUX & 0b11100000;    //Clearing all the mux
     544:	ec e7       	ldi	r30, 0x7C	; 124
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	90 81       	ld	r25, Z
     54a:	90 7e       	andi	r25, 0xE0	; 224
     54c:	90 83       	st	Z, r25
	ADCSRB = ADCSRB & 0b11110111;  //------"-"-----------
     54e:	eb e7       	ldi	r30, 0x7B	; 123
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	90 81       	ld	r25, Z
     554:	97 7f       	andi	r25, 0xF7	; 247
     556:	90 83       	st	Z, r25
	ch = ch & 0b00001111;
     558:	98 2f       	mov	r25, r24
     55a:	9f 70       	andi	r25, 0x0F	; 15
	if ( ch <= 7 )
     55c:	98 30       	cpi	r25, 0x08	; 8
     55e:	48 f4       	brcc	.+18     	; 0x572 <ADC_read+0x2e>
	{
		ch = ch & 0b00000111; //
		ADMUX = ADMUX | ch;
     560:	ec e7       	ldi	r30, 0x7C	; 124
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	90 81       	ld	r25, Z
     566:	87 70       	andi	r24, 0x07	; 7
     568:	89 2b       	or	r24, r25
     56a:	80 83       	st	Z, r24
		ADCSRB=0x00;
     56c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     570:	0c c0       	rjmp	.+24     	; 0x58a <ADC_read+0x46>
	}
	else
	{
		ch = ch-8;
		ch = ch & 0b00000111;
		ADMUX = ADMUX | ch;
     572:	ec e7       	ldi	r30, 0x7C	; 124
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	97 70       	andi	r25, 0x07	; 7
     57a:	98 2b       	or	r25, r24
     57c:	90 83       	st	Z, r25
		ADCSRB=0x00;
     57e:	eb e7       	ldi	r30, 0x7B	; 123
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	10 82       	st	Z, r1
		ADCSRB = ADCSRB | (1<<MUX5);
     584:	80 81       	ld	r24, Z
     586:	88 60       	ori	r24, 0x08	; 8
     588:	80 83       	st	Z, r24
	}
	ADCSRA = ADCSRA | (1<<ADSC);    //Bit 6 to start conversion-ADSC
     58a:	ea e7       	ldi	r30, 0x7A	; 122
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	80 81       	ld	r24, Z
     590:	80 64       	ori	r24, 0x40	; 64
     592:	80 83       	st	Z, r24
	while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
     594:	80 81       	ld	r24, Z
     596:	84 ff       	sbrs	r24, 4
     598:	fd cf       	rjmp	.-6      	; 0x594 <ADC_read+0x50>
	return(ADC);
     59a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     59e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
}
     5a2:	08 95       	ret

000005a4 <num_rotation>:
	change_speed();
}


void num_rotation()
{
     5a4:	0f 93       	push	r16
     5a6:	1f 93       	push	r17
		curr0 = ADC_read(0);
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	cc df       	rcall	.-104    	; 0x544 <ADC_read>
     5ac:	a0 e0       	ldi	r26, 0x00	; 0
     5ae:	b0 e0       	ldi	r27, 0x00	; 0
     5b0:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <curr0>
     5b4:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <curr0+0x1>
     5b8:	a0 93 58 02 	sts	0x0258, r26	; 0x800258 <curr0+0x2>
     5bc:	b0 93 59 02 	sts	0x0259, r27	; 0x800259 <curr0+0x3>
		disp0 += (curr0 - prev0);
     5c0:	40 91 48 02 	lds	r20, 0x0248	; 0x800248 <prev0>
     5c4:	50 91 49 02 	lds	r21, 0x0249	; 0x800249 <prev0+0x1>
     5c8:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <prev0+0x2>
     5cc:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <prev0+0x3>
     5d0:	8c 01       	movw	r16, r24
     5d2:	9d 01       	movw	r18, r26
     5d4:	04 1b       	sub	r16, r20
     5d6:	15 0b       	sbc	r17, r21
     5d8:	26 0b       	sbc	r18, r22
     5da:	37 0b       	sbc	r19, r23
     5dc:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <disp0>
     5e0:	50 91 39 02 	lds	r21, 0x0239	; 0x800239 <disp0+0x1>
     5e4:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <disp0+0x2>
     5e8:	70 91 3b 02 	lds	r23, 0x023B	; 0x80023b <disp0+0x3>
		if(curr0 - prev0 <=-500)
     5ec:	0d 30       	cpi	r16, 0x0D	; 13
     5ee:	ee ef       	ldi	r30, 0xFE	; 254
     5f0:	1e 07       	cpc	r17, r30
     5f2:	ef ef       	ldi	r30, 0xFF	; 255
     5f4:	2e 07       	cpc	r18, r30
     5f6:	3e 07       	cpc	r19, r30
     5f8:	6c f4       	brge	.+26     	; 0x614 <num_rotation+0x70>
		{
			disp0 -= (curr0-prev0);
			disp0--;
     5fa:	41 50       	subi	r20, 0x01	; 1
     5fc:	51 09       	sbc	r21, r1
     5fe:	61 09       	sbc	r22, r1
     600:	71 09       	sbc	r23, r1
     602:	40 93 38 02 	sts	0x0238, r20	; 0x800238 <disp0>
     606:	50 93 39 02 	sts	0x0239, r21	; 0x800239 <disp0+0x1>
     60a:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <disp0+0x2>
     60e:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <disp0+0x3>
     612:	1f c0       	rjmp	.+62     	; 0x652 <num_rotation+0xae>
		}
		else if(curr0 - prev0 >=500)
     614:	04 3f       	cpi	r16, 0xF4	; 244
     616:	e1 e0       	ldi	r30, 0x01	; 1
     618:	1e 07       	cpc	r17, r30
     61a:	21 05       	cpc	r18, r1
     61c:	31 05       	cpc	r19, r1
     61e:	6c f4       	brge	.+26     	; 0x63a <num_rotation+0x96>


void num_rotation()
{
		curr0 = ADC_read(0);
		disp0 += (curr0 - prev0);
     620:	40 0f       	add	r20, r16
     622:	51 1f       	adc	r21, r17
     624:	62 1f       	adc	r22, r18
     626:	73 1f       	adc	r23, r19
     628:	40 93 38 02 	sts	0x0238, r20	; 0x800238 <disp0>
     62c:	50 93 39 02 	sts	0x0239, r21	; 0x800239 <disp0+0x1>
     630:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <disp0+0x2>
     634:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <disp0+0x3>
     638:	0c c0       	rjmp	.+24     	; 0x652 <num_rotation+0xae>
			disp0--;
		}
		else if(curr0 - prev0 >=500)
		{
			disp0 -= (curr0-prev0);
			disp0++;
     63a:	4f 5f       	subi	r20, 0xFF	; 255
     63c:	5f 4f       	sbci	r21, 0xFF	; 255
     63e:	6f 4f       	sbci	r22, 0xFF	; 255
     640:	7f 4f       	sbci	r23, 0xFF	; 255
     642:	40 93 38 02 	sts	0x0238, r20	; 0x800238 <disp0>
     646:	50 93 39 02 	sts	0x0239, r21	; 0x800239 <disp0+0x1>
     64a:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <disp0+0x2>
     64e:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <disp0+0x3>
		}
		prev0 = curr0;
     652:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <prev0>
     656:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <prev0+0x1>
     65a:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <prev0+0x2>
     65e:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <prev0+0x3>
		curr1 = ADC_read(1);
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	6f df       	rcall	.-290    	; 0x544 <ADC_read>
     666:	a0 e0       	ldi	r26, 0x00	; 0
     668:	b0 e0       	ldi	r27, 0x00	; 0
     66a:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <curr1>
     66e:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <curr1+0x1>
     672:	a0 93 54 02 	sts	0x0254, r26	; 0x800254 <curr1+0x2>
     676:	b0 93 55 02 	sts	0x0255, r27	; 0x800255 <curr1+0x3>
		disp1 += (curr1 - prev1);
     67a:	40 91 77 02 	lds	r20, 0x0277	; 0x800277 <prev1>
     67e:	50 91 78 02 	lds	r21, 0x0278	; 0x800278 <prev1+0x1>
     682:	60 91 79 02 	lds	r22, 0x0279	; 0x800279 <prev1+0x2>
     686:	70 91 7a 02 	lds	r23, 0x027A	; 0x80027a <prev1+0x3>
     68a:	8c 01       	movw	r16, r24
     68c:	9d 01       	movw	r18, r26
     68e:	04 1b       	sub	r16, r20
     690:	15 0b       	sbc	r17, r21
     692:	26 0b       	sbc	r18, r22
     694:	37 0b       	sbc	r19, r23
     696:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <disp1>
     69a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <disp1+0x1>
     69e:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <disp1+0x2>
     6a2:	70 91 37 02 	lds	r23, 0x0237	; 0x800237 <disp1+0x3>
		if(curr1 - prev1 <=-500)
     6a6:	0d 30       	cpi	r16, 0x0D	; 13
     6a8:	ee ef       	ldi	r30, 0xFE	; 254
     6aa:	1e 07       	cpc	r17, r30
     6ac:	ef ef       	ldi	r30, 0xFF	; 255
     6ae:	2e 07       	cpc	r18, r30
     6b0:	3e 07       	cpc	r19, r30
     6b2:	6c f4       	brge	.+26     	; 0x6ce <num_rotation+0x12a>
		{
			disp1 -= (curr1-prev1);
			disp1--;
     6b4:	41 50       	subi	r20, 0x01	; 1
     6b6:	51 09       	sbc	r21, r1
     6b8:	61 09       	sbc	r22, r1
     6ba:	71 09       	sbc	r23, r1
     6bc:	40 93 34 02 	sts	0x0234, r20	; 0x800234 <disp1>
     6c0:	50 93 35 02 	sts	0x0235, r21	; 0x800235 <disp1+0x1>
     6c4:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <disp1+0x2>
     6c8:	70 93 37 02 	sts	0x0237, r23	; 0x800237 <disp1+0x3>
     6cc:	1f c0       	rjmp	.+62     	; 0x70c <num_rotation+0x168>
		}
		else if(curr1 - prev1 >=500)
     6ce:	04 3f       	cpi	r16, 0xF4	; 244
     6d0:	e1 e0       	ldi	r30, 0x01	; 1
     6d2:	1e 07       	cpc	r17, r30
     6d4:	21 05       	cpc	r18, r1
     6d6:	31 05       	cpc	r19, r1
     6d8:	6c f4       	brge	.+26     	; 0x6f4 <num_rotation+0x150>
			disp0 -= (curr0-prev0);
			disp0++;
		}
		prev0 = curr0;
		curr1 = ADC_read(1);
		disp1 += (curr1 - prev1);
     6da:	40 0f       	add	r20, r16
     6dc:	51 1f       	adc	r21, r17
     6de:	62 1f       	adc	r22, r18
     6e0:	73 1f       	adc	r23, r19
     6e2:	40 93 34 02 	sts	0x0234, r20	; 0x800234 <disp1>
     6e6:	50 93 35 02 	sts	0x0235, r21	; 0x800235 <disp1+0x1>
     6ea:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <disp1+0x2>
     6ee:	70 93 37 02 	sts	0x0237, r23	; 0x800237 <disp1+0x3>
     6f2:	0c c0       	rjmp	.+24     	; 0x70c <num_rotation+0x168>
			disp1--;
		}
		else if(curr1 - prev1 >=500)
		{
			disp1 -= (curr1-prev1);
			disp1++;
     6f4:	4f 5f       	subi	r20, 0xFF	; 255
     6f6:	5f 4f       	sbci	r21, 0xFF	; 255
     6f8:	6f 4f       	sbci	r22, 0xFF	; 255
     6fa:	7f 4f       	sbci	r23, 0xFF	; 255
     6fc:	40 93 34 02 	sts	0x0234, r20	; 0x800234 <disp1>
     700:	50 93 35 02 	sts	0x0235, r21	; 0x800235 <disp1+0x1>
     704:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <disp1+0x2>
     708:	70 93 37 02 	sts	0x0237, r23	; 0x800237 <disp1+0x3>
		}
		prev1 = curr1;
     70c:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <prev1>
     710:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <prev1+0x1>
     714:	a0 93 79 02 	sts	0x0279, r26	; 0x800279 <prev1+0x2>
     718:	b0 93 7a 02 	sts	0x027A, r27	; 0x80027a <prev1+0x3>
		curr2 = ADC_read(2);
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	12 df       	rcall	.-476    	; 0x544 <ADC_read>
     720:	a0 e0       	ldi	r26, 0x00	; 0
     722:	b0 e0       	ldi	r27, 0x00	; 0
     724:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <curr2>
     728:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <curr2+0x1>
     72c:	a0 93 5c 02 	sts	0x025C, r26	; 0x80025c <curr2+0x2>
     730:	b0 93 5d 02 	sts	0x025D, r27	; 0x80025d <curr2+0x3>
		disp2 += (curr2 - prev2);
     734:	40 91 73 02 	lds	r20, 0x0273	; 0x800273 <prev2>
     738:	50 91 74 02 	lds	r21, 0x0274	; 0x800274 <prev2+0x1>
     73c:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <prev2+0x2>
     740:	70 91 76 02 	lds	r23, 0x0276	; 0x800276 <prev2+0x3>
     744:	8c 01       	movw	r16, r24
     746:	9d 01       	movw	r18, r26
     748:	04 1b       	sub	r16, r20
     74a:	15 0b       	sbc	r17, r21
     74c:	26 0b       	sbc	r18, r22
     74e:	37 0b       	sbc	r19, r23
     750:	40 91 30 02 	lds	r20, 0x0230	; 0x800230 <disp2>
     754:	50 91 31 02 	lds	r21, 0x0231	; 0x800231 <disp2+0x1>
     758:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <disp2+0x2>
     75c:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <disp2+0x3>
		if(curr2 - prev2 <=-500)
     760:	0d 30       	cpi	r16, 0x0D	; 13
     762:	ee ef       	ldi	r30, 0xFE	; 254
     764:	1e 07       	cpc	r17, r30
     766:	ef ef       	ldi	r30, 0xFF	; 255
     768:	2e 07       	cpc	r18, r30
     76a:	3e 07       	cpc	r19, r30
     76c:	6c f4       	brge	.+26     	; 0x788 <num_rotation+0x1e4>
		{
			disp2 -= (curr2-prev2);
			disp2--;
     76e:	41 50       	subi	r20, 0x01	; 1
     770:	51 09       	sbc	r21, r1
     772:	61 09       	sbc	r22, r1
     774:	71 09       	sbc	r23, r1
     776:	40 93 30 02 	sts	0x0230, r20	; 0x800230 <disp2>
     77a:	50 93 31 02 	sts	0x0231, r21	; 0x800231 <disp2+0x1>
     77e:	60 93 32 02 	sts	0x0232, r22	; 0x800232 <disp2+0x2>
     782:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <disp2+0x3>
     786:	1f c0       	rjmp	.+62     	; 0x7c6 <num_rotation+0x222>
		}
		else if(curr2 - prev2 >=500)
     788:	04 3f       	cpi	r16, 0xF4	; 244
     78a:	e1 e0       	ldi	r30, 0x01	; 1
     78c:	1e 07       	cpc	r17, r30
     78e:	21 05       	cpc	r18, r1
     790:	31 05       	cpc	r19, r1
     792:	6c f4       	brge	.+26     	; 0x7ae <num_rotation+0x20a>
			disp1 -= (curr1-prev1);
			disp1++;
		}
		prev1 = curr1;
		curr2 = ADC_read(2);
		disp2 += (curr2 - prev2);
     794:	40 0f       	add	r20, r16
     796:	51 1f       	adc	r21, r17
     798:	62 1f       	adc	r22, r18
     79a:	73 1f       	adc	r23, r19
     79c:	40 93 30 02 	sts	0x0230, r20	; 0x800230 <disp2>
     7a0:	50 93 31 02 	sts	0x0231, r21	; 0x800231 <disp2+0x1>
     7a4:	60 93 32 02 	sts	0x0232, r22	; 0x800232 <disp2+0x2>
     7a8:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <disp2+0x3>
     7ac:	0c c0       	rjmp	.+24     	; 0x7c6 <num_rotation+0x222>
			disp2--;
		}
		else if(curr2 - prev2 >=500)
		{
			disp2 -= (curr2-prev2);
			disp2++;
     7ae:	4f 5f       	subi	r20, 0xFF	; 255
     7b0:	5f 4f       	sbci	r21, 0xFF	; 255
     7b2:	6f 4f       	sbci	r22, 0xFF	; 255
     7b4:	7f 4f       	sbci	r23, 0xFF	; 255
     7b6:	40 93 30 02 	sts	0x0230, r20	; 0x800230 <disp2>
     7ba:	50 93 31 02 	sts	0x0231, r21	; 0x800231 <disp2+0x1>
     7be:	60 93 32 02 	sts	0x0232, r22	; 0x800232 <disp2+0x2>
     7c2:	70 93 33 02 	sts	0x0233, r23	; 0x800233 <disp2+0x3>
		}
		prev2 = curr2;
     7c6:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <prev2>
     7ca:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <prev2+0x1>
     7ce:	a0 93 75 02 	sts	0x0275, r26	; 0x800275 <prev2+0x2>
     7d2:	b0 93 76 02 	sts	0x0276, r27	; 0x800276 <prev2+0x3>
		curr3 = ADC_read(3);
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	b5 de       	rcall	.-662    	; 0x544 <ADC_read>
     7da:	a0 e0       	ldi	r26, 0x00	; 0
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <curr3>
     7e2:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <curr3+0x1>
     7e6:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <curr3+0x2>
     7ea:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <curr3+0x3>
		disp3 += (curr3 - prev3);
     7ee:	40 91 44 02 	lds	r20, 0x0244	; 0x800244 <prev3>
     7f2:	50 91 45 02 	lds	r21, 0x0245	; 0x800245 <prev3+0x1>
     7f6:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <prev3+0x2>
     7fa:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <prev3+0x3>
     7fe:	8c 01       	movw	r16, r24
     800:	9d 01       	movw	r18, r26
     802:	04 1b       	sub	r16, r20
     804:	15 0b       	sbc	r17, r21
     806:	26 0b       	sbc	r18, r22
     808:	37 0b       	sbc	r19, r23
     80a:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <disp3>
     80e:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <disp3+0x1>
     812:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <disp3+0x2>
     816:	70 91 2f 02 	lds	r23, 0x022F	; 0x80022f <disp3+0x3>
		if(curr3 - prev3 <=-500)
     81a:	0d 30       	cpi	r16, 0x0D	; 13
     81c:	ee ef       	ldi	r30, 0xFE	; 254
     81e:	1e 07       	cpc	r17, r30
     820:	ef ef       	ldi	r30, 0xFF	; 255
     822:	2e 07       	cpc	r18, r30
     824:	3e 07       	cpc	r19, r30
     826:	6c f4       	brge	.+26     	; 0x842 <num_rotation+0x29e>
		{
			disp3 -= (curr3-prev3);
			disp3--;
     828:	41 50       	subi	r20, 0x01	; 1
     82a:	51 09       	sbc	r21, r1
     82c:	61 09       	sbc	r22, r1
     82e:	71 09       	sbc	r23, r1
     830:	40 93 2c 02 	sts	0x022C, r20	; 0x80022c <disp3>
     834:	50 93 2d 02 	sts	0x022D, r21	; 0x80022d <disp3+0x1>
     838:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <disp3+0x2>
     83c:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <disp3+0x3>
     840:	1f c0       	rjmp	.+62     	; 0x880 <num_rotation+0x2dc>
		}
		else if(curr3 - prev3 >=500)
     842:	04 3f       	cpi	r16, 0xF4	; 244
     844:	e1 e0       	ldi	r30, 0x01	; 1
     846:	1e 07       	cpc	r17, r30
     848:	21 05       	cpc	r18, r1
     84a:	31 05       	cpc	r19, r1
     84c:	6c f4       	brge	.+26     	; 0x868 <num_rotation+0x2c4>
			disp2 -= (curr2-prev2);
			disp2++;
		}
		prev2 = curr2;
		curr3 = ADC_read(3);
		disp3 += (curr3 - prev3);
     84e:	40 0f       	add	r20, r16
     850:	51 1f       	adc	r21, r17
     852:	62 1f       	adc	r22, r18
     854:	73 1f       	adc	r23, r19
     856:	40 93 2c 02 	sts	0x022C, r20	; 0x80022c <disp3>
     85a:	50 93 2d 02 	sts	0x022D, r21	; 0x80022d <disp3+0x1>
     85e:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <disp3+0x2>
     862:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <disp3+0x3>
     866:	0c c0       	rjmp	.+24     	; 0x880 <num_rotation+0x2dc>
			disp3--;
		}
		else if(curr3 - prev3 >=500)
		{
			disp3 -= (curr3-prev3);
			disp3++;
     868:	4f 5f       	subi	r20, 0xFF	; 255
     86a:	5f 4f       	sbci	r21, 0xFF	; 255
     86c:	6f 4f       	sbci	r22, 0xFF	; 255
     86e:	7f 4f       	sbci	r23, 0xFF	; 255
     870:	40 93 2c 02 	sts	0x022C, r20	; 0x80022c <disp3>
     874:	50 93 2d 02 	sts	0x022D, r21	; 0x80022d <disp3+0x1>
     878:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <disp3+0x2>
     87c:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <disp3+0x3>
		}
		prev3 = curr3;
     880:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <prev3>
     884:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <prev3+0x1>
     888:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <prev3+0x2>
     88c:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <prev3+0x3>
}
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	08 95       	ret

00000896 <change_speed>:
	while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
	return(ADC);
}

void change_speed()
{
     896:	cf 92       	push	r12
     898:	df 92       	push	r13
     89a:	ef 92       	push	r14
     89c:	ff 92       	push	r15
	if((val0 - low) >=20)
     89e:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <__data_end>
     8a2:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <__data_end+0x1>
     8a6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end+0x2>
     8aa:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x3>
     8ae:	39 d4       	rcall	.+2162   	; 0x1122 <__floatsisf>
     8b0:	6b 01       	movw	r12, r22
     8b2:	7c 01       	movw	r14, r24
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <val0>
     8bc:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <val0+0x1>
     8c0:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <val0+0x2>
     8c4:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <val0+0x3>
     8c8:	90 d3       	rcall	.+1824   	; 0xfea <__subsf3>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 ea       	ldi	r20, 0xA0	; 160
     8d0:	51 e4       	ldi	r21, 0x41	; 65
     8d2:	d7 d4       	rcall	.+2478   	; 0x1282 <__gesf2>
     8d4:	88 23       	and	r24, r24
     8d6:	4c f0       	brlt	.+18     	; 0x8ea <change_speed+0x54>
	{
		frl -= 20;
     8d8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <frl>
     8dc:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <frl+0x1>
     8e0:	44 97       	sbiw	r24, 0x14	; 20
     8e2:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <frl+0x1>
     8e6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <frl>
	}
	if((val1 - low) >=20)
     8ea:	a7 01       	movw	r20, r14
     8ec:	96 01       	movw	r18, r12
     8ee:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <val1>
     8f2:	70 91 6c 02 	lds	r23, 0x026C	; 0x80026c <val1+0x1>
     8f6:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <val1+0x2>
     8fa:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <val1+0x3>
     8fe:	75 d3       	rcall	.+1770   	; 0xfea <__subsf3>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 ea       	ldi	r20, 0xA0	; 160
     906:	51 e4       	ldi	r21, 0x41	; 65
     908:	bc d4       	rcall	.+2424   	; 0x1282 <__gesf2>
     90a:	88 23       	and	r24, r24
     90c:	4c f0       	brlt	.+18     	; 0x920 <change_speed+0x8a>
	{
		frr -= 20;
     90e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <frr>
     912:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <frr+0x1>
     916:	44 97       	sbiw	r24, 0x14	; 20
     918:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <frr+0x1>
     91c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <frr>
	}
	if((val2 - low) >=20)
     920:	a7 01       	movw	r20, r14
     922:	96 01       	movw	r18, r12
     924:	60 91 5f 02 	lds	r22, 0x025F	; 0x80025f <val2>
     928:	70 91 60 02 	lds	r23, 0x0260	; 0x800260 <val2+0x1>
     92c:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <val2+0x2>
     930:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <val2+0x3>
     934:	5a d3       	rcall	.+1716   	; 0xfea <__subsf3>
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	40 ea       	ldi	r20, 0xA0	; 160
     93c:	51 e4       	ldi	r21, 0x41	; 65
     93e:	a1 d4       	rcall	.+2370   	; 0x1282 <__gesf2>
     940:	88 23       	and	r24, r24
     942:	4c f0       	brlt	.+18     	; 0x956 <change_speed+0xc0>
	{
		bal -= 20;
     944:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <bal>
     948:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <bal+0x1>
     94c:	44 97       	sbiw	r24, 0x14	; 20
     94e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <bal+0x1>
     952:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <bal>
	}
	if((val3 - low) >=20)
     956:	a7 01       	movw	r20, r14
     958:	96 01       	movw	r18, r12
     95a:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <val3>
     95e:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <val3+0x1>
     962:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <val3+0x2>
     966:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <val3+0x3>
     96a:	3f d3       	rcall	.+1662   	; 0xfea <__subsf3>
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	40 ea       	ldi	r20, 0xA0	; 160
     972:	51 e4       	ldi	r21, 0x41	; 65
     974:	86 d4       	rcall	.+2316   	; 0x1282 <__gesf2>
     976:	88 23       	and	r24, r24
     978:	4c f0       	brlt	.+18     	; 0x98c <change_speed+0xf6>
	{
		bar -= 20;
     97a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     97e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     982:	44 97       	sbiw	r24, 0x14	; 20
     984:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
     988:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
	}
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	cf 90       	pop	r12
     994:	08 95       	ret

00000996 <rpm>:
	PORTE ^= 0xFF;
}


void rpm()
{
     996:	4f 92       	push	r4
     998:	5f 92       	push	r5
     99a:	6f 92       	push	r6
     99c:	7f 92       	push	r7
     99e:	8f 92       	push	r8
     9a0:	9f 92       	push	r9
     9a2:	af 92       	push	r10
     9a4:	bf 92       	push	r11
     9a6:	cf 92       	push	r12
     9a8:	df 92       	push	r13
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	64 97       	sbiw	r28, 0x14	; 20
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
	if(disp0 < 0)
     9c6:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <disp0>
     9ca:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <disp0+0x1>
     9ce:	a0 91 3a 02 	lds	r26, 0x023A	; 0x80023a <disp0+0x2>
     9d2:	b0 91 3b 02 	lds	r27, 0x023B	; 0x80023b <disp0+0x3>
     9d6:	bb 23       	and	r27, r27
     9d8:	84 f4       	brge	.+32     	; 0x9fa <rpm+0x64>
	{
		disp0p = -disp0;
     9da:	b0 95       	com	r27
     9dc:	a0 95       	com	r26
     9de:	90 95       	com	r25
     9e0:	81 95       	neg	r24
     9e2:	9f 4f       	sbci	r25, 0xFF	; 255
     9e4:	af 4f       	sbci	r26, 0xFF	; 255
     9e6:	bf 4f       	sbci	r27, 0xFF	; 255
     9e8:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <disp0p>
     9ec:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <disp0p+0x1>
     9f0:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <disp0p+0x2>
     9f4:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <disp0p+0x3>
     9f8:	08 c0       	rjmp	.+16     	; 0xa0a <rpm+0x74>
	}
	else
	{
		disp0p = disp0;
     9fa:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <disp0p>
     9fe:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <disp0p+0x1>
     a02:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <disp0p+0x2>
     a06:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <disp0p+0x3>
	}
	if(disp1 < 0)
     a0a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <disp1>
     a0e:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <disp1+0x1>
     a12:	a0 91 36 02 	lds	r26, 0x0236	; 0x800236 <disp1+0x2>
     a16:	b0 91 37 02 	lds	r27, 0x0237	; 0x800237 <disp1+0x3>
     a1a:	bb 23       	and	r27, r27
     a1c:	84 f4       	brge	.+32     	; 0xa3e <rpm+0xa8>
	{
		disp1p = -disp1;
     a1e:	b0 95       	com	r27
     a20:	a0 95       	com	r26
     a22:	90 95       	com	r25
     a24:	81 95       	neg	r24
     a26:	9f 4f       	sbci	r25, 0xFF	; 255
     a28:	af 4f       	sbci	r26, 0xFF	; 255
     a2a:	bf 4f       	sbci	r27, 0xFF	; 255
     a2c:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <disp1p>
     a30:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <disp1p+0x1>
     a34:	a0 93 16 02 	sts	0x0216, r26	; 0x800216 <disp1p+0x2>
     a38:	b0 93 17 02 	sts	0x0217, r27	; 0x800217 <disp1p+0x3>
     a3c:	08 c0       	rjmp	.+16     	; 0xa4e <rpm+0xb8>
	}
	else
	{
		disp1p = disp1;
     a3e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <disp1p>
     a42:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <disp1p+0x1>
     a46:	a0 93 16 02 	sts	0x0216, r26	; 0x800216 <disp1p+0x2>
     a4a:	b0 93 17 02 	sts	0x0217, r27	; 0x800217 <disp1p+0x3>
	}
	if(disp2 < 0)
     a4e:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <disp2>
     a52:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <disp2+0x1>
     a56:	a0 91 32 02 	lds	r26, 0x0232	; 0x800232 <disp2+0x2>
     a5a:	b0 91 33 02 	lds	r27, 0x0233	; 0x800233 <disp2+0x3>
     a5e:	bb 23       	and	r27, r27
     a60:	84 f4       	brge	.+32     	; 0xa82 <rpm+0xec>
	{
		disp2p = -disp2;
     a62:	b0 95       	com	r27
     a64:	a0 95       	com	r26
     a66:	90 95       	com	r25
     a68:	81 95       	neg	r24
     a6a:	9f 4f       	sbci	r25, 0xFF	; 255
     a6c:	af 4f       	sbci	r26, 0xFF	; 255
     a6e:	bf 4f       	sbci	r27, 0xFF	; 255
     a70:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <disp2p>
     a74:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <disp2p+0x1>
     a78:	a0 93 12 02 	sts	0x0212, r26	; 0x800212 <disp2p+0x2>
     a7c:	b0 93 13 02 	sts	0x0213, r27	; 0x800213 <disp2p+0x3>
     a80:	08 c0       	rjmp	.+16     	; 0xa92 <rpm+0xfc>
	}
	else
	{
		disp2p = disp2;
     a82:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <disp2p>
     a86:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <disp2p+0x1>
     a8a:	a0 93 12 02 	sts	0x0212, r26	; 0x800212 <disp2p+0x2>
     a8e:	b0 93 13 02 	sts	0x0213, r27	; 0x800213 <disp2p+0x3>
	}
	if(disp3 < 0)
     a92:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <disp3>
     a96:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <disp3+0x1>
     a9a:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <disp3+0x2>
     a9e:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <disp3+0x3>
     aa2:	bb 23       	and	r27, r27
     aa4:	84 f4       	brge	.+32     	; 0xac6 <rpm+0x130>
	{
		disp3p = -disp3;
     aa6:	b0 95       	com	r27
     aa8:	a0 95       	com	r26
     aaa:	90 95       	com	r25
     aac:	81 95       	neg	r24
     aae:	9f 4f       	sbci	r25, 0xFF	; 255
     ab0:	af 4f       	sbci	r26, 0xFF	; 255
     ab2:	bf 4f       	sbci	r27, 0xFF	; 255
     ab4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <disp3p>
     ab8:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <disp3p+0x1>
     abc:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <disp3p+0x2>
     ac0:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <disp3p+0x3>
     ac4:	08 c0       	rjmp	.+16     	; 0xad6 <rpm+0x140>
	}
	else
	{
		disp3p = disp3;
     ac6:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <disp3p>
     aca:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <disp3p+0x1>
     ace:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <disp3p+0x2>
     ad2:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <disp3p+0x3>
	}
	val0 = ((disp0p - prev_disp0)/1023)*15;
     ad6:	00 91 18 02 	lds	r16, 0x0218	; 0x800218 <disp0p>
     ada:	10 91 19 02 	lds	r17, 0x0219	; 0x800219 <disp0p+0x1>
     ade:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <disp0p+0x2>
     ae2:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <disp0p+0x3>
     ae6:	09 8b       	std	Y+17, r16	; 0x11
     ae8:	1a 8b       	std	Y+18, r17	; 0x12
     aea:	2b 8b       	std	Y+19, r18	; 0x13
     aec:	3c 8b       	std	Y+20, r19	; 0x14
     aee:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <prev_disp0>
     af2:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <prev_disp0+0x1>
     af6:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <prev_disp0+0x2>
     afa:	b0 91 2b 02 	lds	r27, 0x022B	; 0x80022b <prev_disp0+0x3>
     afe:	08 1b       	sub	r16, r24
     b00:	19 0b       	sbc	r17, r25
     b02:	2a 0b       	sbc	r18, r26
     b04:	3b 0b       	sbc	r19, r27
     b06:	c9 01       	movw	r24, r18
     b08:	b8 01       	movw	r22, r16
     b0a:	2f ef       	ldi	r18, 0xFF	; 255
     b0c:	33 e0       	ldi	r19, 0x03	; 3
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	bb d3       	rcall	.+1910   	; 0x128a <__divmodsi4>
     b14:	da 01       	movw	r26, r20
     b16:	c9 01       	movw	r24, r18
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	ba 01       	movw	r22, r20
     b22:	a9 01       	movw	r20, r18
     b24:	48 0f       	add	r20, r24
     b26:	59 1f       	adc	r21, r25
     b28:	6a 1f       	adc	r22, r26
     b2a:	7b 1f       	adc	r23, r27
     b2c:	db 01       	movw	r26, r22
     b2e:	ca 01       	movw	r24, r20
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	aa 1f       	adc	r26, r26
     b3e:	bb 1f       	adc	r27, r27
     b40:	8a 01       	movw	r16, r20
     b42:	9b 01       	movw	r18, r22
     b44:	08 0f       	add	r16, r24
     b46:	19 1f       	adc	r17, r25
     b48:	2a 1f       	adc	r18, r26
     b4a:	3b 1f       	adc	r19, r27
     b4c:	c9 01       	movw	r24, r18
     b4e:	b8 01       	movw	r22, r16
     b50:	e8 d2       	rcall	.+1488   	; 0x1122 <__floatsisf>
     b52:	6d 83       	std	Y+5, r22	; 0x05
     b54:	7e 83       	std	Y+6, r23	; 0x06
     b56:	8f 83       	std	Y+7, r24	; 0x07
     b58:	98 87       	std	Y+8, r25	; 0x08
     b5a:	60 93 3e 02 	sts	0x023E, r22	; 0x80023e <val0>
     b5e:	70 93 3f 02 	sts	0x023F, r23	; 0x80023f <val0+0x1>
     b62:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <val0+0x2>
     b66:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <val0+0x3>
	val1 = ((disp1p - prev_disp1)/1023)*15;
     b6a:	c0 90 14 02 	lds	r12, 0x0214	; 0x800214 <disp1p>
     b6e:	d0 90 15 02 	lds	r13, 0x0215	; 0x800215 <disp1p+0x1>
     b72:	e0 90 16 02 	lds	r14, 0x0216	; 0x800216 <disp1p+0x2>
     b76:	f0 90 17 02 	lds	r15, 0x0217	; 0x800217 <disp1p+0x3>
     b7a:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <prev_disp1>
     b7e:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <prev_disp1+0x1>
     b82:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <prev_disp1+0x2>
     b86:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <prev_disp1+0x3>
     b8a:	a7 01       	movw	r20, r14
     b8c:	96 01       	movw	r18, r12
     b8e:	28 1b       	sub	r18, r24
     b90:	39 0b       	sbc	r19, r25
     b92:	4a 0b       	sbc	r20, r26
     b94:	5b 0b       	sbc	r21, r27
     b96:	ca 01       	movw	r24, r20
     b98:	b9 01       	movw	r22, r18
     b9a:	2f ef       	ldi	r18, 0xFF	; 255
     b9c:	33 e0       	ldi	r19, 0x03	; 3
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	73 d3       	rcall	.+1766   	; 0x128a <__divmodsi4>
     ba4:	da 01       	movw	r26, r20
     ba6:	c9 01       	movw	r24, r18
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	aa 1f       	adc	r26, r26
     bae:	bb 1f       	adc	r27, r27
     bb0:	ba 01       	movw	r22, r20
     bb2:	a9 01       	movw	r20, r18
     bb4:	48 0f       	add	r20, r24
     bb6:	59 1f       	adc	r21, r25
     bb8:	6a 1f       	adc	r22, r26
     bba:	7b 1f       	adc	r23, r27
     bbc:	db 01       	movw	r26, r22
     bbe:	ca 01       	movw	r24, r20
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	aa 1f       	adc	r26, r26
     bc6:	bb 1f       	adc	r27, r27
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	aa 1f       	adc	r26, r26
     bce:	bb 1f       	adc	r27, r27
     bd0:	8a 01       	movw	r16, r20
     bd2:	9b 01       	movw	r18, r22
     bd4:	08 0f       	add	r16, r24
     bd6:	19 1f       	adc	r17, r25
     bd8:	2a 1f       	adc	r18, r26
     bda:	3b 1f       	adc	r19, r27
     bdc:	c9 01       	movw	r24, r18
     bde:	b8 01       	movw	r22, r16
     be0:	a0 d2       	rcall	.+1344   	; 0x1122 <__floatsisf>
     be2:	69 87       	std	Y+9, r22	; 0x09
     be4:	7a 87       	std	Y+10, r23	; 0x0a
     be6:	8b 87       	std	Y+11, r24	; 0x0b
     be8:	9c 87       	std	Y+12, r25	; 0x0c
     bea:	60 93 6b 02 	sts	0x026B, r22	; 0x80026b <val1>
     bee:	70 93 6c 02 	sts	0x026C, r23	; 0x80026c <val1+0x1>
     bf2:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <val1+0x2>
     bf6:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <val1+0x3>
	val2 = ((disp2p - prev_disp2)/1023)*15;
     bfa:	40 90 10 02 	lds	r4, 0x0210	; 0x800210 <disp2p>
     bfe:	50 90 11 02 	lds	r5, 0x0211	; 0x800211 <disp2p+0x1>
     c02:	60 90 12 02 	lds	r6, 0x0212	; 0x800212 <disp2p+0x2>
     c06:	70 90 13 02 	lds	r7, 0x0213	; 0x800213 <disp2p+0x3>
     c0a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <prev_disp2>
     c0e:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <prev_disp2+0x1>
     c12:	a0 91 22 02 	lds	r26, 0x0222	; 0x800222 <prev_disp2+0x2>
     c16:	b0 91 23 02 	lds	r27, 0x0223	; 0x800223 <prev_disp2+0x3>
     c1a:	a3 01       	movw	r20, r6
     c1c:	92 01       	movw	r18, r4
     c1e:	28 1b       	sub	r18, r24
     c20:	39 0b       	sbc	r19, r25
     c22:	4a 0b       	sbc	r20, r26
     c24:	5b 0b       	sbc	r21, r27
     c26:	ca 01       	movw	r24, r20
     c28:	b9 01       	movw	r22, r18
     c2a:	2f ef       	ldi	r18, 0xFF	; 255
     c2c:	33 e0       	ldi	r19, 0x03	; 3
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	2b d3       	rcall	.+1622   	; 0x128a <__divmodsi4>
     c34:	da 01       	movw	r26, r20
     c36:	c9 01       	movw	r24, r18
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	aa 1f       	adc	r26, r26
     c3e:	bb 1f       	adc	r27, r27
     c40:	ba 01       	movw	r22, r20
     c42:	a9 01       	movw	r20, r18
     c44:	48 0f       	add	r20, r24
     c46:	59 1f       	adc	r21, r25
     c48:	6a 1f       	adc	r22, r26
     c4a:	7b 1f       	adc	r23, r27
     c4c:	db 01       	movw	r26, r22
     c4e:	ca 01       	movw	r24, r20
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	aa 1f       	adc	r26, r26
     c56:	bb 1f       	adc	r27, r27
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	aa 1f       	adc	r26, r26
     c5e:	bb 1f       	adc	r27, r27
     c60:	8a 01       	movw	r16, r20
     c62:	9b 01       	movw	r18, r22
     c64:	08 0f       	add	r16, r24
     c66:	19 1f       	adc	r17, r25
     c68:	2a 1f       	adc	r18, r26
     c6a:	3b 1f       	adc	r19, r27
     c6c:	c9 01       	movw	r24, r18
     c6e:	b8 01       	movw	r22, r16
     c70:	58 d2       	rcall	.+1200   	; 0x1122 <__floatsisf>
     c72:	6d 87       	std	Y+13, r22	; 0x0d
     c74:	7e 87       	std	Y+14, r23	; 0x0e
     c76:	8f 87       	std	Y+15, r24	; 0x0f
     c78:	98 8b       	std	Y+16, r25	; 0x10
     c7a:	60 93 5f 02 	sts	0x025F, r22	; 0x80025f <val2>
     c7e:	70 93 60 02 	sts	0x0260, r23	; 0x800260 <val2+0x1>
     c82:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <val2+0x2>
     c86:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <val2+0x3>
	val3 = ((disp3p - prev_disp3)/1023)*15;
     c8a:	80 90 0c 02 	lds	r8, 0x020C	; 0x80020c <disp3p>
     c8e:	90 90 0d 02 	lds	r9, 0x020D	; 0x80020d <disp3p+0x1>
     c92:	a0 90 0e 02 	lds	r10, 0x020E	; 0x80020e <disp3p+0x2>
     c96:	b0 90 0f 02 	lds	r11, 0x020F	; 0x80020f <disp3p+0x3>
     c9a:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <prev_disp3>
     c9e:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <prev_disp3+0x1>
     ca2:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <prev_disp3+0x2>
     ca6:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <prev_disp3+0x3>
     caa:	a5 01       	movw	r20, r10
     cac:	94 01       	movw	r18, r8
     cae:	28 1b       	sub	r18, r24
     cb0:	39 0b       	sbc	r19, r25
     cb2:	4a 0b       	sbc	r20, r26
     cb4:	5b 0b       	sbc	r21, r27
     cb6:	ca 01       	movw	r24, r20
     cb8:	b9 01       	movw	r22, r18
     cba:	2f ef       	ldi	r18, 0xFF	; 255
     cbc:	33 e0       	ldi	r19, 0x03	; 3
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	e3 d2       	rcall	.+1478   	; 0x128a <__divmodsi4>
     cc4:	da 01       	movw	r26, r20
     cc6:	c9 01       	movw	r24, r18
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	aa 1f       	adc	r26, r26
     cce:	bb 1f       	adc	r27, r27
     cd0:	ba 01       	movw	r22, r20
     cd2:	a9 01       	movw	r20, r18
     cd4:	48 0f       	add	r20, r24
     cd6:	59 1f       	adc	r21, r25
     cd8:	6a 1f       	adc	r22, r26
     cda:	7b 1f       	adc	r23, r27
     cdc:	db 01       	movw	r26, r22
     cde:	ca 01       	movw	r24, r20
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	aa 1f       	adc	r26, r26
     ce6:	bb 1f       	adc	r27, r27
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	aa 1f       	adc	r26, r26
     cee:	bb 1f       	adc	r27, r27
     cf0:	8a 01       	movw	r16, r20
     cf2:	9b 01       	movw	r18, r22
     cf4:	08 0f       	add	r16, r24
     cf6:	19 1f       	adc	r17, r25
     cf8:	2a 1f       	adc	r18, r26
     cfa:	3b 1f       	adc	r19, r27
     cfc:	c9 01       	movw	r24, r18
     cfe:	b8 01       	movw	r22, r16
     d00:	10 d2       	rcall	.+1056   	; 0x1122 <__floatsisf>
     d02:	69 83       	std	Y+1, r22	; 0x01
     d04:	7a 83       	std	Y+2, r23	; 0x02
     d06:	8b 83       	std	Y+3, r24	; 0x03
     d08:	9c 83       	std	Y+4, r25	; 0x04
     d0a:	60 93 65 02 	sts	0x0265, r22	; 0x800265 <val3>
     d0e:	70 93 66 02 	sts	0x0266, r23	; 0x800266 <val3+0x1>
     d12:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <val3+0x2>
     d16:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <val3+0x3>
	low = 10000;
	if(val0 < low)
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e4       	ldi	r19, 0x40	; 64
     d1e:	4c e1       	ldi	r20, 0x1C	; 28
     d20:	56 e4       	ldi	r21, 0x46	; 70
     d22:	6d 81       	ldd	r22, Y+5	; 0x05
     d24:	7e 81       	ldd	r23, Y+6	; 0x06
     d26:	8f 81       	ldd	r24, Y+7	; 0x07
     d28:	98 85       	ldd	r25, Y+8	; 0x08
     d2a:	c4 d1       	rcall	.+904    	; 0x10b4 <__cmpsf2>
     d2c:	88 23       	and	r24, r24
     d2e:	6c f0       	brlt	.+26     	; 0xd4a <rpm+0x3b4>
	}
	val0 = ((disp0p - prev_disp0)/1023)*15;
	val1 = ((disp1p - prev_disp1)/1023)*15;
	val2 = ((disp2p - prev_disp2)/1023)*15;
	val3 = ((disp3p - prev_disp3)/1023)*15;
	low = 10000;
     d30:	80 e1       	ldi	r24, 0x10	; 16
     d32:	97 e2       	ldi	r25, 0x27	; 39
     d34:	a0 e0       	ldi	r26, 0x00	; 0
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
     d3c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
     d40:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <__data_end+0x2>
     d44:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <__data_end+0x3>
	if(val0 < low)
	{
		low = val0;
     d48:	0d c0       	rjmp	.+26     	; 0xd64 <rpm+0x3ce>
     d4a:	6d 81       	ldd	r22, Y+5	; 0x05
     d4c:	7e 81       	ldd	r23, Y+6	; 0x06
     d4e:	8f 81       	ldd	r24, Y+7	; 0x07
     d50:	98 85       	ldd	r25, Y+8	; 0x08
     d52:	b4 d1       	rcall	.+872    	; 0x10bc <__fixsfsi>
     d54:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <__data_end>
     d58:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <__data_end+0x1>
     d5c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end+0x2>
     d60:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__data_end+0x3>
	}
	if(val1 < low)
     d64:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <__data_end>
     d68:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <__data_end+0x1>
     d6c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end+0x2>
     d70:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x3>
     d74:	d6 d1       	rcall	.+940    	; 0x1122 <__floatsisf>
     d76:	9b 01       	movw	r18, r22
     d78:	ac 01       	movw	r20, r24
     d7a:	69 85       	ldd	r22, Y+9	; 0x09
     d7c:	7a 85       	ldd	r23, Y+10	; 0x0a
     d7e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d80:	9c 85       	ldd	r25, Y+12	; 0x0c
     d82:	98 d1       	rcall	.+816    	; 0x10b4 <__cmpsf2>
     d84:	88 23       	and	r24, r24
	{
		low = val1;
     d86:	6c f4       	brge	.+26     	; 0xda2 <rpm+0x40c>
     d88:	69 85       	ldd	r22, Y+9	; 0x09
     d8a:	7a 85       	ldd	r23, Y+10	; 0x0a
     d8c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d8e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d90:	95 d1       	rcall	.+810    	; 0x10bc <__fixsfsi>
     d92:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <__data_end>
     d96:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <__data_end+0x1>
     d9a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end+0x2>
     d9e:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__data_end+0x3>
	}
	if(val2 < low)
     da2:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <__data_end>
     da6:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <__data_end+0x1>
     daa:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end+0x2>
     dae:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x3>
     db2:	b7 d1       	rcall	.+878    	; 0x1122 <__floatsisf>
     db4:	9b 01       	movw	r18, r22
     db6:	ac 01       	movw	r20, r24
     db8:	6d 85       	ldd	r22, Y+13	; 0x0d
     dba:	7e 85       	ldd	r23, Y+14	; 0x0e
     dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dbe:	98 89       	ldd	r25, Y+16	; 0x10
     dc0:	79 d1       	rcall	.+754    	; 0x10b4 <__cmpsf2>
     dc2:	88 23       	and	r24, r24
	{
		low = val2;
     dc4:	6c f4       	brge	.+26     	; 0xde0 <rpm+0x44a>
     dc6:	6d 85       	ldd	r22, Y+13	; 0x0d
     dc8:	7e 85       	ldd	r23, Y+14	; 0x0e
     dca:	8f 85       	ldd	r24, Y+15	; 0x0f
     dcc:	98 89       	ldd	r25, Y+16	; 0x10
     dce:	76 d1       	rcall	.+748    	; 0x10bc <__fixsfsi>
     dd0:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <__data_end>
     dd4:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <__data_end+0x1>
     dd8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end+0x2>
     ddc:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__data_end+0x3>
	}
	if(val3 < low)
     de0:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <__data_end>
     de4:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <__data_end+0x1>
     de8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end+0x2>
     dec:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x3>
     df0:	98 d1       	rcall	.+816    	; 0x1122 <__floatsisf>
     df2:	9b 01       	movw	r18, r22
     df4:	ac 01       	movw	r20, r24
     df6:	69 81       	ldd	r22, Y+1	; 0x01
     df8:	7a 81       	ldd	r23, Y+2	; 0x02
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	9c 81       	ldd	r25, Y+4	; 0x04
     dfe:	5a d1       	rcall	.+692    	; 0x10b4 <__cmpsf2>
     e00:	88 23       	and	r24, r24
     e02:	6c f4       	brge	.+26     	; 0xe1e <rpm+0x488>
	{
		low = val3;
     e04:	69 81       	ldd	r22, Y+1	; 0x01
     e06:	7a 81       	ldd	r23, Y+2	; 0x02
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	9c 81       	ldd	r25, Y+4	; 0x04
     e0c:	57 d1       	rcall	.+686    	; 0x10bc <__fixsfsi>
     e0e:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <__data_end>
     e12:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <__data_end+0x1>
     e16:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end+0x2>
     e1a:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__data_end+0x3>
     e1e:	29 89       	ldd	r18, Y+17	; 0x11
	}
	prev_disp0 = disp0p;
     e20:	3a 89       	ldd	r19, Y+18	; 0x12
     e22:	4b 89       	ldd	r20, Y+19	; 0x13
     e24:	5c 89       	ldd	r21, Y+20	; 0x14
     e26:	20 93 28 02 	sts	0x0228, r18	; 0x800228 <prev_disp0>
     e2a:	30 93 29 02 	sts	0x0229, r19	; 0x800229 <prev_disp0+0x1>
     e2e:	40 93 2a 02 	sts	0x022A, r20	; 0x80022a <prev_disp0+0x2>
     e32:	50 93 2b 02 	sts	0x022B, r21	; 0x80022b <prev_disp0+0x3>
     e36:	c0 92 24 02 	sts	0x0224, r12	; 0x800224 <prev_disp1>
	prev_disp1 = disp1p;
     e3a:	d0 92 25 02 	sts	0x0225, r13	; 0x800225 <prev_disp1+0x1>
     e3e:	e0 92 26 02 	sts	0x0226, r14	; 0x800226 <prev_disp1+0x2>
     e42:	f0 92 27 02 	sts	0x0227, r15	; 0x800227 <prev_disp1+0x3>
	prev_disp2 = disp2p;
     e46:	40 92 20 02 	sts	0x0220, r4	; 0x800220 <prev_disp2>
     e4a:	50 92 21 02 	sts	0x0221, r5	; 0x800221 <prev_disp2+0x1>
     e4e:	60 92 22 02 	sts	0x0222, r6	; 0x800222 <prev_disp2+0x2>
     e52:	70 92 23 02 	sts	0x0223, r7	; 0x800223 <prev_disp2+0x3>
	prev_disp3 = disp3p;
     e56:	80 92 1c 02 	sts	0x021C, r8	; 0x80021c <prev_disp3>
     e5a:	90 92 1d 02 	sts	0x021D, r9	; 0x80021d <prev_disp3+0x1>
     e5e:	a0 92 1e 02 	sts	0x021E, r10	; 0x80021e <prev_disp3+0x2>
     e62:	b0 92 1f 02 	sts	0x021F, r11	; 0x80021f <prev_disp3+0x3>
	change_speed();
     e66:	17 dd       	rcall	.-1490   	; 0x896 <change_speed>
     e68:	64 96       	adiw	r28, 0x14	; 20
}
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
     e84:	bf 90       	pop	r11
     e86:	af 90       	pop	r10
     e88:	9f 90       	pop	r9
     e8a:	8f 90       	pop	r8
     e8c:	7f 90       	pop	r7
     e8e:	6f 90       	pop	r6
     e90:	5f 90       	pop	r5
     e92:	4f 90       	pop	r4
     e94:	08 95       	ret

00000e96 <callibration>:
     e96:	86 db       	rcall	.-2292   	; 0x5a4 <num_rotation>


void callibration()
{
	num_rotation();
	if(count_call == 1)
     e98:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <count_call>
     e9c:	88 23       	and	r24, r24
	{
		rpm();
     e9e:	31 f1       	breq	.+76     	; 0xeec <callibration+0x56>
     ea0:	7a dd       	rcall	.-1292   	; 0x996 <rpm>
		OCR4A = frl;
     ea2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <frl>
     ea6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <frl+0x1>
     eaa:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     eae:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		OCR4B = bal;
     eb2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <bal>
     eb6:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <bal+0x1>
     eba:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
     ebe:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
		OCR4C = frr;
     ec2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <frr>
     ec6:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <frr+0x1>
     eca:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
     ece:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
		OCR5B = bar;
     ed2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
     ed6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
     eda:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     ede:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		PORTK = 0x55;
     ee2:	85 e5       	ldi	r24, 0x55	; 85
     ee4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
		count_call = 0;
     ee8:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <count_call>
     eec:	08 95       	ret

00000eee <main>:
void change_speed();


int main(void)
{
	DDRF = 0x00;
     eee:	10 ba       	out	0x10, r1	; 16
	DDRK = 0xFF;
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	DDRE = 0xFF;
     ef6:	8d b9       	out	0x0d, r24	; 13
	DDRH = 0xFF;
     ef8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRL = 0xFF;
     efc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
	PORTF = 0xFF;
     f00:	81 bb       	out	0x11, r24	; 17
	init_ports();
     f02:	11 d9       	rcall	.-3550   	; 0x126 <init_ports>
	lcd_init();
     f04:	7f d9       	rcall	.-3330   	; 0x204 <lcd_init>
	timer_init_motor();
     f06:	fa da       	rcall	.-2572   	; 0x4fc <timer_init_motor>
	ADC_initiate();
     f08:	13 db       	rcall	.-2522   	; 0x530 <ADC_initiate>
	delay_interrupt();
     f0a:	c0 da       	rcall	.-2688   	; 0x48c <delay_interrupt>
     f0c:	78 94       	sei
	sei();
     f0e:	80 e0       	ldi	r24, 0x00	; 0
	prev0 = ADC_read(0);
     f10:	19 db       	rcall	.-2510   	; 0x544 <ADC_read>
     f12:	a0 e0       	ldi	r26, 0x00	; 0
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <prev0>
     f1a:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <prev0+0x1>
     f1e:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <prev0+0x2>
     f22:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <prev0+0x3>
     f26:	81 e0       	ldi	r24, 0x01	; 1
	prev1 = ADC_read(1);
     f28:	0d db       	rcall	.-2534   	; 0x544 <ADC_read>
     f2a:	a0 e0       	ldi	r26, 0x00	; 0
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <prev1>
     f32:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <prev1+0x1>
     f36:	a0 93 79 02 	sts	0x0279, r26	; 0x800279 <prev1+0x2>
     f3a:	b0 93 7a 02 	sts	0x027A, r27	; 0x80027a <prev1+0x3>
     f3e:	82 e0       	ldi	r24, 0x02	; 2
	prev2 = ADC_read(2);
     f40:	01 db       	rcall	.-2558   	; 0x544 <ADC_read>
     f42:	a0 e0       	ldi	r26, 0x00	; 0
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <prev2>
     f4a:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <prev2+0x1>
     f4e:	a0 93 75 02 	sts	0x0275, r26	; 0x800275 <prev2+0x2>
     f52:	b0 93 76 02 	sts	0x0276, r27	; 0x800276 <prev2+0x3>
     f56:	83 e0       	ldi	r24, 0x03	; 3
	prev3 = ADC_read(3);
     f58:	f5 da       	rcall	.-2582   	; 0x544 <ADC_read>
     f5a:	a0 e0       	ldi	r26, 0x00	; 0
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <prev3>
     f62:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <prev3+0x1>
     f66:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <prev3+0x2>
     f6a:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <prev3+0x3>
     f6e:	93 df       	rcall	.-218    	; 0xe96 <callibration>
	
    while (1)
    {
		callibration();
     f70:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <val0>
		lcd_print(1,1,val0,5);
     f74:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <val0+0x1>
     f78:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <val0+0x2>
     f7c:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <val0+0x3>
     f80:	a2 d0       	rcall	.+324    	; 0x10c6 <__fixunssfsi>
     f82:	25 e0       	ldi	r18, 0x05	; 5
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	ab 01       	movw	r20, r22
     f88:	61 e0       	ldi	r22, 0x01	; 1
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	8f d9       	rcall	.-3298   	; 0x2ac <lcd_print>
     f8e:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <val1>
		lcd_print(1,7,val1,5);
     f92:	70 91 6c 02 	lds	r23, 0x026C	; 0x80026c <val1+0x1>
     f96:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <val1+0x2>
     f9a:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <val1+0x3>
     f9e:	93 d0       	rcall	.+294    	; 0x10c6 <__fixunssfsi>
     fa0:	25 e0       	ldi	r18, 0x05	; 5
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	ab 01       	movw	r20, r22
     fa6:	67 e0       	ldi	r22, 0x07	; 7
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 d9       	rcall	.-3328   	; 0x2ac <lcd_print>
     fac:	60 91 5f 02 	lds	r22, 0x025F	; 0x80025f <val2>
		lcd_print(2,1,val2,5);
     fb0:	70 91 60 02 	lds	r23, 0x0260	; 0x800260 <val2+0x1>
     fb4:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <val2+0x2>
     fb8:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <val2+0x3>
     fbc:	84 d0       	rcall	.+264    	; 0x10c6 <__fixunssfsi>
     fbe:	25 e0       	ldi	r18, 0x05	; 5
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	ab 01       	movw	r20, r22
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	82 e0       	ldi	r24, 0x02	; 2
     fc8:	71 d9       	rcall	.-3358   	; 0x2ac <lcd_print>
     fca:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <val3>
		lcd_print(2,7,val3,5);
     fce:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <val3+0x1>
     fd2:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <val3+0x2>
     fd6:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <val3+0x3>
     fda:	75 d0       	rcall	.+234    	; 0x10c6 <__fixunssfsi>
     fdc:	25 e0       	ldi	r18, 0x05	; 5
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	ab 01       	movw	r20, r22
     fe2:	67 e0       	ldi	r22, 0x07	; 7
     fe4:	82 e0       	ldi	r24, 0x02	; 2
     fe6:	62 d9       	rcall	.-3388   	; 0x2ac <lcd_print>
     fe8:	c2 cf       	rjmp	.-124    	; 0xf6e <main+0x80>

00000fea <__subsf3>:
     fea:	50 58       	subi	r21, 0x80	; 128

00000fec <__addsf3>:
     fec:	bb 27       	eor	r27, r27
     fee:	aa 27       	eor	r26, r26
     ff0:	0e d0       	rcall	.+28     	; 0x100e <__addsf3x>
     ff2:	0d c1       	rjmp	.+538    	; 0x120e <__fp_round>
     ff4:	fe d0       	rcall	.+508    	; 0x11f2 <__fp_pscA>
     ff6:	30 f0       	brcs	.+12     	; 0x1004 <__addsf3+0x18>
     ff8:	03 d1       	rcall	.+518    	; 0x1200 <__fp_pscB>
     ffa:	20 f0       	brcs	.+8      	; 0x1004 <__addsf3+0x18>
     ffc:	31 f4       	brne	.+12     	; 0x100a <__addsf3+0x1e>
     ffe:	9f 3f       	cpi	r25, 0xFF	; 255
    1000:	11 f4       	brne	.+4      	; 0x1006 <__addsf3+0x1a>
    1002:	1e f4       	brtc	.+6      	; 0x100a <__addsf3+0x1e>
    1004:	f3 c0       	rjmp	.+486    	; 0x11ec <__fp_nan>
    1006:	0e f4       	brtc	.+2      	; 0x100a <__addsf3+0x1e>
    1008:	e0 95       	com	r30
    100a:	e7 fb       	bst	r30, 7
    100c:	e9 c0       	rjmp	.+466    	; 0x11e0 <__fp_inf>

0000100e <__addsf3x>:
    100e:	e9 2f       	mov	r30, r25
    1010:	0f d1       	rcall	.+542    	; 0x1230 <__fp_split3>
    1012:	80 f3       	brcs	.-32     	; 0xff4 <__addsf3+0x8>
    1014:	ba 17       	cp	r27, r26
    1016:	62 07       	cpc	r22, r18
    1018:	73 07       	cpc	r23, r19
    101a:	84 07       	cpc	r24, r20
    101c:	95 07       	cpc	r25, r21
    101e:	18 f0       	brcs	.+6      	; 0x1026 <__addsf3x+0x18>
    1020:	71 f4       	brne	.+28     	; 0x103e <__addsf3x+0x30>
    1022:	9e f5       	brtc	.+102    	; 0x108a <__addsf3x+0x7c>
    1024:	27 c1       	rjmp	.+590    	; 0x1274 <__fp_zero>
    1026:	0e f4       	brtc	.+2      	; 0x102a <__addsf3x+0x1c>
    1028:	e0 95       	com	r30
    102a:	0b 2e       	mov	r0, r27
    102c:	ba 2f       	mov	r27, r26
    102e:	a0 2d       	mov	r26, r0
    1030:	0b 01       	movw	r0, r22
    1032:	b9 01       	movw	r22, r18
    1034:	90 01       	movw	r18, r0
    1036:	0c 01       	movw	r0, r24
    1038:	ca 01       	movw	r24, r20
    103a:	a0 01       	movw	r20, r0
    103c:	11 24       	eor	r1, r1
    103e:	ff 27       	eor	r31, r31
    1040:	59 1b       	sub	r21, r25
    1042:	99 f0       	breq	.+38     	; 0x106a <__addsf3x+0x5c>
    1044:	59 3f       	cpi	r21, 0xF9	; 249
    1046:	50 f4       	brcc	.+20     	; 0x105c <__addsf3x+0x4e>
    1048:	50 3e       	cpi	r21, 0xE0	; 224
    104a:	68 f1       	brcs	.+90     	; 0x10a6 <__addsf3x+0x98>
    104c:	1a 16       	cp	r1, r26
    104e:	f0 40       	sbci	r31, 0x00	; 0
    1050:	a2 2f       	mov	r26, r18
    1052:	23 2f       	mov	r18, r19
    1054:	34 2f       	mov	r19, r20
    1056:	44 27       	eor	r20, r20
    1058:	58 5f       	subi	r21, 0xF8	; 248
    105a:	f3 cf       	rjmp	.-26     	; 0x1042 <__addsf3x+0x34>
    105c:	46 95       	lsr	r20
    105e:	37 95       	ror	r19
    1060:	27 95       	ror	r18
    1062:	a7 95       	ror	r26
    1064:	f0 40       	sbci	r31, 0x00	; 0
    1066:	53 95       	inc	r21
    1068:	c9 f7       	brne	.-14     	; 0x105c <__addsf3x+0x4e>
    106a:	7e f4       	brtc	.+30     	; 0x108a <__addsf3x+0x7c>
    106c:	1f 16       	cp	r1, r31
    106e:	ba 0b       	sbc	r27, r26
    1070:	62 0b       	sbc	r22, r18
    1072:	73 0b       	sbc	r23, r19
    1074:	84 0b       	sbc	r24, r20
    1076:	ba f0       	brmi	.+46     	; 0x10a6 <__addsf3x+0x98>
    1078:	91 50       	subi	r25, 0x01	; 1
    107a:	a1 f0       	breq	.+40     	; 0x10a4 <__addsf3x+0x96>
    107c:	ff 0f       	add	r31, r31
    107e:	bb 1f       	adc	r27, r27
    1080:	66 1f       	adc	r22, r22
    1082:	77 1f       	adc	r23, r23
    1084:	88 1f       	adc	r24, r24
    1086:	c2 f7       	brpl	.-16     	; 0x1078 <__addsf3x+0x6a>
    1088:	0e c0       	rjmp	.+28     	; 0x10a6 <__addsf3x+0x98>
    108a:	ba 0f       	add	r27, r26
    108c:	62 1f       	adc	r22, r18
    108e:	73 1f       	adc	r23, r19
    1090:	84 1f       	adc	r24, r20
    1092:	48 f4       	brcc	.+18     	; 0x10a6 <__addsf3x+0x98>
    1094:	87 95       	ror	r24
    1096:	77 95       	ror	r23
    1098:	67 95       	ror	r22
    109a:	b7 95       	ror	r27
    109c:	f7 95       	ror	r31
    109e:	9e 3f       	cpi	r25, 0xFE	; 254
    10a0:	08 f0       	brcs	.+2      	; 0x10a4 <__addsf3x+0x96>
    10a2:	b3 cf       	rjmp	.-154    	; 0x100a <__addsf3+0x1e>
    10a4:	93 95       	inc	r25
    10a6:	88 0f       	add	r24, r24
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <__addsf3x+0x9e>
    10aa:	99 27       	eor	r25, r25
    10ac:	ee 0f       	add	r30, r30
    10ae:	97 95       	ror	r25
    10b0:	87 95       	ror	r24
    10b2:	08 95       	ret

000010b4 <__cmpsf2>:
    10b4:	71 d0       	rcall	.+226    	; 0x1198 <__fp_cmp>
    10b6:	08 f4       	brcc	.+2      	; 0x10ba <__cmpsf2+0x6>
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	08 95       	ret

000010bc <__fixsfsi>:
    10bc:	04 d0       	rcall	.+8      	; 0x10c6 <__fixunssfsi>
    10be:	68 94       	set
    10c0:	b1 11       	cpse	r27, r1
    10c2:	d9 c0       	rjmp	.+434    	; 0x1276 <__fp_szero>
    10c4:	08 95       	ret

000010c6 <__fixunssfsi>:
    10c6:	bc d0       	rcall	.+376    	; 0x1240 <__fp_splitA>
    10c8:	88 f0       	brcs	.+34     	; 0x10ec <__fixunssfsi+0x26>
    10ca:	9f 57       	subi	r25, 0x7F	; 127
    10cc:	90 f0       	brcs	.+36     	; 0x10f2 <__fixunssfsi+0x2c>
    10ce:	b9 2f       	mov	r27, r25
    10d0:	99 27       	eor	r25, r25
    10d2:	b7 51       	subi	r27, 0x17	; 23
    10d4:	a0 f0       	brcs	.+40     	; 0x10fe <__fixunssfsi+0x38>
    10d6:	d1 f0       	breq	.+52     	; 0x110c <__fixunssfsi+0x46>
    10d8:	66 0f       	add	r22, r22
    10da:	77 1f       	adc	r23, r23
    10dc:	88 1f       	adc	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	1a f0       	brmi	.+6      	; 0x10e8 <__fixunssfsi+0x22>
    10e2:	ba 95       	dec	r27
    10e4:	c9 f7       	brne	.-14     	; 0x10d8 <__fixunssfsi+0x12>
    10e6:	12 c0       	rjmp	.+36     	; 0x110c <__fixunssfsi+0x46>
    10e8:	b1 30       	cpi	r27, 0x01	; 1
    10ea:	81 f0       	breq	.+32     	; 0x110c <__fixunssfsi+0x46>
    10ec:	c3 d0       	rcall	.+390    	; 0x1274 <__fp_zero>
    10ee:	b1 e0       	ldi	r27, 0x01	; 1
    10f0:	08 95       	ret
    10f2:	c0 c0       	rjmp	.+384    	; 0x1274 <__fp_zero>
    10f4:	67 2f       	mov	r22, r23
    10f6:	78 2f       	mov	r23, r24
    10f8:	88 27       	eor	r24, r24
    10fa:	b8 5f       	subi	r27, 0xF8	; 248
    10fc:	39 f0       	breq	.+14     	; 0x110c <__fixunssfsi+0x46>
    10fe:	b9 3f       	cpi	r27, 0xF9	; 249
    1100:	cc f3       	brlt	.-14     	; 0x10f4 <__fixunssfsi+0x2e>
    1102:	86 95       	lsr	r24
    1104:	77 95       	ror	r23
    1106:	67 95       	ror	r22
    1108:	b3 95       	inc	r27
    110a:	d9 f7       	brne	.-10     	; 0x1102 <__fixunssfsi+0x3c>
    110c:	3e f4       	brtc	.+14     	; 0x111c <__fixunssfsi+0x56>
    110e:	90 95       	com	r25
    1110:	80 95       	com	r24
    1112:	70 95       	com	r23
    1114:	61 95       	neg	r22
    1116:	7f 4f       	sbci	r23, 0xFF	; 255
    1118:	8f 4f       	sbci	r24, 0xFF	; 255
    111a:	9f 4f       	sbci	r25, 0xFF	; 255
    111c:	08 95       	ret

0000111e <__floatunsisf>:
    111e:	e8 94       	clt
    1120:	09 c0       	rjmp	.+18     	; 0x1134 <__floatsisf+0x12>

00001122 <__floatsisf>:
    1122:	97 fb       	bst	r25, 7
    1124:	3e f4       	brtc	.+14     	; 0x1134 <__floatsisf+0x12>
    1126:	90 95       	com	r25
    1128:	80 95       	com	r24
    112a:	70 95       	com	r23
    112c:	61 95       	neg	r22
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	8f 4f       	sbci	r24, 0xFF	; 255
    1132:	9f 4f       	sbci	r25, 0xFF	; 255
    1134:	99 23       	and	r25, r25
    1136:	a9 f0       	breq	.+42     	; 0x1162 <__floatsisf+0x40>
    1138:	f9 2f       	mov	r31, r25
    113a:	96 e9       	ldi	r25, 0x96	; 150
    113c:	bb 27       	eor	r27, r27
    113e:	93 95       	inc	r25
    1140:	f6 95       	lsr	r31
    1142:	87 95       	ror	r24
    1144:	77 95       	ror	r23
    1146:	67 95       	ror	r22
    1148:	b7 95       	ror	r27
    114a:	f1 11       	cpse	r31, r1
    114c:	f8 cf       	rjmp	.-16     	; 0x113e <__floatsisf+0x1c>
    114e:	fa f4       	brpl	.+62     	; 0x118e <__floatsisf+0x6c>
    1150:	bb 0f       	add	r27, r27
    1152:	11 f4       	brne	.+4      	; 0x1158 <__floatsisf+0x36>
    1154:	60 ff       	sbrs	r22, 0
    1156:	1b c0       	rjmp	.+54     	; 0x118e <__floatsisf+0x6c>
    1158:	6f 5f       	subi	r22, 0xFF	; 255
    115a:	7f 4f       	sbci	r23, 0xFF	; 255
    115c:	8f 4f       	sbci	r24, 0xFF	; 255
    115e:	9f 4f       	sbci	r25, 0xFF	; 255
    1160:	16 c0       	rjmp	.+44     	; 0x118e <__floatsisf+0x6c>
    1162:	88 23       	and	r24, r24
    1164:	11 f0       	breq	.+4      	; 0x116a <__floatsisf+0x48>
    1166:	96 e9       	ldi	r25, 0x96	; 150
    1168:	11 c0       	rjmp	.+34     	; 0x118c <__floatsisf+0x6a>
    116a:	77 23       	and	r23, r23
    116c:	21 f0       	breq	.+8      	; 0x1176 <__floatsisf+0x54>
    116e:	9e e8       	ldi	r25, 0x8E	; 142
    1170:	87 2f       	mov	r24, r23
    1172:	76 2f       	mov	r23, r22
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <__floatsisf+0x5e>
    1176:	66 23       	and	r22, r22
    1178:	71 f0       	breq	.+28     	; 0x1196 <__floatsisf+0x74>
    117a:	96 e8       	ldi	r25, 0x86	; 134
    117c:	86 2f       	mov	r24, r22
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	2a f0       	brmi	.+10     	; 0x118e <__floatsisf+0x6c>
    1184:	9a 95       	dec	r25
    1186:	66 0f       	add	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	88 1f       	adc	r24, r24
    118c:	da f7       	brpl	.-10     	; 0x1184 <__floatsisf+0x62>
    118e:	88 0f       	add	r24, r24
    1190:	96 95       	lsr	r25
    1192:	87 95       	ror	r24
    1194:	97 f9       	bld	r25, 7
    1196:	08 95       	ret

00001198 <__fp_cmp>:
    1198:	99 0f       	add	r25, r25
    119a:	00 08       	sbc	r0, r0
    119c:	55 0f       	add	r21, r21
    119e:	aa 0b       	sbc	r26, r26
    11a0:	e0 e8       	ldi	r30, 0x80	; 128
    11a2:	fe ef       	ldi	r31, 0xFE	; 254
    11a4:	16 16       	cp	r1, r22
    11a6:	17 06       	cpc	r1, r23
    11a8:	e8 07       	cpc	r30, r24
    11aa:	f9 07       	cpc	r31, r25
    11ac:	c0 f0       	brcs	.+48     	; 0x11de <__fp_cmp+0x46>
    11ae:	12 16       	cp	r1, r18
    11b0:	13 06       	cpc	r1, r19
    11b2:	e4 07       	cpc	r30, r20
    11b4:	f5 07       	cpc	r31, r21
    11b6:	98 f0       	brcs	.+38     	; 0x11de <__fp_cmp+0x46>
    11b8:	62 1b       	sub	r22, r18
    11ba:	73 0b       	sbc	r23, r19
    11bc:	84 0b       	sbc	r24, r20
    11be:	95 0b       	sbc	r25, r21
    11c0:	39 f4       	brne	.+14     	; 0x11d0 <__fp_cmp+0x38>
    11c2:	0a 26       	eor	r0, r26
    11c4:	61 f0       	breq	.+24     	; 0x11de <__fp_cmp+0x46>
    11c6:	23 2b       	or	r18, r19
    11c8:	24 2b       	or	r18, r20
    11ca:	25 2b       	or	r18, r21
    11cc:	21 f4       	brne	.+8      	; 0x11d6 <__fp_cmp+0x3e>
    11ce:	08 95       	ret
    11d0:	0a 26       	eor	r0, r26
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <__fp_cmp+0x3e>
    11d4:	a1 40       	sbci	r26, 0x01	; 1
    11d6:	a6 95       	lsr	r26
    11d8:	8f ef       	ldi	r24, 0xFF	; 255
    11da:	81 1d       	adc	r24, r1
    11dc:	81 1d       	adc	r24, r1
    11de:	08 95       	ret

000011e0 <__fp_inf>:
    11e0:	97 f9       	bld	r25, 7
    11e2:	9f 67       	ori	r25, 0x7F	; 127
    11e4:	80 e8       	ldi	r24, 0x80	; 128
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	08 95       	ret

000011ec <__fp_nan>:
    11ec:	9f ef       	ldi	r25, 0xFF	; 255
    11ee:	80 ec       	ldi	r24, 0xC0	; 192
    11f0:	08 95       	ret

000011f2 <__fp_pscA>:
    11f2:	00 24       	eor	r0, r0
    11f4:	0a 94       	dec	r0
    11f6:	16 16       	cp	r1, r22
    11f8:	17 06       	cpc	r1, r23
    11fa:	18 06       	cpc	r1, r24
    11fc:	09 06       	cpc	r0, r25
    11fe:	08 95       	ret

00001200 <__fp_pscB>:
    1200:	00 24       	eor	r0, r0
    1202:	0a 94       	dec	r0
    1204:	12 16       	cp	r1, r18
    1206:	13 06       	cpc	r1, r19
    1208:	14 06       	cpc	r1, r20
    120a:	05 06       	cpc	r0, r21
    120c:	08 95       	ret

0000120e <__fp_round>:
    120e:	09 2e       	mov	r0, r25
    1210:	03 94       	inc	r0
    1212:	00 0c       	add	r0, r0
    1214:	11 f4       	brne	.+4      	; 0x121a <__fp_round+0xc>
    1216:	88 23       	and	r24, r24
    1218:	52 f0       	brmi	.+20     	; 0x122e <__fp_round+0x20>
    121a:	bb 0f       	add	r27, r27
    121c:	40 f4       	brcc	.+16     	; 0x122e <__fp_round+0x20>
    121e:	bf 2b       	or	r27, r31
    1220:	11 f4       	brne	.+4      	; 0x1226 <__fp_round+0x18>
    1222:	60 ff       	sbrs	r22, 0
    1224:	04 c0       	rjmp	.+8      	; 0x122e <__fp_round+0x20>
    1226:	6f 5f       	subi	r22, 0xFF	; 255
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	8f 4f       	sbci	r24, 0xFF	; 255
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	08 95       	ret

00001230 <__fp_split3>:
    1230:	57 fd       	sbrc	r21, 7
    1232:	90 58       	subi	r25, 0x80	; 128
    1234:	44 0f       	add	r20, r20
    1236:	55 1f       	adc	r21, r21
    1238:	59 f0       	breq	.+22     	; 0x1250 <__fp_splitA+0x10>
    123a:	5f 3f       	cpi	r21, 0xFF	; 255
    123c:	71 f0       	breq	.+28     	; 0x125a <__fp_splitA+0x1a>
    123e:	47 95       	ror	r20

00001240 <__fp_splitA>:
    1240:	88 0f       	add	r24, r24
    1242:	97 fb       	bst	r25, 7
    1244:	99 1f       	adc	r25, r25
    1246:	61 f0       	breq	.+24     	; 0x1260 <__fp_splitA+0x20>
    1248:	9f 3f       	cpi	r25, 0xFF	; 255
    124a:	79 f0       	breq	.+30     	; 0x126a <__fp_splitA+0x2a>
    124c:	87 95       	ror	r24
    124e:	08 95       	ret
    1250:	12 16       	cp	r1, r18
    1252:	13 06       	cpc	r1, r19
    1254:	14 06       	cpc	r1, r20
    1256:	55 1f       	adc	r21, r21
    1258:	f2 cf       	rjmp	.-28     	; 0x123e <__fp_split3+0xe>
    125a:	46 95       	lsr	r20
    125c:	f1 df       	rcall	.-30     	; 0x1240 <__fp_splitA>
    125e:	08 c0       	rjmp	.+16     	; 0x1270 <__fp_splitA+0x30>
    1260:	16 16       	cp	r1, r22
    1262:	17 06       	cpc	r1, r23
    1264:	18 06       	cpc	r1, r24
    1266:	99 1f       	adc	r25, r25
    1268:	f1 cf       	rjmp	.-30     	; 0x124c <__fp_splitA+0xc>
    126a:	86 95       	lsr	r24
    126c:	71 05       	cpc	r23, r1
    126e:	61 05       	cpc	r22, r1
    1270:	08 94       	sec
    1272:	08 95       	ret

00001274 <__fp_zero>:
    1274:	e8 94       	clt

00001276 <__fp_szero>:
    1276:	bb 27       	eor	r27, r27
    1278:	66 27       	eor	r22, r22
    127a:	77 27       	eor	r23, r23
    127c:	cb 01       	movw	r24, r22
    127e:	97 f9       	bld	r25, 7
    1280:	08 95       	ret

00001282 <__gesf2>:
    1282:	8a df       	rcall	.-236    	; 0x1198 <__fp_cmp>
    1284:	08 f4       	brcc	.+2      	; 0x1288 <__gesf2+0x6>
    1286:	8f ef       	ldi	r24, 0xFF	; 255
    1288:	08 95       	ret

0000128a <__divmodsi4>:
    128a:	05 2e       	mov	r0, r21
    128c:	97 fb       	bst	r25, 7
    128e:	16 f4       	brtc	.+4      	; 0x1294 <__divmodsi4+0xa>
    1290:	00 94       	com	r0
    1292:	0f d0       	rcall	.+30     	; 0x12b2 <__negsi2>
    1294:	57 fd       	sbrc	r21, 7
    1296:	05 d0       	rcall	.+10     	; 0x12a2 <__divmodsi4_neg2>
    1298:	23 d0       	rcall	.+70     	; 0x12e0 <__udivmodsi4>
    129a:	07 fc       	sbrc	r0, 7
    129c:	02 d0       	rcall	.+4      	; 0x12a2 <__divmodsi4_neg2>
    129e:	46 f4       	brtc	.+16     	; 0x12b0 <__divmodsi4_exit>
    12a0:	08 c0       	rjmp	.+16     	; 0x12b2 <__negsi2>

000012a2 <__divmodsi4_neg2>:
    12a2:	50 95       	com	r21
    12a4:	40 95       	com	r20
    12a6:	30 95       	com	r19
    12a8:	21 95       	neg	r18
    12aa:	3f 4f       	sbci	r19, 0xFF	; 255
    12ac:	4f 4f       	sbci	r20, 0xFF	; 255
    12ae:	5f 4f       	sbci	r21, 0xFF	; 255

000012b0 <__divmodsi4_exit>:
    12b0:	08 95       	ret

000012b2 <__negsi2>:
    12b2:	90 95       	com	r25
    12b4:	80 95       	com	r24
    12b6:	70 95       	com	r23
    12b8:	61 95       	neg	r22
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	8f 4f       	sbci	r24, 0xFF	; 255
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	08 95       	ret

000012c2 <__umulhisi3>:
    12c2:	a2 9f       	mul	r26, r18
    12c4:	b0 01       	movw	r22, r0
    12c6:	b3 9f       	mul	r27, r19
    12c8:	c0 01       	movw	r24, r0
    12ca:	a3 9f       	mul	r26, r19
    12cc:	70 0d       	add	r23, r0
    12ce:	81 1d       	adc	r24, r1
    12d0:	11 24       	eor	r1, r1
    12d2:	91 1d       	adc	r25, r1
    12d4:	b2 9f       	mul	r27, r18
    12d6:	70 0d       	add	r23, r0
    12d8:	81 1d       	adc	r24, r1
    12da:	11 24       	eor	r1, r1
    12dc:	91 1d       	adc	r25, r1
    12de:	08 95       	ret

000012e0 <__udivmodsi4>:
    12e0:	a1 e2       	ldi	r26, 0x21	; 33
    12e2:	1a 2e       	mov	r1, r26
    12e4:	aa 1b       	sub	r26, r26
    12e6:	bb 1b       	sub	r27, r27
    12e8:	fd 01       	movw	r30, r26
    12ea:	0d c0       	rjmp	.+26     	; 0x1306 <__udivmodsi4_ep>

000012ec <__udivmodsi4_loop>:
    12ec:	aa 1f       	adc	r26, r26
    12ee:	bb 1f       	adc	r27, r27
    12f0:	ee 1f       	adc	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	a2 17       	cp	r26, r18
    12f6:	b3 07       	cpc	r27, r19
    12f8:	e4 07       	cpc	r30, r20
    12fa:	f5 07       	cpc	r31, r21
    12fc:	20 f0       	brcs	.+8      	; 0x1306 <__udivmodsi4_ep>
    12fe:	a2 1b       	sub	r26, r18
    1300:	b3 0b       	sbc	r27, r19
    1302:	e4 0b       	sbc	r30, r20
    1304:	f5 0b       	sbc	r31, r21

00001306 <__udivmodsi4_ep>:
    1306:	66 1f       	adc	r22, r22
    1308:	77 1f       	adc	r23, r23
    130a:	88 1f       	adc	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	1a 94       	dec	r1
    1310:	69 f7       	brne	.-38     	; 0x12ec <__udivmodsi4_loop>
    1312:	60 95       	com	r22
    1314:	70 95       	com	r23
    1316:	80 95       	com	r24
    1318:	90 95       	com	r25
    131a:	9b 01       	movw	r18, r22
    131c:	ac 01       	movw	r20, r24
    131e:	bd 01       	movw	r22, r26
    1320:	cf 01       	movw	r24, r30
    1322:	08 95       	ret

00001324 <_exit>:
    1324:	f8 94       	cli

00001326 <__stop_program>:
    1326:	ff cf       	rjmp	.-2      	; 0x1326 <__stop_program>
